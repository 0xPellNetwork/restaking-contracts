{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/core/DelegationManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '../permissions/Pausable.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport './DelegationManagerStorage.sol';\n\n/**\n * @title DelegationManager\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\n * - enabling anyone to register as an operator in Pell\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ncontract DelegationManager is Initializable, OwnableUpgradeable, Pausable, DelegationManagerStorage, ReentrancyGuardUpgradeable {\n  // @dev Index for flag that pauses new delegations when set\n  uint8 internal constant PAUSED_NEW_DELEGATION = 0;\n\n  // @dev Index for flag that pauses queuing new withdrawals when set.\n  uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;\n\n  // @dev Index for flag that pauses completing existing withdrawals when set.\n  uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;\n\n  // @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  // @dev Maximum Value for `stakerOptOutWindow`. Approximately equivalent to 6 months.\n  uint256 public constant MAX_STAKER_OPT_OUT_WINDOW = 180 days;\n\n  // @notice Simple permission for functions that are only callable by the StrategyManager contract\n  modifier onlyStrategyManager() {\n    require(msg.sender == address(strategyManager), 'DelegationManager: onlyStrategyManager');\n    _;\n  }\n\n  /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @dev Initializes the immutable addresses of the strategy mananger and slasher.\n   */\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) DelegationManagerStorage(_strategyManager, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n   * minWithdrawalDelay is set only once here\n   */\n  function initialize(\n    address initialOwner,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus,\n    uint256 _minWithdrawalDelay,\n    IStrategy[] calldata _strategies,\n    uint256[] calldata _withdrawalDelay\n  ) external initializer {\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    _transferOwnership(initialOwner);\n    _setMinWithdrawalDelay(_minWithdrawalDelay);\n    _setStrategyWithdrawalDelay(_strategies, _withdrawalDelay);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Registers the caller as an operator in Pell.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external {\n    require(\n      _operatorDetails[msg.sender].earningsReceiver == address(0),\n      'DelegationManager.registerAsOperator: operator has already registered'\n    );\n    _setOperatorDetails(msg.sender, registeringOperatorDetails);\n    SignatureWithExpiry memory emptySignatureAndExpiry;\n    // delegate from the operator to themselves\n    _delegate(msg.sender, msg.sender, emptySignatureAndExpiry, bytes32(0));\n    // emit events\n    emit OperatorRegistered(msg.sender, registeringOperatorDetails);\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in Pell.\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   */\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external {\n    require(isOperator(msg.sender), 'DelegationManager.modifyOperatorDetails: caller must be an operator');\n    _setOperatorDetails(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an operator\n   */\n  function updateOperatorMetadataURI(string calldata metadataURI) external {\n    require(isOperator(msg.sender), 'DelegationManager.updateOperatorMetadataURI: caller must be an operator');\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external {\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external {\n    // check the signature expiry\n    require(stakerSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager.delegateToBySignature: staker signature expired');\n\n    // calculate the digest hash, then increment `staker`'s nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, stakerSignatureAndExpiry.expiry);\n    unchecked {\n      stakerNonce[staker] = currentStakerNonce + 1;\n    }\n\n    // actually check that the signature is valid\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\n\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\n   * a staker from their operator. Undelegation immediately removes ALL active shares/strategies from\n   * both the staker and operator, and places the shares and strategies in the withdrawal queue\n   */\n  function undelegate(address staker) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory withdrawalRoots) {\n    require(isDelegated(staker), 'DelegationManager.undelegate: staker must be delegated to undelegate');\n    require(!isOperator(staker), 'DelegationManager.undelegate: operators cannot be undelegated');\n    require(staker != address(0), 'DelegationManager.undelegate: cannot undelegate zero address');\n    address operator = delegatedTo[staker];\n    require(\n      msg.sender == staker || msg.sender == operator || msg.sender == _operatorDetails[operator].delegationApprover,\n      'DelegationManager.undelegate: caller cannot undelegate staker'\n    );\n\n    // Gather strategies and shares to remove from staker/operator during undelegation\n    // Undelegation removes ALL currently-active strategies and shares\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    // emit an event if this action was not initiated by the staker themselves\n    if (msg.sender != staker) {\n      emit StakerForceUndelegated(staker, operator);\n    }\n\n    // undelegate the staker\n    emit StakerUndelegated(staker, operator);\n    delegatedTo[staker] = address(0);\n\n    // if no delegatable shares, return an empty array, and don't queue a withdrawal\n    if (strategies.length == 0) {\n      withdrawalRoots = new bytes32[](0);\n    } else {\n      withdrawalRoots = new bytes32[](strategies.length);\n      for (uint256 i = 0; i < strategies.length; i++) {\n        IStrategy[] memory singleStrategy = new IStrategy[](1);\n        uint256[] memory singleShare = new uint256[](1);\n        singleStrategy[0] = strategies[i];\n        singleShare[0] = shares[i];\n\n        withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n          staker: staker,\n          operator: operator,\n          withdrawer: staker,\n          strategies: singleStrategy,\n          shares: singleShare\n        });\n      }\n    }\n\n    return withdrawalRoots;\n  }\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function queueWithdrawals(\n    QueuedWithdrawalParams[] calldata queuedWithdrawalParams\n  ) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory) {\n    bytes32[] memory withdrawalRoots = new bytes32[](queuedWithdrawalParams.length);\n    address operator = delegatedTo[msg.sender];\n\n    for (uint256 i = 0; i < queuedWithdrawalParams.length; i++) {\n      require(\n        queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length,\n        'DelegationManager.queueWithdrawal: input length mismatch'\n      );\n      require(queuedWithdrawalParams[i].withdrawer == msg.sender, 'DelegationManager.queueWithdrawal: withdrawer must be staker');\n\n      // Remove shares from staker's strategies and place strategies/shares in queue.\n      // If the staker is delegated to an operator, the operator's delegated shares are also reduced\n      // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\n      withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n        staker: msg.sender,\n        operator: operator,\n        withdrawer: queuedWithdrawalParams[i].withdrawer,\n        strategies: queuedWithdrawalParams[i].strategies,\n        shares: queuedWithdrawalParams[i].shares\n      });\n    }\n    return withdrawalRoots;\n  }\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other strategies, which will be transferred to the withdrawer.\n   */\n  function completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    _completeQueuedWithdrawal(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\n  }\n\n  /**\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\n   */\n  function completeQueuedWithdrawals(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    for (uint256 i = 0; i < withdrawals.length; ++i) {\n      _completeQueuedWithdrawal(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\n    }\n  }\n\n  /**\n   * @notice Increases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // add strategy shares to delegate's shares\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // subtract strategy shares from delegate's shares\n      _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\n   * @param newMinWithdrawalDelay new value of `minWithdrawalDelay`.\n   */\n  function setMinWithdrawalDelay(uint256 newMinWithdrawalDelay) external onlyOwner {\n    _setMinWithdrawalDelay(newMinWithdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to set the minimum withdrawal delay for each passed in strategy\n   * Note that the min cooldown to complete a withdrawal of a strategy is\n   * MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\n   * @param strategies The strategies to set the minimum withdrawal delay for\n   * @param withdrawalDelay The minimum withdrawal delay to set for each strategy\n   */\n  function setStrategyWithdrawalDelay(IStrategy[] calldata strategies, uint256[] calldata withdrawalDelay) external onlyOwner {\n    _setStrategyWithdrawalDelay(strategies, withdrawalDelay);\n  }\n\n  /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Sets operator parameters in the `_operatorDetails` mapping.\n   * @param operator The account registered as an operator updating their operatorDetails\n   * @param newOperatorDetails The new parameters for the operator\n   *\n   * @dev This function will revert if the operator attempts to set their `earningsReceiver` to address(0).\n   */\n  function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\n    require(\n      newOperatorDetails.earningsReceiver != address(0),\n      'DelegationManager._setOperatorDetails: cannot set `earningsReceiver` to zero address'\n    );\n    require(\n      newOperatorDetails.stakerOptOutWindow <= MAX_STAKER_OPT_OUT_WINDOW,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\n    );\n    require(\n      newOperatorDetails.stakerOptOutWindow >= _operatorDetails[operator].stakerOptOutWindow,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be decreased'\n    );\n    _operatorDetails[operator] = newOperatorDetails;\n    emit OperatorDetailsModified(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Delegates *from* a `staker` *to* an `operator`.\n   * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\n   * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   * @dev Ensures that:\n   *          1) the `staker` is not already delegated to an operator\n   *          2) the `operator` has indeed registered as an operator in Pell\n   *          3) if applicable, that the approver signature is valid and non-expired\n   */\n  function _delegate(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\n    require(!isDelegated(staker), 'DelegationManager._delegate: staker is already actively delegated');\n    require(isOperator(operator), 'DelegationManager._delegate: operator is not registered in Pell');\n\n    // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\n    address _delegationApprover = _operatorDetails[operator].delegationApprover;\n    /**\n     * Check the `_delegationApprover`'s signature, if applicable.\n     * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\n     * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\n     */\n    if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\n      // check the signature expiry\n      require(approverSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager._delegate: approver signature expired');\n      // check that the salt hasn't been used previously, then mark the salt as spent\n      require(!delegationApproverSaltIsSpent[_delegationApprover][approverSalt], 'DelegationManager._delegate: approverSalt already spent');\n      delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\n\n      // calculate the digest hash\n      bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\n        staker,\n        operator,\n        _delegationApprover,\n        approverSalt,\n        approverSignatureAndExpiry.expiry\n      );\n\n      // actually check that the signature is valid\n      EIP1271SignatureUtils.checkSignature_EIP1271(_delegationApprover, approverDigestHash, approverSignatureAndExpiry.signature);\n    }\n\n    // record the delegation relation between the staker and operator, and emit an event\n    delegatedTo[staker] = operator;\n    emit StakerDelegated(staker, operator);\n\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    for (uint256 i = 0; i < strategies.length; ) {\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * This param is intended to be passed on to the Slasher contract, but is unused in the M2 release of these contracts, and is thus commented-out.\n   */\n  function _completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 /*middlewareTimesIndex*/,\n    bool receiveAsTokens\n  ) internal {\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    require(pendingWithdrawals[withdrawalRoot], 'DelegationManager._completeQueuedWithdrawal: action is not in queue');\n\n    require(\n      withdrawal.startTimestamp + minWithdrawalDelay <= block.timestamp,\n      'DelegationManager._completeQueuedWithdrawal: minWithdrawalDelay period has not yet passed'\n    );\n\n    require(msg.sender == withdrawal.withdrawer, 'DelegationManager._completeQueuedWithdrawal: only withdrawer can complete action');\n\n    if (receiveAsTokens) {\n      require(tokens.length == withdrawal.strategies.length, 'DelegationManager._completeQueuedWithdrawal: input length mismatch');\n    }\n\n    // Remove `withdrawalRoot` from pending roots\n    delete pendingWithdrawals[withdrawalRoot];\n\n    // Finalize action by converting shares to tokens for each strategy, or\n    // by re-awarding shares in each strategy.\n    if (receiveAsTokens) {\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        _withdrawSharesAsTokens({\n          staker: withdrawal.staker,\n          withdrawer: msg.sender,\n          strategy: withdrawal.strategies[i],\n          shares: withdrawal.shares[i],\n          token: tokens[i]\n        });\n        unchecked {\n          ++i;\n        }\n      }\n      // Award shares back in StrategyManager. If withdrawer is delegated, increase the shares delegated to the operator\n    } else {\n      address currentOperator = delegatedTo[msg.sender];\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        strategyManager.addShares(msg.sender, tokens[i], withdrawal.strategies[i], withdrawal.shares[i]);\n        // Similar to `isDelegated` logic\n        if (currentOperator != address(0)) {\n          _increaseOperatorShares({\n            operator: currentOperator,\n            // the 'staker' here is the address receiving new shares\n            staker: msg.sender,\n            strategy: withdrawal.strategies[i],\n            shares: withdrawal.shares[i]\n          });\n        }\n\n        unchecked {\n          ++i;\n        }\n      }\n    }\n\n    emit WithdrawalCompleted(withdrawalRoot);\n  }\n\n  // @notice Increases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesIncreased` event\n  function _increaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    operatorShares[operator][strategy] += shares;\n    emit OperatorSharesIncreased(operator, staker, strategy, shares);\n  }\n\n  // @notice Decreases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesDecreased` event\n  function _decreaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    // This will revert on underflow, so no check needed\n    operatorShares[operator][strategy] -= shares;\n    emit OperatorSharesDecreased(operator, staker, strategy, shares);\n  }\n\n  /**\n   * @notice Removes `shares` in `strategies` from `staker` who is currently delegated to `operator` and queues a withdrawal to the `withdrawer`.\n   * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `strategies` are also decreased appropriately.\n   * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[strategy] must be set to false in the StrategyManager.\n   */\n  function _removeSharesAndQueueWithdrawal(\n    address staker,\n    address operator,\n    address withdrawer,\n    IStrategy[] memory strategies,\n    uint256[] memory shares\n  ) internal returns (bytes32) {\n    require(staker != address(0), 'DelegationManager._removeSharesAndQueueWithdrawal: staker cannot be zero address');\n    require(strategies.length != 0, 'DelegationManager._removeSharesAndQueueWithdrawal: strategies cannot be empty');\n\n    // Remove shares from staker and operator\n    // Each of these operations fail if we attempt to remove more shares than exist\n    for (uint256 i = 0; i < strategies.length; ) {\n      // Similar to `isDelegated` logic\n      if (operator != address(0)) {\n        _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n      }\n\n      require(\n        staker == withdrawer || !strategyManager.thirdPartyTransfersForbidden(strategies[i]),\n        'DelegationManager._removeSharesAndQueueWithdrawal: withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\n      );\n      // this call will revert if `shares[i]` exceeds the Staker's current shares in `strategies[i]`\n      strategyManager.removeShares(staker, strategies[i], shares[i]);\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    // Create queue entry and increment withdrawal nonce\n    uint256 nonce = cumulativeWithdrawalsQueued[staker];\n    cumulativeWithdrawalsQueued[staker]++;\n\n    Withdrawal memory withdrawal = Withdrawal({\n      staker: staker,\n      delegatedTo: operator,\n      withdrawer: withdrawer,\n      nonce: nonce,\n      startTimestamp: uint32(block.timestamp),\n      strategies: strategies,\n      shares: shares\n    });\n\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    // Place withdrawal in queue\n    pendingWithdrawals[withdrawalRoot] = true;\n\n    emit WithdrawalQueued(withdrawalRoot, withdrawal);\n    return withdrawalRoot;\n  }\n\n  /**\n   * @notice Withdraws `shares` in `strategy` to `withdrawer`. Call is ultimately forwarded to the `strategy` with info on the `token`.\n   */\n  function _withdrawSharesAsTokens(address staker, address withdrawer, IStrategy strategy, uint256 shares, IERC20 token) internal {\n    strategyManager.withdrawSharesAsTokens(withdrawer, strategy, shares, token);\n  }\n\n  function _setMinWithdrawalDelay(uint256 _minWithdrawalDelay) internal {\n    require(\n      _minWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n      'DelegationManager._setMinWithdrawalDelay: _minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n    );\n    emit MinWithdrawalDelaySet(minWithdrawalDelay, _minWithdrawalDelay);\n    minWithdrawalDelay = _minWithdrawalDelay;\n  }\n\n  /**\n   * @notice Sets the withdrawal delay for each strategy in `_strategies` to `_withdrawalDelay`.\n   * gets called when initializing contract or by calling `setStrategyWithdrawalDelay`\n   */\n  function _setStrategyWithdrawalDelay(IStrategy[] calldata _strategies, uint256[] calldata _withdrawalDelay) internal {\n    require(_strategies.length == _withdrawalDelay.length, 'DelegationManager._setStrategyWithdrawalDelay: input length mismatch');\n    uint256 numStrats = _strategies.length;\n    for (uint256 i = 0; i < numStrats; ++i) {\n      IStrategy strategy = _strategies[i];\n      uint256 prevStrategyWithdrawalDelay = strategyWithdrawalDelay[strategy];\n      uint256 newStrategyWithdrawalDelay = _withdrawalDelay[i];\n      require(\n        newStrategyWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n        'DelegationManager._setStrategyWithdrawalDelay: _withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n      );\n\n      // set the new withdrawal delay\n      strategyWithdrawalDelay[strategy] = newStrategyWithdrawalDelay;\n      emit StrategyWithdrawalDelaySet(strategy, prevStrategyWithdrawalDelay, newStrategyWithdrawalDelay);\n    }\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) public view returns (bool) {\n    return (delegatedTo[staker] != address(0));\n  }\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) public view returns (bool) {\n    return (_operatorDetails[operator].earningsReceiver != address(0));\n  }\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory) {\n    return _operatorDetails[operator];\n  }\n\n  /*\n   * @notice Returns the earnings receiver address for an operator\n   */\n  function earningsReceiver(address operator) external view returns (address) {\n    return _operatorDetails[operator].earningsReceiver;\n  }\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address) {\n    return _operatorDetails[operator].delegationApprover;\n  }\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256) {\n    return _operatorDetails[operator].stakerOptOutWindow;\n  }\n\n  /// @notice Given array of strategies, returns array of shares for the operator\n  function getOperatorShares(address operator, IStrategy[] memory strategies) public view returns (uint256[] memory) {\n    uint256[] memory shares = new uint256[](strategies.length);\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      shares[i] = operatorShares[operator][strategies[i]];\n    }\n    return shares;\n  }\n\n  /**\n   * @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n   * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n   */\n  function getDelegatableShares(address staker) public view returns (IStrategy[] memory, uint256[] memory) {\n    // Get currently active shares and strategies for `staker`\n    (IStrategy[] memory strategyManagerStrats, uint256[] memory strategyManagerShares) = strategyManager.getDeposits(staker);\n    return (strategyManagerStrats, strategyManagerShares);\n  }\n\n  /**\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param strategies The strategies to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IStrategy[] calldata strategies) public view returns (uint256) {\n    uint256 withdrawalDelay = minWithdrawalDelay;\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      uint256 currWithdrawalDelay = strategyWithdrawalDelay[strategies[i]];\n      if (currWithdrawalDelay > withdrawalDelay) {\n        withdrawalDelay = currWithdrawalDelay;\n      }\n    }\n    return withdrawalDelay;\n  }\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\n    return keccak256(abi.encode(withdrawal));\n  }\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32) {\n    // fetch the staker's current nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    // calculate the digest hash\n    return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 stakerStructHash = keccak256(abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry));\n    // calculate the digest hash\n    bytes32 stakerDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), stakerStructHash));\n    return stakerDigestHash;\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 approverStructHash = keccak256(\n      abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\n    );\n    // calculate the digest hash\n    bytes32 approverDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), approverStructHash));\n    return approverDigestHash;\n  }\n\n  /**\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('Pell')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/DelegationManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IStrategyManager.sol';\nimport '../interfaces/IDelegationManager.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `DelegationManager` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract DelegationManagerStorage is IDelegationManager {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n  /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\n  bytes32 public constant STAKER_DELEGATION_TYPEHASH =\n    keccak256('StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)');\n\n  /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\n  bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\n    keccak256('DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)');\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /// @notice The StrategyManager contract for Pell\n  IStrategyManager public immutable strategyManager;\n\n  /// @notice The Slasher contract for Pell\n  ISlasher public immutable slasher;\n\n  // 30 days (60 * 60 * 24 * 30 = 2,592,000)\n  uint256 public constant MAX_WITHDRAWAL_DELAY = 2592000;\n\n  /**\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n   * @dev By design, the following invariant should hold for each Strategy:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  mapping(address => mapping(IStrategy => uint256)) public operatorShares;\n\n  /**\n   * @notice Mapping: operator => OperatorDetails struct\n   * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\n   */\n  mapping(address => OperatorDetails) internal _operatorDetails;\n\n  /**\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  mapping(address => address) public delegatedTo;\n\n  /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\n  mapping(address => uint256) public stakerNonce;\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\n\n  /**\n   * @notice Global minimum withdrawal delay for all strategy withdrawals.\n   * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\n   * In addition, we now also configure withdrawal delays on a per-strategy basis.\n   * To withdraw from a strategy, max(minWithdrawalDelay, strategyWithdrawalDelay[strategy]) number of timestamp must have passed.\n   * See mapping strategyWithdrawalDelay below for per-strategy withdrawal delays.\n   */\n  uint256 public minWithdrawalDelay;\n\n  /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\n  mapping(bytes32 => bool) public pendingWithdrawals;\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  mapping(address => uint256) public cumulativeWithdrawalsQueued;\n\n  /**\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  mapping(IStrategy => uint256) public strategyWithdrawalDelay;\n\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) {\n    strategyManager = _strategyManager;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/DelegationManagerStorageV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IStrategyManager.sol';\nimport '../interfaces/IDelegationManager.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `DelegationManager` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract DelegationManagerStorageV2 is IDelegationManager {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n  /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\n  bytes32 public constant STAKER_DELEGATION_TYPEHASH =\n    keccak256('StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)');\n\n  /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\n  bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\n    keccak256('DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)');\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /// @notice The StrategyManager contract for Pell\n  IStrategyManager public immutable strategyManager;\n\n  /// @notice The Slasher contract for Pell\n  ISlasher public immutable slasher;\n\n  // 30 days (60 * 60 * 24 * 30 = 2,592,000)\n  uint256 public constant MAX_WITHDRAWAL_DELAY = 2592000;\n\n  /**\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n   * @dev By design, the following invariant should hold for each Strategy:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  mapping(address => mapping(IStrategy => uint256)) public operatorShares;\n\n  /**\n   * @notice Mapping: operator => OperatorDetails struct\n   * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\n   */\n  mapping(address => OperatorDetails) internal _operatorDetails;\n\n  /**\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  mapping(address => address) public delegatedTo;\n\n  /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\n  mapping(address => uint256) public stakerNonce;\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\n\n  /**\n   * @notice Global minimum withdrawal delay for all strategy withdrawals.\n   * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\n   * In addition, we now also configure withdrawal delays on a per-strategy basis.\n   * To withdraw from a strategy, max(minWithdrawalDelay, strategyWithdrawalDelay[strategy]) number of timestamp must have passed.\n   * See mapping strategyWithdrawalDelay below for per-strategy withdrawal delays.\n   */\n  uint256 public minWithdrawalDelay;\n\n  /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\n  mapping(bytes32 => bool) public pendingWithdrawals;\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  mapping(address => uint256) public cumulativeWithdrawalsQueued;\n\n  /**\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  mapping(IStrategy => uint256) public strategyWithdrawalDelay;\n\n  /// @notice Wrapped token gateway\n  address public wrappedTokenGateway;\n\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) {\n    strategyManager = _strategyManager;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[48] private __gap;\n}\n"
    },
    "contracts/core/DelegationManagerStorageV3.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IStrategyManager.sol';\nimport '../interfaces/IDelegationManagerV3.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `DelegationManager` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract DelegationManagerStorageV3 is IDelegationManagerV3 {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n\n  /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\n  bytes32 public constant STAKER_DELEGATION_TYPEHASH =\n    keccak256('StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)');\n\n  /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\n  bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\n    keccak256('DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)');\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n\n  /// @notice The StrategyManager contract for Pell\n  IStrategyManager public immutable strategyManager;\n\n  /// @notice The Slasher contract for Pell\n  ISlasher public immutable slasher;\n\n  // 30 days (60 * 60 * 24 * 30 = 2,592,000)\n  uint256 public constant MAX_WITHDRAWAL_DELAY = 2592000;\n\n  /**\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n   * @dev By design, the following invariant should hold for each Strategy:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  mapping(address => mapping(IStrategy => uint256)) public operatorShares;\n\n  /**\n   * @notice Mapping: operator => OperatorDetails struct\n   * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\n   */\n  mapping(address => OperatorDetails) internal _operatorDetails;\n\n  /**\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  mapping(address => address) public delegatedTo;\n\n  /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\n  mapping(address => uint256) public stakerNonce;\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\n\n  /**\n   * @notice Global minimum withdrawal delay for all strategy withdrawals.\n   * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\n   * In addition, we now also configure withdrawal delays on a per-strategy basis.\n   * To withdraw from a strategy, max(minWithdrawalDelay, strategyWithdrawalDelay[strategy]) number of timestamp must have passed.\n   * See mapping strategyWithdrawalDelay below for per-strategy withdrawal delays.\n   */\n  uint256 public minWithdrawalDelay;\n\n  /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\n  mapping(bytes32 => bool) public pendingWithdrawals;\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  mapping(address => uint256) public cumulativeWithdrawalsQueued;\n\n  /**\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in timestamp, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  mapping(IStrategy => uint256) public strategyWithdrawalDelay;\n\n  /// @notice Wrapped token gateway\n  address public wrappedTokenGateway;\n\n  /// @notice TSS\n  ITSSManager public tssManager;\n\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) {\n    strategyManager = _strategyManager;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[47] private __gap;\n}\n"
    },
    "contracts/core/DelegationManagerV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '../permissions/Pausable.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport './DelegationManagerStorageV2.sol';\n\n/**\n * @title DelegationManager\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\n * - enabling anyone to register as an operator in Pell\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ncontract DelegationManagerV2 is Initializable, OwnableUpgradeable, Pausable, DelegationManagerStorageV2, ReentrancyGuardUpgradeable {\n  // @dev Index for flag that pauses new delegations when set\n  uint8 internal constant PAUSED_NEW_DELEGATION = 0;\n\n  // @dev Index for flag that pauses queuing new withdrawals when set.\n  uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;\n\n  // @dev Index for flag that pauses completing existing withdrawals when set.\n  uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;\n\n  // @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  // @dev Maximum Value for `stakerOptOutWindow`. Approximately equivalent to 6 months.\n  uint256 public constant MAX_STAKER_OPT_OUT_WINDOW = 180 days;\n\n  // @notice Simple permission for functions that are only callable by the StrategyManager contract\n  modifier onlyStrategyManager() {\n    require(msg.sender == address(strategyManager), 'DelegationManager: onlyStrategyManager');\n    _;\n  }\n\n  /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @dev Initializes the immutable addresses of the strategy mananger and slasher.\n   */\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) DelegationManagerStorageV2(_strategyManager, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n   * minWithdrawalDelay is set only once here\n   */\n  function initialize(\n    address initialOwner,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus,\n    uint256 _minWithdrawalDelay,\n    IStrategy[] calldata _strategies,\n    uint256[] calldata _withdrawalDelay\n  ) external initializer {\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    __ReentrancyGuard_init();\n    _transferOwnership(initialOwner);\n    _setMinWithdrawalDelay(_minWithdrawalDelay);\n    _setStrategyWithdrawalDelay(_strategies, _withdrawalDelay);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Registers the caller as an operator in Pell.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external {\n    require(\n      _operatorDetails[msg.sender].earningsReceiver == address(0),\n      'DelegationManager.registerAsOperator: operator has already registered'\n    );\n    _setOperatorDetails(msg.sender, registeringOperatorDetails);\n    SignatureWithExpiry memory emptySignatureAndExpiry;\n    // delegate from the operator to themselves\n    _delegate(msg.sender, msg.sender, emptySignatureAndExpiry, bytes32(0));\n    // emit events\n    emit OperatorRegistered(msg.sender, registeringOperatorDetails);\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in Pell.\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   */\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external {\n    require(isOperator(msg.sender), 'DelegationManager.modifyOperatorDetails: caller must be an operator');\n    _setOperatorDetails(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an operator\n   */\n  function updateOperatorMetadataURI(string calldata metadataURI) external {\n    require(isOperator(msg.sender), 'DelegationManager.updateOperatorMetadataURI: caller must be an operator');\n    emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n  }\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external {\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external {\n    // check the signature expiry\n    require(stakerSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager.delegateToBySignature: staker signature expired');\n\n    // calculate the digest hash, then increment `staker`'s nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, stakerSignatureAndExpiry.expiry);\n    unchecked {\n      stakerNonce[staker] = currentStakerNonce + 1;\n    }\n\n    // actually check that the signature is valid\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\n\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\n   * a staker from their operator. Undelegation immediately removes ALL active shares/strategies from\n   * both the staker and operator, and places the shares and strategies in the withdrawal queue\n   */\n  function undelegate(address staker) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory withdrawalRoots) {\n    require(isDelegated(staker), 'DelegationManager.undelegate: staker must be delegated to undelegate');\n    require(!isOperator(staker), 'DelegationManager.undelegate: operators cannot be undelegated');\n    require(staker != address(0), 'DelegationManager.undelegate: cannot undelegate zero address');\n    address operator = delegatedTo[staker];\n    require(\n      msg.sender == staker || msg.sender == operator || msg.sender == _operatorDetails[operator].delegationApprover,\n      'DelegationManager.undelegate: caller cannot undelegate staker'\n    );\n\n    // Gather strategies and shares to remove from staker/operator during undelegation\n    // Undelegation removes ALL currently-active strategies and shares\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    // emit an event if this action was not initiated by the staker themselves\n    if (msg.sender != staker) {\n      emit StakerForceUndelegated(staker, operator);\n    }\n\n    // undelegate the staker\n    emit StakerUndelegated(staker, operator);\n    delegatedTo[staker] = address(0);\n\n    // if no delegatable shares, return an empty array, and don't queue a withdrawal\n    if (strategies.length == 0) {\n      withdrawalRoots = new bytes32[](0);\n    } else {\n      withdrawalRoots = new bytes32[](strategies.length);\n      for (uint256 i = 0; i < strategies.length; i++) {\n        IStrategy[] memory singleStrategy = new IStrategy[](1);\n        uint256[] memory singleShare = new uint256[](1);\n        singleStrategy[0] = strategies[i];\n        singleShare[0] = shares[i];\n\n        withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n          staker: staker,\n          operator: operator,\n          withdrawer: staker,\n          strategies: singleStrategy,\n          shares: singleShare\n        });\n      }\n    }\n\n    return withdrawalRoots;\n  }\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function queueWithdrawals(\n    QueuedWithdrawalParams[] calldata queuedWithdrawalParams\n  ) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory) {\n    bytes32[] memory withdrawalRoots = new bytes32[](queuedWithdrawalParams.length);\n    address operator = delegatedTo[msg.sender];\n\n    for (uint256 i = 0; i < queuedWithdrawalParams.length; i++) {\n      require(\n        queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length,\n        'DelegationManager.queueWithdrawal: input length mismatch'\n      );\n      require(\n        queuedWithdrawalParams[i].withdrawer == msg.sender || queuedWithdrawalParams[i].withdrawer == wrappedTokenGateway,\n        'DelegationManager.queueWithdrawal: withdrawer must be staker or wrapped token gateway'\n      );\n\n      // Remove shares from staker's strategies and place strategies/shares in queue.\n      // If the staker is delegated to an operator, the operator's delegated shares are also reduced\n      // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\n      withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n        staker: msg.sender,\n        operator: operator,\n        withdrawer: queuedWithdrawalParams[i].withdrawer,\n        strategies: queuedWithdrawalParams[i].strategies,\n        shares: queuedWithdrawalParams[i].shares\n      });\n    }\n    return withdrawalRoots;\n  }\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other strategies, which will be transferred to the withdrawer.\n   */\n  function completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    _completeQueuedWithdrawal(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\n  }\n\n  /**\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\n   */\n  function completeQueuedWithdrawals(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    for (uint256 i = 0; i < withdrawals.length; ++i) {\n      _completeQueuedWithdrawal(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\n    }\n  }\n\n  /**\n   * @notice Increases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // add strategy shares to delegate's shares\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // subtract strategy shares from delegate's shares\n      _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\n   * @param newMinWithdrawalDelay new value of `minWithdrawalDelay`.\n   */\n  function setMinWithdrawalDelay(uint256 newMinWithdrawalDelay) external onlyOwner {\n    _setMinWithdrawalDelay(newMinWithdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to set the minimum withdrawal delay for each passed in strategy\n   * Note that the min cooldown to complete a withdrawal of a strategy is\n   * MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\n   * @param strategies The strategies to set the minimum withdrawal delay for\n   * @param withdrawalDelay The minimum withdrawal delay to set for each strategy\n   */\n  function setStrategyWithdrawalDelay(IStrategy[] calldata strategies, uint256[] calldata withdrawalDelay) external onlyOwner {\n    _setStrategyWithdrawalDelay(strategies, withdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to update the wrapped token gateway\n   * @param _newWrappedTokenGateway New wrapped token gateway address\n   */\n  function updateWrappedTokenGateway(address _newWrappedTokenGateway) external onlyOwner {\n    emit UpdateWrappedTokenGateway(wrappedTokenGateway, _newWrappedTokenGateway);\n    wrappedTokenGateway = _newWrappedTokenGateway;\n  }\n\n  /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Sets operator parameters in the `_operatorDetails` mapping.\n   * @param operator The account registered as an operator updating their operatorDetails\n   * @param newOperatorDetails The new parameters for the operator\n   *\n   * @dev This function will revert if the operator attempts to set their `earningsReceiver` to address(0).\n   */\n  function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\n    require(\n      newOperatorDetails.earningsReceiver != address(0),\n      'DelegationManager._setOperatorDetails: cannot set `earningsReceiver` to zero address'\n    );\n    require(\n      newOperatorDetails.stakerOptOutWindow <= MAX_STAKER_OPT_OUT_WINDOW,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\n    );\n    require(\n      newOperatorDetails.stakerOptOutWindow >= _operatorDetails[operator].stakerOptOutWindow,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be decreased'\n    );\n    _operatorDetails[operator] = newOperatorDetails;\n    emit OperatorDetailsModified(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Delegates *from* a `staker` *to* an `operator`.\n   * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\n   * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   * @dev Ensures that:\n   *          1) the `staker` is not already delegated to an operator\n   *          2) the `operator` has indeed registered as an operator in Pell\n   *          3) if applicable, that the approver signature is valid and non-expired\n   */\n  function _delegate(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\n    require(!isDelegated(staker), 'DelegationManager._delegate: staker is already actively delegated');\n    require(isOperator(operator), 'DelegationManager._delegate: operator is not registered in Pell');\n\n    // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\n    address _delegationApprover = _operatorDetails[operator].delegationApprover;\n    /**\n     * Check the `_delegationApprover`'s signature, if applicable.\n     * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\n     * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\n     */\n    if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\n      // check the signature expiry\n      require(approverSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager._delegate: approver signature expired');\n      // check that the salt hasn't been used previously, then mark the salt as spent\n      require(!delegationApproverSaltIsSpent[_delegationApprover][approverSalt], 'DelegationManager._delegate: approverSalt already spent');\n      delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\n\n      // calculate the digest hash\n      bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\n        staker,\n        operator,\n        _delegationApprover,\n        approverSalt,\n        approverSignatureAndExpiry.expiry\n      );\n\n      // actually check that the signature is valid\n      EIP1271SignatureUtils.checkSignature_EIP1271(_delegationApprover, approverDigestHash, approverSignatureAndExpiry.signature);\n    }\n\n    // record the delegation relation between the staker and operator, and emit an event\n    delegatedTo[staker] = operator;\n    emit StakerDelegated(staker, operator);\n\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    for (uint256 i = 0; i < strategies.length; ) {\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * This param is intended to be passed on to the Slasher contract, but is unused in the M2 release of these contracts, and is thus commented-out.\n   */\n  function _completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 /*middlewareTimesIndex*/,\n    bool receiveAsTokens\n  ) internal {\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    require(pendingWithdrawals[withdrawalRoot], 'DelegationManager._completeQueuedWithdrawal: action is not in queue');\n\n    require(\n      withdrawal.startTimestamp + minWithdrawalDelay <= block.timestamp,\n      'DelegationManager._completeQueuedWithdrawal: minWithdrawalDelay period has not yet passed'\n    );\n\n    require(msg.sender == withdrawal.withdrawer, 'DelegationManager._completeQueuedWithdrawal: only withdrawer can complete action');\n\n    if (receiveAsTokens) {\n      require(tokens.length == withdrawal.strategies.length, 'DelegationManager._completeQueuedWithdrawal: input length mismatch');\n    }\n\n    // Remove `withdrawalRoot` from pending roots\n    delete pendingWithdrawals[withdrawalRoot];\n\n    // Finalize action by converting shares to tokens for each strategy, or\n    // by re-awarding shares in each strategy.\n    if (receiveAsTokens) {\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        _withdrawSharesAsTokens({\n          staker: withdrawal.staker,\n          withdrawer: msg.sender,\n          strategy: withdrawal.strategies[i],\n          shares: withdrawal.shares[i],\n          token: tokens[i]\n        });\n        unchecked {\n          ++i;\n        }\n      }\n      // Award shares back in StrategyManager. If withdrawer is delegated, increase the shares delegated to the operator\n    } else {\n      address currentOperator = delegatedTo[msg.sender];\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        strategyManager.addShares(msg.sender, tokens[i], withdrawal.strategies[i], withdrawal.shares[i]);\n        // Similar to `isDelegated` logic\n        if (currentOperator != address(0)) {\n          _increaseOperatorShares({\n            operator: currentOperator,\n            // the 'staker' here is the address receiving new shares\n            staker: msg.sender,\n            strategy: withdrawal.strategies[i],\n            shares: withdrawal.shares[i]\n          });\n        }\n\n        unchecked {\n          ++i;\n        }\n      }\n    }\n\n    emit WithdrawalCompleted(withdrawalRoot);\n  }\n\n  // @notice Increases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesIncreased` event\n  function _increaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    operatorShares[operator][strategy] += shares;\n    emit OperatorSharesIncreased(operator, staker, strategy, shares);\n  }\n\n  // @notice Decreases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesDecreased` event\n  function _decreaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    // This will revert on underflow, so no check needed\n    operatorShares[operator][strategy] -= shares;\n    emit OperatorSharesDecreased(operator, staker, strategy, shares);\n  }\n\n  /**\n   * @notice Removes `shares` in `strategies` from `staker` who is currently delegated to `operator` and queues a withdrawal to the `withdrawer`.\n   * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `strategies` are also decreased appropriately.\n   * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[strategy] must be set to false in the StrategyManager.\n   */\n  function _removeSharesAndQueueWithdrawal(\n    address staker,\n    address operator,\n    address withdrawer,\n    IStrategy[] memory strategies,\n    uint256[] memory shares\n  ) internal returns (bytes32) {\n    require(staker != address(0), 'DelegationManager._removeSharesAndQueueWithdrawal: staker cannot be zero address');\n    require(strategies.length != 0, 'DelegationManager._removeSharesAndQueueWithdrawal: strategies cannot be empty');\n\n    // Remove shares from staker and operator\n    // Each of these operations fail if we attempt to remove more shares than exist\n    for (uint256 i = 0; i < strategies.length; ) {\n      // Similar to `isDelegated` logic\n      if (operator != address(0)) {\n        _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n      }\n\n      require(\n        staker == withdrawer || !strategyManager.thirdPartyTransfersForbidden(strategies[i]),\n        'DelegationManager._removeSharesAndQueueWithdrawal: withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\n      );\n      // this call will revert if `shares[i]` exceeds the Staker's current shares in `strategies[i]`\n      strategyManager.removeShares(staker, strategies[i], shares[i]);\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    // Create queue entry and increment withdrawal nonce\n    uint256 nonce = cumulativeWithdrawalsQueued[staker];\n    cumulativeWithdrawalsQueued[staker]++;\n\n    Withdrawal memory withdrawal = Withdrawal({\n      staker: staker,\n      delegatedTo: operator,\n      withdrawer: withdrawer,\n      nonce: nonce,\n      startTimestamp: uint32(block.timestamp),\n      strategies: strategies,\n      shares: shares\n    });\n\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    // Place withdrawal in queue\n    pendingWithdrawals[withdrawalRoot] = true;\n\n    emit WithdrawalQueued(withdrawalRoot, withdrawal);\n    return withdrawalRoot;\n  }\n\n  /**\n   * @notice Withdraws `shares` in `strategy` to `withdrawer`. Call is ultimately forwarded to the `strategy` with info on the `token`.\n   */\n  function _withdrawSharesAsTokens(address staker, address withdrawer, IStrategy strategy, uint256 shares, IERC20 token) internal {\n    strategyManager.withdrawSharesAsTokens(withdrawer, strategy, shares, token);\n  }\n\n  function _setMinWithdrawalDelay(uint256 _minWithdrawalDelay) internal {\n    require(\n      _minWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n      'DelegationManager._setMinWithdrawalDelay: _minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n    );\n    emit MinWithdrawalDelaySet(minWithdrawalDelay, _minWithdrawalDelay);\n    minWithdrawalDelay = _minWithdrawalDelay;\n  }\n\n  /**\n   * @notice Sets the withdrawal delay for each strategy in `_strategies` to `_withdrawalDelay`.\n   * gets called when initializing contract or by calling `setStrategyWithdrawalDelay`\n   */\n  function _setStrategyWithdrawalDelay(IStrategy[] calldata _strategies, uint256[] calldata _withdrawalDelay) internal {\n    require(_strategies.length == _withdrawalDelay.length, 'DelegationManager._setStrategyWithdrawalDelay: input length mismatch');\n    uint256 numStrats = _strategies.length;\n    for (uint256 i = 0; i < numStrats; ++i) {\n      IStrategy strategy = _strategies[i];\n      uint256 prevStrategyWithdrawalDelay = strategyWithdrawalDelay[strategy];\n      uint256 newStrategyWithdrawalDelay = _withdrawalDelay[i];\n      require(\n        newStrategyWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n        'DelegationManager._setStrategyWithdrawalDelay: _withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n      );\n\n      // set the new withdrawal delay\n      strategyWithdrawalDelay[strategy] = newStrategyWithdrawalDelay;\n      emit StrategyWithdrawalDelaySet(strategy, prevStrategyWithdrawalDelay, newStrategyWithdrawalDelay);\n    }\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) public view returns (bool) {\n    return (delegatedTo[staker] != address(0));\n  }\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) public view returns (bool) {\n    return (_operatorDetails[operator].earningsReceiver != address(0));\n  }\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory) {\n    return _operatorDetails[operator];\n  }\n\n  /*\n   * @notice Returns the earnings receiver address for an operator\n   */\n  function earningsReceiver(address operator) external view returns (address) {\n    return _operatorDetails[operator].earningsReceiver;\n  }\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address) {\n    return _operatorDetails[operator].delegationApprover;\n  }\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256) {\n    return _operatorDetails[operator].stakerOptOutWindow;\n  }\n\n  /// @notice Given array of strategies, returns array of shares for the operator\n  function getOperatorShares(address operator, IStrategy[] memory strategies) public view returns (uint256[] memory) {\n    uint256[] memory shares = new uint256[](strategies.length);\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      shares[i] = operatorShares[operator][strategies[i]];\n    }\n    return shares;\n  }\n\n  /**\n   * @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n   * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n   */\n  function getDelegatableShares(address staker) public view returns (IStrategy[] memory, uint256[] memory) {\n    // Get currently active shares and strategies for `staker`\n    (IStrategy[] memory strategyManagerStrats, uint256[] memory strategyManagerShares) = strategyManager.getDeposits(staker);\n    return (strategyManagerStrats, strategyManagerShares);\n  }\n\n  /**\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param strategies The strategies to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IStrategy[] calldata strategies) public view returns (uint256) {\n    uint256 withdrawalDelay = minWithdrawalDelay;\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      uint256 currWithdrawalDelay = strategyWithdrawalDelay[strategies[i]];\n      if (currWithdrawalDelay > withdrawalDelay) {\n        withdrawalDelay = currWithdrawalDelay;\n      }\n    }\n    return withdrawalDelay;\n  }\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\n    return keccak256(abi.encode(withdrawal));\n  }\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32) {\n    // fetch the staker's current nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    // calculate the digest hash\n    return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 stakerStructHash = keccak256(abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry));\n    // calculate the digest hash\n    bytes32 stakerDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), stakerStructHash));\n    return stakerDigestHash;\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 approverStructHash = keccak256(\n      abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\n    );\n    // calculate the digest hash\n    bytes32 approverDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), approverStructHash));\n    return approverDigestHash;\n  }\n\n  /**\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('Pell')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/DelegationManagerV3.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '../permissions/Pausable.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport './DelegationManagerStorageV3.sol';\n\n/**\n * @title DelegationManager\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\n * - enabling anyone to register as an operator in Pell\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ncontract DelegationManagerV3 is Initializable, OwnableUpgradeable, Pausable, DelegationManagerStorageV3, ReentrancyGuardUpgradeable {\n  // @dev Index for flag that pauses new delegations when set\n  uint8 internal constant PAUSED_NEW_DELEGATION = 0;\n\n  // @dev Index for flag that pauses queuing new withdrawals when set.\n  uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;\n\n  // @dev Index for flag that pauses completing existing withdrawals when set.\n  uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;\n\n  // @dev Chain ID at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  // @dev Maximum Value for `stakerOptOutWindow`. Approximately equivalent to 6 months.\n  uint256 public constant MAX_STAKER_OPT_OUT_WINDOW = 180 days;\n\n  // @notice Simple permission for functions that are only callable by the StrategyManager contract\n  modifier onlyStrategyManager() {\n    require(msg.sender == address(strategyManager), 'DelegationManager: onlyStrategyManager');\n    _;\n  }\n\n  // @notice Simple permission for functions that are only callable by the StrategyManager contract\n  modifier onlyTSSManager() {\n    require(tssManager.isTSSNode(msg.sender), 'DelegationManager: onlyTSSManager');\n    _;\n  }\n\n  /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @dev Initializes the immutable addresses of the strategy mananger and slasher.\n   */\n  constructor(IStrategyManager _strategyManager, ISlasher _slasher) DelegationManagerStorageV3(_strategyManager, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  /**\n   * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n   * minWithdrawalDelay is set only once here\n   */\n  function initialize(\n    address initialOwner,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus,\n    uint256 _minWithdrawalDelay,\n    IStrategy[] calldata _strategies,\n    uint256[] calldata _withdrawalDelay\n  ) external initializer {\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    __ReentrancyGuard_init();\n    _transferOwnership(initialOwner);\n    _setMinWithdrawalDelay(_minWithdrawalDelay);\n    _setStrategyWithdrawalDelay(_strategies, _withdrawalDelay);\n  }\n\n  /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n  /**\n   * @notice Registers the caller as an operator in Pell.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function syncRegisterAsOperator(\n    address operator,\n    OperatorDetails calldata registeringOperatorDetails,\n    string calldata metadataURI\n  ) external onlyTSSManager {\n    require(!isDelegated(operator), 'DelegationManager.registerAsOperator: caller is already actively delegated');\n    _setOperatorDetails(operator, registeringOperatorDetails);\n    SignatureWithExpiry memory emptySignatureAndExpiry;\n    // delegate from the operator to themselves\n    _delegate(operator, operator, emptySignatureAndExpiry, bytes32(0));\n    // emit events\n    emit OperatorRegistered(operator, registeringOperatorDetails);\n    emit OperatorMetadataURIUpdated(operator, metadataURI);\n  }\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in Pell.\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   */\n  function syncModifyOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) external onlyTSSManager {\n    require(isOperator(operator), 'DelegationManager.modifyOperatorDetails: caller must be an operator');\n    _setOperatorDetails(operator, newOperatorDetails);\n  }\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external {\n    require(!isDelegated(msg.sender), 'DelegationManager._delegate: staker is already actively delegated');\n    require(isOperator(operator), 'DelegationManager._delegate: operator is not registered in Pell');\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external {\n    require(!isDelegated(staker), 'DelegationManager._delegate: staker is already actively delegated');\n    require(isOperator(operator), 'DelegationManager._delegate: operator is not registered in Pell');\n    // check the signature expiry\n    require(stakerSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager.delegateToBySignature: staker signature expired');\n\n    // calculate the digest hash, then increment `staker`'s nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, stakerSignatureAndExpiry.expiry);\n    unchecked {\n      stakerNonce[staker] = currentStakerNonce + 1;\n    }\n\n    // actually check that the signature is valid\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\n\n    // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n    _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\n  }\n\n  /**\n   * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\n   * a staker from their operator. Undelegation immediately removes ALL active shares/strategies from\n   * both the staker and operator, and places the shares and strategies in the withdrawal queue\n   */\n  function undelegate(address staker) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory withdrawalRoots) {\n    require(isDelegated(staker), 'DelegationManager.undelegate: staker must be delegated to undelegate');\n    require(!isOperator(staker), 'DelegationManager.undelegate: operators cannot be undelegated');\n    require(staker != address(0), 'DelegationManager.undelegate: cannot undelegate zero address');\n    address operator = delegatedTo[staker];\n    require(\n      msg.sender == staker || msg.sender == operator || msg.sender == _operatorDetails[operator].delegationApprover,\n      'DelegationManager.undelegate: caller cannot undelegate staker'\n    );\n\n    // Gather strategies and shares to remove from staker/operator during undelegation\n    // Undelegation removes ALL currently-active strategies and shares\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    // emit an event if this action was not initiated by the staker themselves\n    if (msg.sender != staker) {\n      emit StakerForceUndelegated(staker, operator);\n    }\n\n    // undelegate the staker\n    emit StakerUndelegated(staker, operator);\n    delegatedTo[staker] = address(0);\n\n    // if no delegatable shares, return an empty array, and don't queue a withdrawal\n    if (strategies.length == 0) {\n      withdrawalRoots = new bytes32[](0);\n    } else {\n      withdrawalRoots = new bytes32[](strategies.length);\n      for (uint256 i = 0; i < strategies.length; i++) {\n        IStrategy[] memory singleStrategy = new IStrategy[](1);\n        uint256[] memory singleShare = new uint256[](1);\n        singleStrategy[0] = strategies[i];\n        singleShare[0] = shares[i];\n\n        withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n          staker: staker,\n          operator: operator,\n          withdrawer: staker,\n          strategies: singleStrategy,\n          shares: singleShare\n        });\n      }\n    }\n\n    return withdrawalRoots;\n  }\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function queueWithdrawals(\n    QueuedWithdrawalParams[] calldata queuedWithdrawalParams\n  ) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory) {\n    bytes32[] memory withdrawalRoots = new bytes32[](queuedWithdrawalParams.length);\n    address operator = delegatedTo[msg.sender];\n\n    for (uint256 i = 0; i < queuedWithdrawalParams.length; i++) {\n      require(\n        queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length,\n        'DelegationManager.queueWithdrawal: input length mismatch'\n      );\n      require(\n        queuedWithdrawalParams[i].withdrawer == msg.sender || queuedWithdrawalParams[i].withdrawer == wrappedTokenGateway,\n        'DelegationManager.queueWithdrawal: withdrawer must be staker or wrapped token gateway'\n      );\n\n      // Remove shares from staker's strategies and place strategies/shares in queue.\n      // If the staker is delegated to an operator, the operator's delegated shares are also reduced\n      // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\n      withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n        staker: msg.sender,\n        operator: operator,\n        withdrawer: queuedWithdrawalParams[i].withdrawer,\n        strategies: queuedWithdrawalParams[i].strategies,\n        shares: queuedWithdrawalParams[i].shares\n      });\n    }\n    return withdrawalRoots;\n  }\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other strategies, which will be transferred to the withdrawer.\n   */\n  function completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    _completeQueuedWithdrawal(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\n  }\n\n  /**\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\n   */\n  function completeQueuedWithdrawals(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n    for (uint256 i = 0; i < withdrawals.length; ++i) {\n      _completeQueuedWithdrawal(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\n    }\n  }\n\n  /**\n   * @notice Increases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // add strategy shares to delegate's shares\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external onlyStrategyManager {\n    // if the staker is delegated to an operator\n    if (isDelegated(staker)) {\n      address operator = delegatedTo[staker];\n\n      // subtract strategy shares from delegate's shares\n      _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n    }\n  }\n\n  /**\n   * @notice Owner-only function for modifying the value of the `minWithdrawalDelay` variable.\n   * @param newMinWithdrawalDelay new value of `minWithdrawalDelay`.\n   */\n  function setMinWithdrawalDelay(uint256 newMinWithdrawalDelay) external onlyOwner {\n    _setMinWithdrawalDelay(newMinWithdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to set the minimum withdrawal delay for each passed in strategy\n   * Note that the min cooldown to complete a withdrawal of a strategy is\n   * MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\n   * @param strategies The strategies to set the minimum withdrawal delay for\n   * @param withdrawalDelay The minimum withdrawal delay to set for each strategy\n   */\n  function setStrategyWithdrawalDelay(IStrategy[] calldata strategies, uint256[] calldata withdrawalDelay) external onlyOwner {\n    _setStrategyWithdrawalDelay(strategies, withdrawalDelay);\n  }\n\n  /**\n   * @notice Called by owner to update the wrapped token gateway\n   * @param _newWrappedTokenGateway New wrapped token gateway address\n   */\n  function updateWrappedTokenGateway(address _newWrappedTokenGateway) external onlyOwner {\n    emit UpdateWrappedTokenGateway(wrappedTokenGateway, _newWrappedTokenGateway);\n    wrappedTokenGateway = _newWrappedTokenGateway;\n  }\n\n  /**\n   * @notice Called by owner to update the tss manager\n   * @param _tssManager New tss manager address\n   */\n  function updateTSSManager(ITSSManager _tssManager) external onlyOwner {\n    emit UpdateTSSManager(tssManager, _tssManager);\n    tssManager = _tssManager;\n  }\n\n  /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Sets operator parameters in the `_operatorDetails` mapping.\n   * @param operator The account registered as an operator updating their operatorDetails\n   * @param newOperatorDetails The new parameters for the operator\n   *\n   */\n  function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\n    require(\n      newOperatorDetails.stakerOptOutWindow <= MAX_STAKER_OPT_OUT_WINDOW,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be > MAX_STAKER_OPT_OUT_WINDOW'\n    );\n    require(\n      newOperatorDetails.stakerOptOutWindow >= _operatorDetails[operator].stakerOptOutWindow,\n      'DelegationManager._setOperatorDetails: stakerOptOutWindow cannot be decreased'\n    );\n    _operatorDetails[operator] = newOperatorDetails;\n    emit OperatorDetailsModified(msg.sender, newOperatorDetails);\n  }\n\n  /**\n   * @notice Delegates *from* a `staker` *to* an `operator`.\n   * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\n   * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   * @dev Ensures that:\n   *          1) the `staker` is not already delegated to an operator\n   *          2) the `operator` has indeed registered as an operator in Pell\n   *          3) if applicable, that the approver signature is valid and non-expired\n   */\n  function _delegate(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\n    // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\n    address _delegationApprover = _operatorDetails[operator].delegationApprover;\n    /**\n     * Check the `_delegationApprover`'s signature, if applicable.\n     * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\n     * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\n     */\n    if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\n      // check the signature expiry\n      require(approverSignatureAndExpiry.expiry >= block.timestamp, 'DelegationManager._delegate: approver signature expired');\n      // check that the salt hasn't been used previously, then mark the salt as spent\n      require(!delegationApproverSaltIsSpent[_delegationApprover][approverSalt], 'DelegationManager._delegate: approverSalt already spent');\n      delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\n\n      // calculate the digest hash\n      bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\n        staker,\n        operator,\n        _delegationApprover,\n        approverSalt,\n        approverSignatureAndExpiry.expiry\n      );\n\n      // actually check that the signature is valid\n      EIP1271SignatureUtils.checkSignature_EIP1271(_delegationApprover, approverDigestHash, approverSignatureAndExpiry.signature);\n    }\n\n    // record the delegation relation between the staker and operator, and emit an event\n    delegatedTo[staker] = operator;\n    emit StakerDelegated(staker, operator);\n\n    (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n    for (uint256 i = 0; i < strategies.length; ) {\n      _increaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * This param is intended to be passed on to the Slasher contract, but is unused in the M2 release of these contracts, and is thus commented-out.\n   */\n  function _completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 /*middlewareTimesIndex*/,\n    bool receiveAsTokens\n  ) internal {\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    require(pendingWithdrawals[withdrawalRoot], 'DelegationManager._completeQueuedWithdrawal: action is not in queue');\n\n    require(\n      withdrawal.startTimestamp + minWithdrawalDelay <= block.timestamp,\n      'DelegationManager._completeQueuedWithdrawal: minWithdrawalDelay period has not yet passed'\n    );\n\n    require(msg.sender == withdrawal.withdrawer, 'DelegationManager._completeQueuedWithdrawal: only withdrawer can complete action');\n\n    if (receiveAsTokens) {\n      require(tokens.length == withdrawal.strategies.length, 'DelegationManager._completeQueuedWithdrawal: input length mismatch');\n    }\n\n    // Remove `withdrawalRoot` from pending roots\n    delete pendingWithdrawals[withdrawalRoot];\n\n    // Finalize action by converting shares to tokens for each strategy, or\n    // by re-awarding shares in each strategy.\n    if (receiveAsTokens) {\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        _withdrawSharesAsTokens({\n          staker: withdrawal.staker,\n          withdrawer: msg.sender,\n          strategy: withdrawal.strategies[i],\n          shares: withdrawal.shares[i],\n          token: tokens[i]\n        });\n        unchecked {\n          ++i;\n        }\n      }\n      // Award shares back in StrategyManage. If withdrawer is delegated, increase the shares delegated to the operator\n    } else {\n      address currentOperator = delegatedTo[msg.sender];\n      for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n        require(\n          withdrawal.startTimestamp + strategyWithdrawalDelay[withdrawal.strategies[i]] <= block.timestamp,\n          'DelegationManager._completeQueuedWithdrawal: withdrawalDelay period has not yet passed for this strategy'\n        );\n\n        strategyManager.addShares(msg.sender, tokens[i], withdrawal.strategies[i], withdrawal.shares[i]);\n        // Similar to `isDelegated` logic\n        if (currentOperator != address(0)) {\n          _increaseOperatorShares({\n            operator: currentOperator,\n            // the 'staker' here is the address receiving new shares\n            staker: msg.sender,\n            strategy: withdrawal.strategies[i],\n            shares: withdrawal.shares[i]\n          });\n        }\n\n        unchecked {\n          ++i;\n        }\n      }\n    }\n\n    emit WithdrawalCompleted(withdrawalRoot);\n  }\n\n  // @notice Increases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesIncreased` event\n  function _increaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    operatorShares[operator][strategy] += shares;\n    emit OperatorSharesIncreased(operator, staker, strategy, shares);\n  }\n\n  // @notice Decreases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesDecreased` event\n  function _decreaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n    // This will revert on underflow, so no check needed\n    operatorShares[operator][strategy] -= shares;\n    emit OperatorSharesDecreased(operator, staker, strategy, shares);\n  }\n\n  /**\n   * @notice Removes `shares` in `strategies` from `staker` who is currently delegated to `operator` and queues a withdrawal to the `withdrawer`.\n   * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `strategies` are also decreased appropriately.\n   * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[strategy] must be set to false in the StrategyManager.\n   */\n  function _removeSharesAndQueueWithdrawal(\n    address staker,\n    address operator,\n    address withdrawer,\n    IStrategy[] memory strategies,\n    uint256[] memory shares\n  ) internal returns (bytes32) {\n    require(staker != address(0), 'DelegationManager._removeSharesAndQueueWithdrawal: staker cannot be zero address');\n    require(strategies.length != 0, 'DelegationManager._removeSharesAndQueueWithdrawal: strategies cannot be empty');\n\n    // Remove shares from staker and operator\n    // Each of these operations fail if we attempt to remove more shares than exist\n    for (uint256 i = 0; i < strategies.length; ) {\n      // Similar to `isDelegated` logic\n      if (operator != address(0)) {\n        _decreaseOperatorShares({operator: operator, staker: staker, strategy: strategies[i], shares: shares[i]});\n      }\n\n      require(\n        staker == withdrawer || !strategyManager.thirdPartyTransfersForbidden(strategies[i]),\n        'DelegationManager._removeSharesAndQueueWithdrawal: withdrawer must be same address as staker if thirdPartyTransfersForbidden are set'\n      );\n      // this call will revert if `shares[i]` exceeds the Staker's current shares in `strategies[i]`\n      strategyManager.removeShares(staker, strategies[i], shares[i]);\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    // Create queue entry and increment withdrawal nonce\n    uint256 nonce = cumulativeWithdrawalsQueued[staker];\n    cumulativeWithdrawalsQueued[staker]++;\n\n    Withdrawal memory withdrawal = Withdrawal({\n      staker: staker,\n      delegatedTo: operator,\n      withdrawer: withdrawer,\n      nonce: nonce,\n      startTimestamp: uint32(block.timestamp),\n      strategies: strategies,\n      shares: shares\n    });\n\n    bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n    // Place withdrawal in queue\n    pendingWithdrawals[withdrawalRoot] = true;\n\n    emit WithdrawalQueued(withdrawalRoot, withdrawal);\n    return withdrawalRoot;\n  }\n\n  /**\n   * @notice Withdraws `shares` in `strategy` to `withdrawer`. Call is ultimately forwarded to the `strategy` with info on the `token`.\n   */\n  function _withdrawSharesAsTokens(address staker, address withdrawer, IStrategy strategy, uint256 shares, IERC20 token) internal {\n    strategyManager.withdrawSharesAsTokens(withdrawer, strategy, shares, token);\n  }\n\n  function _setMinWithdrawalDelay(uint256 _minWithdrawalDelay) internal {\n    require(\n      _minWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n      'DelegationManager._setMinWithdrawalDelay: _minWithdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n    );\n    emit MinWithdrawalDelaySet(minWithdrawalDelay, _minWithdrawalDelay);\n    minWithdrawalDelay = _minWithdrawalDelay;\n  }\n\n  /**\n   * @notice Sets the withdrawal delay for each strategy in `_strategies` to `_withdrawalDelay`.\n   * gets called when initializing contract or by calling `setStrategyWithdrawalDelay`\n   */\n  function _setStrategyWithdrawalDelay(IStrategy[] calldata _strategies, uint256[] calldata _withdrawalDelay) internal {\n    require(_strategies.length == _withdrawalDelay.length, 'DelegationManager._setStrategyWithdrawalDelay: input length mismatch');\n    uint256 numStrats = _strategies.length;\n    for (uint256 i = 0; i < numStrats; ++i) {\n      IStrategy strategy = _strategies[i];\n      uint256 prevStrategyWithdrawalDelay = strategyWithdrawalDelay[strategy];\n      uint256 newStrategyWithdrawalDelay = _withdrawalDelay[i];\n      require(\n        newStrategyWithdrawalDelay <= MAX_WITHDRAWAL_DELAY,\n        'DelegationManager._setStrategyWithdrawalDelay: _withdrawalDelay cannot be > MAX_WITHDRAWAL_DELAY'\n      );\n\n      // set the new withdrawal delay\n      strategyWithdrawalDelay[strategy] = newStrategyWithdrawalDelay;\n      emit StrategyWithdrawalDelaySet(strategy, prevStrategyWithdrawalDelay, newStrategyWithdrawalDelay);\n    }\n  }\n\n  /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) public view returns (bool) {\n    return (delegatedTo[staker] != address(0));\n  }\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) public view returns (bool) {\n    return operator != address(0) && delegatedTo[operator] == operator;\n  }\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory) {\n    return _operatorDetails[operator];\n  }\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address) {\n    return _operatorDetails[operator].delegationApprover;\n  }\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256) {\n    return _operatorDetails[operator].stakerOptOutWindow;\n  }\n\n  /// @notice Given array of strategies, returns array of shares for the operator\n  function getOperatorShares(address operator, IStrategy[] memory strategies) public view returns (uint256[] memory) {\n    uint256[] memory shares = new uint256[](strategies.length);\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      shares[i] = operatorShares[operator][strategies[i]];\n    }\n    return shares;\n  }\n\n  /**\n   * @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n   * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n   */\n  function getDelegatableShares(address staker) public view returns (IStrategy[] memory, uint256[] memory) {\n    // Get currently active shares and strategies for `staker`\n    (IStrategy[] memory strategyManagerStrats, uint256[] memory strategyManagerShares) = strategyManager.getDeposits(staker);\n    return (strategyManagerStrats, strategyManagerShares);\n  }\n\n  /**\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param strategies The strategies to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IStrategy[] calldata strategies) public view returns (uint256) {\n    uint256 withdrawalDelay = minWithdrawalDelay;\n    for (uint256 i = 0; i < strategies.length; ++i) {\n      uint256 currWithdrawalDelay = strategyWithdrawalDelay[strategies[i]];\n      if (currWithdrawalDelay > withdrawalDelay) {\n        withdrawalDelay = currWithdrawalDelay;\n      }\n    }\n    return withdrawalDelay;\n  }\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\n    return keccak256(abi.encode(withdrawal));\n  }\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32) {\n    // fetch the staker's current nonce\n    uint256 currentStakerNonce = stakerNonce[staker];\n    // calculate the digest hash\n    return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 stakerStructHash = keccak256(abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry));\n    // calculate the digest hash\n    bytes32 stakerDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), stakerStructHash));\n    return stakerDigestHash;\n  }\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) public view returns (bytes32) {\n    // calculate the struct hash\n    bytes32 approverStructHash = keccak256(\n      abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\n    );\n    // calculate the digest hash\n    bytes32 approverDigestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), approverStructHash));\n    return approverDigestHash;\n  }\n\n  /**\n   * @dev Recalculates the domain separator when the chainid changes due to a fork.\n   */\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('Pell')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/Slasher.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/ISlasher.sol';\nimport '../interfaces/IDelegationManager.sol';\nimport '../interfaces/IStrategyManager.sol';\nimport '../libraries/StructuredLinkedList.sol';\nimport '../permissions/Pausable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/**\n * @notice This contract is not in use as of the Pell release.\n */\ncontract Slasher is Initializable, OwnableUpgradeable, ISlasher, Pausable {\n  constructor(IStrategyManager, IDelegationManager) {}\n\n  function initialize(address, IPauserRegistry, uint256) external {}\n\n  function optIntoSlashing(address) external {}\n\n  function freezeOperator(address) external {}\n\n  function resetFrozenStatus(address[] calldata) external {}\n\n  function recordFirstStakeUpdate(address, uint32) external {}\n\n  function recordStakeUpdate(address, uint32, uint32, uint256) external {}\n\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address, uint32) external {}\n\n  function strategyManager() external view returns (IStrategyManager) {}\n\n  function delegation() external view returns (IDelegationManager) {}\n\n  function isFrozen(address) external view returns (bool) {}\n\n  function canSlash(address, address) external view returns (bool) {}\n\n  function contractCanSlashOperatorUntilTimestamp(address, address) external view returns (uint32) {}\n\n  function latestUpdateTimestamp(address, address) external view returns (uint32) {}\n\n  function getCorrectValueForInsertAfter(address, uint32) external view returns (uint256) {}\n\n  function canWithdraw(address, uint32, uint256) external returns (bool) {}\n\n  function operatorToMiddlewareTimes(address, uint256) external view returns (MiddlewareTimes memory) {}\n\n  function middlewareTimesLength(address) external view returns (uint256) {}\n\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address, uint32) external view returns (uint32) {}\n\n  function getMiddlewareTimesIndexServeUntilTimestamp(address, uint32) external view returns (uint32) {}\n\n  function operatorWhitelistedContractsLinkedListSize(address) external view returns (uint256) {}\n\n  function operatorWhitelistedContractsLinkedListEntry(address, address) external view returns (bool, uint256, uint256) {}\n\n  function whitelistedContractDetails(address, address) external view returns (MiddlewareDetails memory) {}\n}\n"
    },
    "contracts/core/StrategyManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../permissions/Pausable.sol';\nimport './StrategyManagerStorage.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\n\n/**\n * @title The primary entry- and exit-point for funds into and out of Pell.\n *\n * @notice This contract is for managing deposits in different strategies. The main\n * functionalities are:\n * - adding and removing strategies that any delegator can deposit into\n * - enabling deposit of assets into specified strategy(s)\n */\ncontract StrategyManager is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, Pausable, StrategyManagerStorage {\n  using SafeERC20 for IERC20;\n\n  // index for flag that pauses deposits when set\n  uint8 internal constant PAUSED_DEPOSITS = 0;\n\n  // chain id at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  modifier onlyStrategyWhitelister() {\n    require(msg.sender == strategyWhitelister, 'StrategyManager.onlyStrategyWhitelister: not the strategyWhitelister');\n    _;\n  }\n\n  modifier onlyStrategiesWhitelistedForDeposit(IStrategy strategy) {\n    require(strategyIsWhitelistedForDeposit[strategy], 'StrategyManager.onlyStrategiesWhitelistedForDeposit: strategy not whitelisted');\n    _;\n  }\n\n  modifier onlyDelegationManager() {\n    require(msg.sender == address(delegation), 'StrategyManager.onlyDelegationManager: not the DelegationManager');\n    _;\n  }\n\n  /**\n   * @param _delegation The delegation contract of Pell.\n   * @param _slasher The primary slashing contract of Pell.\n   */\n  constructor(IDelegationManager _delegation, ISlasher _slasher) StrategyManagerStorage(_delegation, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  // EXTERNAL FUNCTIONS\n\n  /**\n   * @notice Initializes the strategy manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set),\n   * and transfers contract ownership to the specified `initialOwner`.\n   * @param _pauserRegistry Used for access control of pausing.\n   * @param initialOwner Ownership of this contract is transferred to this address.\n   * @param initialStrategyWhitelister The initial value of `strategyWhitelister` to set.\n   * @param  initialPausedStatus The initial value of `_paused` to set.\n   */\n  function initialize(\n    address initialOwner,\n    address initialStrategyWhitelister,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus\n  ) external initializer {\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _transferOwnership(initialOwner);\n    _setStrategyWhitelister(initialStrategyWhitelister);\n  }\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n   */\n  function depositIntoStrategy(\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    shares = _depositIntoStrategy(msg.sender, strategy, token, amount);\n  }\n\n  /**\n   * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\n   * who must sign off on the action.\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n   * purely to help one address deposit 'for' another.\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @param staker the staker that the deposited assets will be credited to\n   * @param expiry the timestamp at which the signature expires\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n   * following EIP-1271 if the `staker` is a contract\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n   * targeting stakers who may be attempting to undelegate.\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\n   *\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\n   */\n  function depositIntoStrategyWithSignature(\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount,\n    address staker,\n    uint256 expiry,\n    bytes memory signature\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    require(!thirdPartyTransfersForbidden[strategy], 'StrategyManager.depositIntoStrategyWithSignature: third transfers disabled');\n    require(expiry >= block.timestamp, 'StrategyManager.depositIntoStrategyWithSignature: signature expired');\n    // calculate struct hash, then increment `staker`'s nonce\n    uint256 nonce = nonces[staker];\n    bytes32 structHash = keccak256(abi.encode(DEPOSIT_TYPEHASH, staker, strategy, token, amount, nonce, expiry));\n    unchecked {\n      nonces[staker] = nonce + 1;\n    }\n\n    // calculate the digest hash\n    bytes32 digestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), structHash));\n\n    /**\n     * check validity of signature:\n     * 1) if `staker` is an EOA, then `signature` must be a valid ECDSA signature from `staker`,\n     * indicating their intention for this action\n     * 2) if `staker` is a contract, then `signature` will be checked according to EIP-1271\n     */\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, digestHash, signature);\n\n    // deposit the tokens (from the `msg.sender`) and credit the new shares to the `staker`\n    shares = _depositIntoStrategy(staker, strategy, token, amount);\n  }\n\n  /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\n  function removeShares(address staker, IStrategy strategy, uint256 shares) external onlyDelegationManager {\n    _removeShares(staker, strategy, shares);\n  }\n\n  /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\n  function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external onlyDelegationManager {\n    _addShares(staker, token, strategy, shares);\n  }\n\n  /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\n  function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external onlyDelegationManager {\n    strategy.withdraw(recipient, token, shares);\n  }\n\n  /**\n   * If true for a strategy, a user cannot depositIntoStrategyWithSignature into that strategy for another staker\n   * and also when performing DelegationManager.queueWithdrawals, a staker can only withdraw to themselves.\n   * Defaulted to false for all existing strategies.\n   * @param strategy The strategy to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function setThirdPartyTransfersForbidden(IStrategy strategy, bool value) external onlyStrategyWhitelister {\n    _setThirdPartyTransfersForbidden(strategy, value);\n  }\n\n  /**\n   * @notice Owner-only function to change the `strategyWhitelister` address.\n   * @param newStrategyWhitelister new address for the `strategyWhitelister`.\n   */\n  function setStrategyWhitelister(address newStrategyWhitelister) external onlyOwner {\n    _setStrategyWhitelister(newStrategyWhitelister);\n  }\n\n  /**\n   * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\n   */\n  function addStrategiesToDepositWhitelist(\n    IStrategy[] calldata strategiesToWhitelist,\n    bool[] calldata thirdPartyTransfersForbiddenValues\n  ) external onlyStrategyWhitelister {\n    require(\n      strategiesToWhitelist.length == thirdPartyTransfersForbiddenValues.length,\n      'StrategyManager.addStrategiesToDepositWhitelist: array lengths do not match'\n    );\n    uint256 strategiesToWhitelistLength = strategiesToWhitelist.length;\n    for (uint256 i = 0; i < strategiesToWhitelistLength; ) {\n      // change storage and emit event only if strategy is not already in whitelist\n      if (!strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]) {\n        strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]] = true;\n        emit StrategyAddedToDepositWhitelist(strategiesToWhitelist[i]);\n        _setThirdPartyTransfersForbidden(strategiesToWhitelist[i], thirdPartyTransfersForbiddenValues[i]);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\n   */\n  function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external onlyStrategyWhitelister {\n    uint256 strategiesToRemoveFromWhitelistLength = strategiesToRemoveFromWhitelist.length;\n    for (uint256 i = 0; i < strategiesToRemoveFromWhitelistLength; ) {\n      // change storage and emit event only if strategy is already in whitelist\n      if (strategyIsWhitelistedForDeposit[strategiesToRemoveFromWhitelist[i]]) {\n        strategyIsWhitelistedForDeposit[strategiesToRemoveFromWhitelist[i]] = false;\n        emit StrategyRemovedFromDepositWhitelist(strategiesToRemoveFromWhitelist[i]);\n        // Set mapping value to default false value\n        _setThirdPartyTransfersForbidden(strategiesToRemoveFromWhitelist[i], false);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  // INTERNAL FUNCTIONS\n\n  /**\n   * @notice This function adds `shares` for a given `strategy` to the `staker` and runs through the necessary update logic.\n   * @param staker The address to add shares to\n   * @param token The token that is being deposited (used for indexing)\n   * @param strategy The Strategy in which the `staker` is receiving shares\n   * @param shares The amount of shares to grant to the `staker`\n   * @dev In particular, this function calls `delegation.increaseDelegatedShares(staker, strategy, shares)` to ensure that all\n   * delegated shares are tracked, increases the stored share amount in `stakerStrategyShares[staker][strategy]`, and adds `strategy`\n   * to the `staker`'s list of strategies, if it is not in the list already.\n   */\n  function _addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) internal {\n    // sanity checks on inputs\n    require(staker != address(0), 'StrategyManager._addShares: staker cannot be zero address');\n    require(shares != 0, 'StrategyManager._addShares: shares should not be zero!');\n\n    // if they dont have existing shares of this strategy, add it to their strats\n    if (stakerStrategyShares[staker][strategy] == 0) {\n      require(\n        stakerStrategyList[staker].length < MAX_STAKER_STRATEGY_LIST_LENGTH,\n        'StrategyManager._addShares: deposit would exceed MAX_STAKER_STRATEGY_LIST_LENGTH'\n      );\n      stakerStrategyList[staker].push(strategy);\n    }\n\n    // add the returned shares to their existing shares for this strategy\n    stakerStrategyShares[staker][strategy] += shares;\n\n    emit Deposit(staker, token, strategy, shares);\n  }\n\n  /**\n   * @notice Internal function in which `amount` of ERC20 `token` is transferred from `msg.sender` to the Strategy-type contract\n   * `strategy`, with the resulting shares credited to `staker`.\n   * @param staker The address that will be credited with the new shares.\n   * @param strategy The Strategy contract to deposit into.\n   * @param token The ERC20 token to deposit.\n   * @param amount The amount of `token` to deposit.\n   * @return shares The amount of *new* shares in `strategy` that have been credited to the `staker`.\n   */\n  function _depositIntoStrategy(\n    address staker,\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) internal onlyStrategiesWhitelistedForDeposit(strategy) returns (uint256 shares) {\n    // transfer tokens from the sender to the strategy\n    token.safeTransferFrom(msg.sender, address(strategy), amount);\n\n    // deposit the assets into the specified strategy and get the equivalent amount of shares in that strategy\n    shares = strategy.deposit(token, amount);\n\n    // add the returned shares to the staker's existing shares for this strategy\n    _addShares(staker, token, strategy, shares);\n\n    // Increase shares delegated to operator, if needed\n    delegation.increaseDelegatedShares(staker, strategy, shares);\n\n    return shares;\n  }\n\n  /**\n   * @notice Decreases the shares that `staker` holds in `strategy` by `shareAmount`.\n   * @param staker The address to decrement shares from\n   * @param strategy The strategy for which the `staker`'s shares are being decremented\n   * @param shareAmount The amount of shares to decrement\n   * @dev If the amount of shares represents all of the staker`s shares in said strategy,\n   * then the strategy is removed from stakerStrategyList[staker] and 'true' is returned. Otherwise 'false' is returned.\n   */\n  function _removeShares(address staker, IStrategy strategy, uint256 shareAmount) internal returns (bool) {\n    // sanity checks on inputs\n    require(shareAmount != 0, 'StrategyManager._removeShares: shareAmount should not be zero!');\n\n    //check that the user has sufficient shares\n    uint256 userShares = stakerStrategyShares[staker][strategy];\n\n    require(shareAmount <= userShares, 'StrategyManager._removeShares: shareAmount too high');\n    //unchecked arithmetic since we just checked this above\n    unchecked {\n      userShares = userShares - shareAmount;\n    }\n\n    // subtract the shares from the staker's existing shares for this strategy\n    stakerStrategyShares[staker][strategy] = userShares;\n\n    // if no existing shares, remove the strategy from the staker's dynamic array of strategies\n    if (userShares == 0) {\n      _removeStrategyFromStakerStrategyList(staker, strategy);\n\n      // return true in the event that the strategy was removed from stakerStrategyList[staker]\n      return true;\n    }\n    // return false in the event that the strategy was *not* removed from stakerStrategyList[staker]\n    return false;\n  }\n\n  /**\n   * @notice Removes `strategy` from `staker`'s dynamic array of strategies, i.e. from `stakerStrategyList[staker]`\n   * @param staker The user whose array will have an entry removed\n   * @param strategy The Strategy to remove from `stakerStrategyList[staker]`\n   */\n  function _removeStrategyFromStakerStrategyList(address staker, IStrategy strategy) internal {\n    //loop through all of the strategies, find the right one, then replace\n    uint256 stratsLength = stakerStrategyList[staker].length;\n    uint256 j = 0;\n    for (; j < stratsLength; ) {\n      if (stakerStrategyList[staker][j] == strategy) {\n        //replace the strategy with the last strategy in the list\n        stakerStrategyList[staker][j] = stakerStrategyList[staker][stakerStrategyList[staker].length - 1];\n        break;\n      }\n      unchecked {\n        ++j;\n      }\n    }\n    // if we didn't find the strategy, revert\n    require(j != stratsLength, 'StrategyManager._removeStrategyFromStakerStrategyList: strategy not found');\n    // pop off the last entry in the list of strategies\n    stakerStrategyList[staker].pop();\n  }\n\n  /**\n   * @notice Internal function for modifying `thirdPartyTransfersForbidden`.\n   * Used inside of the `setThirdPartyTransfersForbidden` and `addStrategiesToDepositWhitelist` functions.\n   * @param strategy The strategy to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function _setThirdPartyTransfersForbidden(IStrategy strategy, bool value) internal {\n    emit UpdatedThirdPartyTransfersForbidden(strategy, value);\n    thirdPartyTransfersForbidden[strategy] = value;\n  }\n\n  /**\n   * @notice Internal function for modifying the `strategyWhitelister`. Used inside of the `setStrategyWhitelister` and `initialize` functions.\n   * @param newStrategyWhitelister The new address for the `strategyWhitelister` to take.\n   */\n  function _setStrategyWhitelister(address newStrategyWhitelister) internal {\n    emit StrategyWhitelisterChanged(strategyWhitelister, newStrategyWhitelister);\n    strategyWhitelister = newStrategyWhitelister;\n  }\n\n  // VIEW FUNCTIONS\n  /**\n   * @notice Get all details on the staker's deposits and corresponding shares\n   * @param staker The staker of interest, whose deposits this function will fetch\n   * @return (staker's strategies, shares in these strategies)\n   */\n  function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory) {\n    uint256 strategiesLength = stakerStrategyList[staker].length;\n    uint256[] memory shares = new uint256[](strategiesLength);\n\n    for (uint256 i = 0; i < strategiesLength; ) {\n      shares[i] = stakerStrategyShares[staker][stakerStrategyList[staker][i]];\n      unchecked {\n        ++i;\n      }\n    }\n    return (stakerStrategyList[staker], shares);\n  }\n\n  /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\n  function stakerStrategyListLength(address staker) external view returns (uint256) {\n    return stakerStrategyList[staker].length;\n  }\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  // @notice Internal function for calculating the current domain separator of this contract\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('Pell')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/core/StrategyManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IStrategyManager.sol';\nimport '../interfaces/IStrategy.sol';\nimport '../interfaces/IDelegationManager.sol';\nimport '../interfaces/ISlasher.sol';\n\n/**\n * @title Storage variables for the `StrategyManager` contract.\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract StrategyManagerStorage is IStrategyManager {\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n  /// @notice The EIP-712 typehash for the deposit struct used by the contract\n  bytes32 public constant DEPOSIT_TYPEHASH =\n    keccak256('Deposit(address staker,address strategy,address token,uint256 amount,uint256 nonce,uint256 expiry)');\n  // maximum length of dynamic arrays in `stakerStrategyList` mapping, for sanity's sake\n  uint8 internal constant MAX_STAKER_STRATEGY_LIST_LENGTH = 32;\n\n  // system contracts\n  IDelegationManager public immutable delegation;\n  ISlasher public immutable slasher;\n\n  /**\n   * @notice Original EIP-712 Domain separator for this contract.\n   * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n   * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n   */\n  bytes32 internal _DOMAIN_SEPARATOR;\n  // staker => number of signed deposit nonce (used in depositIntoStrategyWithSignature)\n  mapping(address => uint256) public nonces;\n  /// @notice Permissioned role, which can be changed by the contract owner. Has the ability to edit the strategy whitelist\n  address public strategyWhitelister;\n  /// @notice Mapping: staker => Strategy => number of shares which they currently hold\n  mapping(address => mapping(IStrategy => uint256)) public stakerStrategyShares;\n  /// @notice Mapping: staker => array of strategies in which they have nonzero shares\n  mapping(address => IStrategy[]) public stakerStrategyList;\n  /// @notice Mapping: strategy => whether or not stakers are allowed to deposit into it\n  mapping(IStrategy => bool) public strategyIsWhitelistedForDeposit;\n\n  /**\n   * @notice Mapping: strategy => whether or not stakers are allowed to transfer strategy shares to another address\n   * if true for a strategy, a user cannot depositIntoStrategyWithSignature into that strategy for another staker\n   * and also when performing queueWithdrawals, a staker can only withdraw to themselves\n   */\n  mapping(IStrategy => bool) public thirdPartyTransfersForbidden;\n\n  constructor(IDelegationManager _delegation, ISlasher _slasher) {\n    delegation = _delegation;\n    slasher = _slasher;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/core/StrategyManagerV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../permissions/Pausable.sol';\nimport './StrategyManagerStorage.sol';\nimport '../libraries/EIP1271SignatureUtils.sol';\nimport '../interfaces/IStrategyManagerV2.sol';\n\n/**\n * @title The primary entry- and exit-point for funds into and out of Pell.\n *\n * @notice This contract is for managing deposits in different strategies. The main\n * functionalities are:\n * - adding and removing strategies that any delegator can deposit into\n * - enabling deposit of assets into specified strategy(s)\n */\ncontract StrategyManagerV2 is\n  Initializable,\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  Pausable,\n  StrategyManagerStorage,\n  IStrategyManagerV2\n{\n  using SafeERC20 for IERC20;\n\n  // index for flag that pauses deposits when set\n  uint8 internal constant PAUSED_DEPOSITS = 0;\n\n  // chain id at the time of contract deployment\n  uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n  modifier onlyStrategyWhitelister() {\n    require(msg.sender == strategyWhitelister, 'StrategyManager.onlyStrategyWhitelister: not the strategyWhitelister');\n    _;\n  }\n\n  modifier onlyStrategiesWhitelistedForDeposit(IStrategy strategy) {\n    require(strategyIsWhitelistedForDeposit[strategy], 'StrategyManager.onlyStrategiesWhitelistedForDeposit: strategy not whitelisted');\n    _;\n  }\n\n  modifier onlyDelegationManager() {\n    require(msg.sender == address(delegation), 'StrategyManager.onlyDelegationManager: not the DelegationManager');\n    _;\n  }\n\n  /**\n   * @param _delegation The delegation contract of Pell.\n   * @param _slasher The primary slashing contract of Pell.\n   */\n  constructor(IDelegationManager _delegation, ISlasher _slasher) StrategyManagerStorage(_delegation, _slasher) {\n    _disableInitializers();\n    ORIGINAL_CHAIN_ID = block.chainid;\n  }\n\n  // EXTERNAL FUNCTIONS\n\n  /**\n   * @notice Initializes the strategy manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set),\n   * and transfers contract ownership to the specified `initialOwner`.\n   * @param _pauserRegistry Used for access control of pausing.\n   * @param initialOwner Ownership of this contract is transferred to this address.\n   * @param initialStrategyWhitelister The initial value of `strategyWhitelister` to set.\n   * @param  initialPausedStatus The initial value of `_paused` to set.\n   */\n  function initialize(\n    address initialOwner,\n    address initialStrategyWhitelister,\n    IPauserRegistry _pauserRegistry,\n    uint256 initialPausedStatus\n  ) external initializer {\n    _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n    __ReentrancyGuard_init();\n    _initializePauser(_pauserRegistry, initialPausedStatus);\n    _transferOwnership(initialOwner);\n    _setStrategyWhitelister(initialStrategyWhitelister);\n  }\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n   */\n  function depositIntoStrategy(\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    shares = _depositIntoStrategy(msg.sender, strategy, token, amount);\n  }\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `staker`\n   * @param staker Staker address\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n   */\n  function depositIntoStrategyWithStaker(\n    address staker,\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    if (staker != msg.sender) {\n      require(!thirdPartyTransfersForbidden[strategy], 'StrategyManager.depositIntoStrategyWithStaker: third transfers disabled');\n    }\n    shares = _depositIntoStrategy(staker, strategy, token, amount);\n  }\n\n  /**\n   * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\n   * who must sign off on the action.\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n   * purely to help one address deposit 'for' another.\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @param staker the staker that the deposited assets will be credited to\n   * @param expiry the timestamp at which the signature expires\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n   * following EIP-1271 if the `staker` is a contract\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n   * targeting stakers who may be attempting to undelegate.\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\n   *\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\n   */\n  function depositIntoStrategyWithSignature(\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount,\n    address staker,\n    uint256 expiry,\n    bytes memory signature\n  ) external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares) {\n    require(!thirdPartyTransfersForbidden[strategy], 'StrategyManager.depositIntoStrategyWithSignature: third transfers disabled');\n    require(expiry >= block.timestamp, 'StrategyManager.depositIntoStrategyWithSignature: signature expired');\n    // calculate struct hash, then increment `staker`'s nonce\n    uint256 nonce = nonces[staker];\n    bytes32 structHash = keccak256(abi.encode(DEPOSIT_TYPEHASH, staker, strategy, token, amount, nonce, expiry));\n    unchecked {\n      nonces[staker] = nonce + 1;\n    }\n\n    // calculate the digest hash\n    bytes32 digestHash = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator(), structHash));\n\n    /**\n     * check validity of signature:\n     * 1) if `staker` is an EOA, then `signature` must be a valid ECDSA signature from `staker`,\n     * indicating their intention for this action\n     * 2) if `staker` is a contract, then `signature` will be checked according to EIP-1271\n     */\n    EIP1271SignatureUtils.checkSignature_EIP1271(staker, digestHash, signature);\n\n    // deposit the tokens (from the `msg.sender`) and credit the new shares to the `staker`\n    shares = _depositIntoStrategy(staker, strategy, token, amount);\n  }\n\n  /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\n  function removeShares(address staker, IStrategy strategy, uint256 shares) external onlyDelegationManager {\n    _removeShares(staker, strategy, shares);\n  }\n\n  /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\n  function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external onlyDelegationManager {\n    _addShares(staker, token, strategy, shares);\n  }\n\n  /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\n  function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external onlyDelegationManager {\n    strategy.withdraw(recipient, token, shares);\n  }\n\n  /**\n   * If true for a strategy, a user cannot depositIntoStrategyWithSignature into that strategy for another staker\n   * and also when performing DelegationManager.queueWithdrawals, a staker can only withdraw to themselves.\n   * Defaulted to false for all existing strategies.\n   * @param strategy The strategy to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function setThirdPartyTransfersForbidden(IStrategy strategy, bool value) external onlyStrategyWhitelister {\n    _setThirdPartyTransfersForbidden(strategy, value);\n  }\n\n  /**\n   * @notice Owner-only function to change the `strategyWhitelister` address.\n   * @param newStrategyWhitelister new address for the `strategyWhitelister`.\n   */\n  function setStrategyWhitelister(address newStrategyWhitelister) external onlyOwner {\n    _setStrategyWhitelister(newStrategyWhitelister);\n  }\n\n  /**\n   * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\n   */\n  function addStrategiesToDepositWhitelist(\n    IStrategy[] calldata strategiesToWhitelist,\n    bool[] calldata thirdPartyTransfersForbiddenValues\n  ) external onlyStrategyWhitelister {\n    require(\n      strategiesToWhitelist.length == thirdPartyTransfersForbiddenValues.length,\n      'StrategyManager.addStrategiesToDepositWhitelist: array lengths do not match'\n    );\n    uint256 strategiesToWhitelistLength = strategiesToWhitelist.length;\n    for (uint256 i = 0; i < strategiesToWhitelistLength; ) {\n      // change storage and emit event only if strategy is not already in whitelist\n      if (!strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]) {\n        strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]] = true;\n        emit StrategyAddedToDepositWhitelist(strategiesToWhitelist[i]);\n        _setThirdPartyTransfersForbidden(strategiesToWhitelist[i], thirdPartyTransfersForbiddenValues[i]);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\n   */\n  function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external onlyStrategyWhitelister {\n    uint256 strategiesToRemoveFromWhitelistLength = strategiesToRemoveFromWhitelist.length;\n    for (uint256 i = 0; i < strategiesToRemoveFromWhitelistLength; ) {\n      // change storage and emit event only if strategy is already in whitelist\n      if (strategyIsWhitelistedForDeposit[strategiesToRemoveFromWhitelist[i]]) {\n        strategyIsWhitelistedForDeposit[strategiesToRemoveFromWhitelist[i]] = false;\n        emit StrategyRemovedFromDepositWhitelist(strategiesToRemoveFromWhitelist[i]);\n        // Set mapping value to default false value\n        _setThirdPartyTransfersForbidden(strategiesToRemoveFromWhitelist[i], false);\n      }\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  // INTERNAL FUNCTIONS\n\n  /**\n   * @notice This function adds `shares` for a given `strategy` to the `staker` and runs through the necessary update logic.\n   * @param staker The address to add shares to\n   * @param token The token that is being deposited (used for indexing)\n   * @param strategy The Strategy in which the `staker` is receiving shares\n   * @param shares The amount of shares to grant to the `staker`\n   * @dev In particular, this function calls `delegation.increaseDelegatedShares(staker, strategy, shares)` to ensure that all\n   * delegated shares are tracked, increases the stored share amount in `stakerStrategyShares[staker][strategy]`, and adds `strategy`\n   * to the `staker`'s list of strategies, if it is not in the list already.\n   */\n  function _addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) internal {\n    // sanity checks on inputs\n    require(staker != address(0), 'StrategyManager._addShares: staker cannot be zero address');\n    require(shares != 0, 'StrategyManager._addShares: shares should not be zero!');\n\n    // if they dont have existing shares of this strategy, add it to their strats\n    if (stakerStrategyShares[staker][strategy] == 0) {\n      require(\n        stakerStrategyList[staker].length < MAX_STAKER_STRATEGY_LIST_LENGTH,\n        'StrategyManager._addShares: deposit would exceed MAX_STAKER_STRATEGY_LIST_LENGTH'\n      );\n      stakerStrategyList[staker].push(strategy);\n    }\n\n    // add the returned shares to their existing shares for this strategy\n    stakerStrategyShares[staker][strategy] += shares;\n\n    emit Deposit(staker, token, strategy, shares);\n  }\n\n  /**\n   * @notice Internal function in which `amount` of ERC20 `token` is transferred from `msg.sender` to the Strategy-type contract\n   * `strategy`, with the resulting shares credited to `staker`.\n   * @param staker The address that will be credited with the new shares.\n   * @param strategy The Strategy contract to deposit into.\n   * @param token The ERC20 token to deposit.\n   * @param amount The amount of `token` to deposit.\n   * @return shares The amount of *new* shares in `strategy` that have been credited to the `staker`.\n   */\n  function _depositIntoStrategy(\n    address staker,\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) internal onlyStrategiesWhitelistedForDeposit(strategy) returns (uint256 shares) {\n    // transfer tokens from the sender to the strategy\n    token.safeTransferFrom(msg.sender, address(strategy), amount);\n\n    // deposit the assets into the specified strategy and get the equivalent amount of shares in that strategy\n    shares = strategy.deposit(token, amount);\n\n    // add the returned shares to the staker's existing shares for this strategy\n    _addShares(staker, token, strategy, shares);\n\n    // Increase shares delegated to operator, if needed\n    delegation.increaseDelegatedShares(staker, strategy, shares);\n\n    return shares;\n  }\n\n  /**\n   * @notice Decreases the shares that `staker` holds in `strategy` by `shareAmount`.\n   * @param staker The address to decrement shares from\n   * @param strategy The strategy for which the `staker`'s shares are being decremented\n   * @param shareAmount The amount of shares to decrement\n   * @dev If the amount of shares represents all of the staker`s shares in said strategy,\n   * then the strategy is removed from stakerStrategyList[staker] and 'true' is returned. Otherwise 'false' is returned.\n   */\n  function _removeShares(address staker, IStrategy strategy, uint256 shareAmount) internal returns (bool) {\n    // sanity checks on inputs\n    require(shareAmount != 0, 'StrategyManager._removeShares: shareAmount should not be zero!');\n\n    //check that the user has sufficient shares\n    uint256 userShares = stakerStrategyShares[staker][strategy];\n\n    require(shareAmount <= userShares, 'StrategyManager._removeShares: shareAmount too high');\n    //unchecked arithmetic since we just checked this above\n    unchecked {\n      userShares = userShares - shareAmount;\n    }\n\n    // subtract the shares from the staker's existing shares for this strategy\n    stakerStrategyShares[staker][strategy] = userShares;\n\n    // if no existing shares, remove the strategy from the staker's dynamic array of strategies\n    if (userShares == 0) {\n      _removeStrategyFromStakerStrategyList(staker, strategy);\n\n      // return true in the event that the strategy was removed from stakerStrategyList[staker]\n      return true;\n    }\n    // return false in the event that the strategy was *not* removed from stakerStrategyList[staker]\n    return false;\n  }\n\n  /**\n   * @notice Removes `strategy` from `staker`'s dynamic array of strategies, i.e. from `stakerStrategyList[staker]`\n   * @param staker The user whose array will have an entry removed\n   * @param strategy The Strategy to remove from `stakerStrategyList[staker]`\n   */\n  function _removeStrategyFromStakerStrategyList(address staker, IStrategy strategy) internal {\n    //loop through all of the strategies, find the right one, then replace\n    uint256 stratsLength = stakerStrategyList[staker].length;\n    uint256 j = 0;\n    for (; j < stratsLength; ) {\n      if (stakerStrategyList[staker][j] == strategy) {\n        //replace the strategy with the last strategy in the list\n        stakerStrategyList[staker][j] = stakerStrategyList[staker][stakerStrategyList[staker].length - 1];\n        break;\n      }\n      unchecked {\n        ++j;\n      }\n    }\n    // if we didn't find the strategy, revert\n    require(j != stratsLength, 'StrategyManager._removeStrategyFromStakerStrategyList: strategy not found');\n    // pop off the last entry in the list of strategies\n    stakerStrategyList[staker].pop();\n  }\n\n  /**\n   * @notice Internal function for modifying `thirdPartyTransfersForbidden`.\n   * Used inside of the `setThirdPartyTransfersForbidden` and `addStrategiesToDepositWhitelist` functions.\n   * @param strategy The strategy to set `thirdPartyTransfersForbidden` value to\n   * @param value bool value to set `thirdPartyTransfersForbidden` to\n   */\n  function _setThirdPartyTransfersForbidden(IStrategy strategy, bool value) internal {\n    emit UpdatedThirdPartyTransfersForbidden(strategy, value);\n    thirdPartyTransfersForbidden[strategy] = value;\n  }\n\n  /**\n   * @notice Internal function for modifying the `strategyWhitelister`. Used inside of the `setStrategyWhitelister` and `initialize` functions.\n   * @param newStrategyWhitelister The new address for the `strategyWhitelister` to take.\n   */\n  function _setStrategyWhitelister(address newStrategyWhitelister) internal {\n    emit StrategyWhitelisterChanged(strategyWhitelister, newStrategyWhitelister);\n    strategyWhitelister = newStrategyWhitelister;\n  }\n\n  // VIEW FUNCTIONS\n  /**\n   * @notice Get all details on the staker's deposits and corresponding shares\n   * @param staker The staker of interest, whose deposits this function will fetch\n   * @return (staker's strategies, shares in these strategies)\n   */\n  function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory) {\n    uint256 strategiesLength = stakerStrategyList[staker].length;\n    uint256[] memory shares = new uint256[](strategiesLength);\n\n    for (uint256 i = 0; i < strategiesLength; ) {\n      shares[i] = stakerStrategyShares[staker][stakerStrategyList[staker][i]];\n      unchecked {\n        ++i;\n      }\n    }\n    return (stakerStrategyList[staker], shares);\n  }\n\n  /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\n  function stakerStrategyListLength(address staker) external view returns (uint256) {\n    return stakerStrategyList[staker].length;\n  }\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   */\n  function domainSeparator() public view returns (bytes32) {\n    if (block.chainid == ORIGINAL_CHAIN_ID) {\n      return _DOMAIN_SEPARATOR;\n    } else {\n      return _calculateDomainSeparator();\n    }\n  }\n\n  // @notice Internal function for calculating the current domain separator of this contract\n  function _calculateDomainSeparator() internal view returns (bytes32) {\n    return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('Pell')), block.chainid, address(this)));\n  }\n}\n"
    },
    "contracts/interfaces/IDelegationManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IStrategy.sol';\nimport './ISignatureUtils.sol';\nimport './IStrategyManager.sol';\n\n/**\n * @title DelegationManager\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\n * - enabling anyone to register as an operator in Pell\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ninterface IDelegationManager is ISignatureUtils {\n  // @notice Struct used for storing information about a single operator who has registered with Pell\n  struct OperatorDetails {\n    // @notice address to receive the rewards that the operator earns via serving applications built on Pell.\n    address earningsReceiver;\n    /**\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n     * @dev Signature verification follows these rules:\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n     */\n    address delegationApprover;\n    /**\n     * @notice A minimum delay -- enforced between:\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\n     * and\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\n     * then they are only allowed to either increase this value or keep it the same.\n     */\n    uint32 stakerOptOutWindow;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\n   */\n  struct StakerDelegation {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the staker's nonce\n    uint256 nonce;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n   */\n  struct DelegationApproval {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the operator's provided salt\n    bytes32 salt;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\n   * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\n   */\n  struct Withdrawal {\n    // The address that originated the Withdrawal\n    address staker;\n    // The address that the staker was delegated to at the time that the Withdrawal was created\n    address delegatedTo;\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\n    address withdrawer;\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\n    uint256 nonce;\n    // Block timestamp when the Withdrawal was created\n    uint32 startTimestamp;\n    // Array of strategies that the Withdrawal contains\n    IStrategy[] strategies;\n    // Array containing the amount of shares in each Strategy in the `strategies` array\n    uint256[] shares;\n  }\n\n  struct QueuedWithdrawalParams {\n    // Array of strategies that the QueuedWithdrawal contains\n    IStrategy[] strategies;\n    // Array containing the amount of shares in each Strategy in the `strategies` array\n    uint256[] shares;\n    // The address of the withdrawer\n    address withdrawer;\n  }\n\n  // @notice Emitted when a new operator registers in Pell and provides their OperatorDetails.\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\n\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\n\n  /**\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n   */\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n  /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\n  event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n  /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\n  event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n  /// @notice Emitted when @param staker delegates to @param operator.\n  event StakerDelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker undelegates from @param operator.\n  event StakerUndelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n  /**\n   * @notice Emitted when a new withdrawal is queued.\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\n   * @param withdrawal Is the withdrawal itself.\n   */\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\n\n  /// @notice Emitted when a queued withdrawal is completed\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\n\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\n\n  /// @notice Emitted when the `strategyWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event StrategyWithdrawalDelaySet(IStrategy strategy, uint256 previousValue, uint256 newValue);\n\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\n\n  /**\n   * @notice Registers the caller as an operator in Pell.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in Pell.\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   */\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\n\n  /**\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n   * @param metadataURI The URI for metadata associated with an operator\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external;\n\n  /**\n   * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of DelegationManager\n   * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\n   * @param staker The account to be undelegated.\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n   *\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n   * @dev Reverts if the `staker` is already undelegated.\n   */\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams) external returns (bytes32[] memory);\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other strategies, which will be transferred to the withdrawer.\n   */\n  function completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external;\n\n  /**\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\n   */\n  function completeQueuedWithdrawals(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external;\n\n  /**\n   * @notice Increases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n  /**\n   * @notice returns the address of the operator that `staker` is delegated to.\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  function delegatedTo(address staker) external view returns (address);\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\n\n  /*\n   * @notice Returns the earnings receiver address for an operator\n   */\n  function earningsReceiver(address operator) external view returns (address);\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address);\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256);\n\n  /**\n   * @notice Given array of strategies, returns array of shares for the operator\n   */\n  function getOperatorShares(address operator, IStrategy[] memory strategies) external view returns (uint256[] memory);\n\n  /**\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param strategies The strategies to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\n\n  /**\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n   * @dev By design, the following invariant should hold for each Strategy:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) external view returns (bool);\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) external view returns (bool);\n\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\n  function stakerNonce(address staker) external view returns (uint256);\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n  /**\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\n   * to withdraw a strategy is MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\n   */\n  function minWithdrawalDelay() external view returns (uint256);\n\n  /**\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  function strategyWithdrawalDelay(IStrategy strategy) external view returns (uint256);\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() external view returns (bytes32);\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IDelegationManagerV3.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IStrategy.sol';\nimport './ISignatureUtils.sol';\nimport './IStrategyManager.sol';\nimport './ITSSManager.sol';\n\n/**\n * @title DelegationManager\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\n * - enabling anyone to register as an operator in Pell\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ninterface IDelegationManagerV3 is ISignatureUtils {\n  // @notice Struct used for storing information about a single operator who has registered with Pell\n  struct OperatorDetails {\n    // @notice DEPRECATED address to receive the rewards that the operator earns via serving applications built on Pell.\n    address __deprecated_earningsReceiver;\n    /**\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n     * @dev Signature verification follows these rules:\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n     */\n    address delegationApprover;\n    /**\n     * @notice A minimum delay -- enforced between:\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\n     * and\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\n     * then they are only allowed to either increase this value or keep it the same.\n     */\n    uint32 stakerOptOutWindow;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\n   */\n  struct StakerDelegation {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the staker's nonce\n    uint256 nonce;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n   */\n  struct DelegationApproval {\n    // the staker who is delegating\n    address staker;\n    // the operator being delegated to\n    address operator;\n    // the operator's provided salt\n    bytes32 salt;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  /**\n   * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\n   * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\n   */\n  struct Withdrawal {\n    // The address that originated the Withdrawal\n    address staker;\n    // The address that the staker was delegated to at the time that the Withdrawal was created\n    address delegatedTo;\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\n    address withdrawer;\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\n    uint256 nonce;\n    // Block timestamp when the Withdrawal was created\n    uint32 startTimestamp;\n    // Array of strategies that the Withdrawal contains\n    IStrategy[] strategies;\n    // Array containing the amount of shares in each Strategy in the `strategies` array\n    uint256[] shares;\n  }\n\n  struct QueuedWithdrawalParams {\n    // Array of strategies that the QueuedWithdrawal contains\n    IStrategy[] strategies;\n    // Array containing the amount of shares in each Strategy in the `strategies` array\n    uint256[] shares;\n    // The address of the withdrawer\n    address withdrawer;\n  }\n\n  // @notice Emitted when a new operator registers in Pell and provides their OperatorDetails.\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\n\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\n\n  /**\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n   */\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n  /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\n  event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n  /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\n  event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n  /// @notice Emitted when @param staker delegates to @param operator.\n  event StakerDelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker undelegates from @param operator.\n  event StakerUndelegated(address indexed staker, address indexed operator);\n\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n  /**\n   * @notice Emitted when a new withdrawal is queued.\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\n   * @param withdrawal Is the withdrawal itself.\n   */\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\n\n  /// @notice Emitted when a queued withdrawal is completed\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\n\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\n\n  /// @notice Emitted when the `strategyWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\n  event StrategyWithdrawalDelaySet(IStrategy strategy, uint256 previousValue, uint256 newValue);\n\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\n\n  event UpdateTSSManager(ITSSManager previousTSSManager, ITSSManager currentTSSManager);\n\n  /**\n   * @notice Registers the caller as an operator in Pell.\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n   *\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n   */\n  function syncRegisterAsOperator(\n    address operator,\n    OperatorDetails calldata registeringOperatorDetails,\n    string calldata metadataURI\n  ) external;\n\n  /**\n   * @notice Updates an operator's stored `OperatorDetails`.\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n   *\n   * @dev The caller must have previously registered as an operator in Pell.\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\n   */\n  function syncModifyOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) external;\n\n  /**\n   * @notice Caller delegates their stake to an operator.\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n   * @param approverSalt A unique single use value tied to an individual signature.\n   * @dev The approverSignatureAndExpiry is used in the event that:\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\n   *                  AND\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\n\n  /**\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n   * @param staker The account delegating stake to an `operator` account\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n   *\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n   * is the `msg.sender`, then approval is assumed.\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n   * in this case to save on complexity + gas costs\n   */\n  function delegateToBySignature(\n    address staker,\n    address operator,\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\n    SignatureWithExpiry memory approverSignatureAndExpiry,\n    bytes32 approverSalt\n  ) external;\n\n  /**\n   * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of the DelegationManager\n   * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\n   * @param staker The account to be undelegated.\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n   *\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n   * @dev Reverts if the `staker` is already undelegated.\n   */\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\n\n  /**\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n   * their operator.\n   *\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n   */\n  function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams) external returns (bytes32[] memory);\n\n  /**\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n   * @param withdrawal The Withdrawal to complete.\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n   * will simply be transferred to the caller directly.\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n   * any other strategies, which will be transferred to the withdrawer.\n   */\n  function completeQueuedWithdrawal(\n    Withdrawal calldata withdrawal,\n    IERC20[] calldata tokens,\n    uint256 middlewareTimesIndex,\n    bool receiveAsTokens\n  ) external;\n\n  /**\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n   * @param withdrawals The Withdrawals to complete.\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\n   */\n  function completeQueuedWithdrawals(\n    Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexes,\n    bool[] calldata receiveAsTokens\n  ) external;\n\n  /**\n   * @notice Increases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to increase the delegated shares.\n   * @param shares The number of shares to increase.\n   *\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n  /**\n   * @notice Decreases a staker's delegated share balance in a strategy.\n   * @param staker The address to increase the delegated shares for their operator.\n   * @param strategy The strategy in which to decrease the delegated shares.\n   * @param shares The number of shares to decrease.\n   *\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n   * @dev Callable only by the StrategyManager.\n   */\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n  /**\n   * @notice returns the address of the operator that `staker` is delegated to.\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n   */\n  function delegatedTo(address staker) external view returns (address);\n\n  /**\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\n   */\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\n\n  /**\n   * @notice Returns the delegationApprover account for an operator\n   */\n  function delegationApprover(address operator) external view returns (address);\n\n  /**\n   * @notice Returns the stakerOptOutWindow for an operator\n   */\n  function stakerOptOutWindow(address operator) external view returns (uint256);\n\n  /**\n   * @notice Given array of strategies, returns array of shares for the operator\n   */\n  function getOperatorShares(address operator, IStrategy[] memory strategies) external view returns (uint256[] memory);\n\n  /**\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\n   * @param strategies The strategies to check withdrawal delays for\n   */\n  function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\n\n  /**\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n   * @dev By design, the following invariant should hold for each Strategy:\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n   * = sum (delegateable shares of all stakers delegated to the operator)\n   */\n  function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\n\n  /**\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n   */\n  function isDelegated(address staker) external view returns (bool);\n\n  /**\n   * @notice Returns true is an operator has previously registered for delegation.\n   */\n  function isOperator(address operator) external view returns (bool);\n\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\n  function stakerNonce(address staker) external view returns (uint256);\n\n  /**\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n   */\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n  /**\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\n   * to withdraw a strategy is MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\n   */\n  function minWithdrawalDelay() external view returns (uint256);\n\n  /**\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\n   */\n  function strategyWithdrawalDelay(IStrategy strategy) external view returns (uint256);\n\n  /**\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n   * @param staker The signing staker\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n   * @param staker The signing staker\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n   * @param operator The operator who is being delegated to\n   * @param expiry The desired expiry time of the staker's signature\n   */\n  function calculateStakerDelegationDigestHash(\n    address staker,\n    uint256 _stakerNonce,\n    address operator,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /**\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n   * @param staker The account delegating their stake\n   * @param operator The account receiving delegated stake\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n   * @param approverSalt A unique and single use value associated with the approver signature.\n   * @param expiry Time after which the approver's signature becomes invalid\n   */\n  function calculateDelegationApprovalDigestHash(\n    address staker,\n    address operator,\n    address _delegationApprover,\n    bytes32 approverSalt,\n    uint256 expiry\n  ) external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\n\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n\n  /**\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\n   *\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n   * for more detailed information please read EIP-712.\n   */\n  function domainSeparator() external view returns (bytes32);\n\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\n\n  /// @notice Returns the keccak256 hash of `withdrawal`.\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IIOTXStaking.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\n\npragma solidity 0.8.20;\n\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\n\ninterface IIOTXStaking is IERC721Receiver {\n  function exchangeRatio() external returns (uint256 ratio);\n  function currentReserve() external view returns (uint256);\n  function redeemAmountBase() external returns (uint256);\n  function getRedeemedTokenIdSlice(uint256 i, uint256 j) external view returns (uint256[] memory tokenIds);\n  function getStakedTokenCount(uint256 tokenQueueIndex) external view returns (uint256 count);\n  function setGlobalDelegate(address delegate) external;\n  function updateDelegates(uint256[] calldata tokenIds, address delegate) external;\n  function deposit(uint256 deadline) external payable returns (uint256 minted);\n  function stake() external;\n  function redeem(uint256 iotxsToRedeem, uint256 deadline) external returns (uint256 burned);\n  function updateReward() external;\n  function withdrawManagerFee(uint256 amount, address recipient) external;\n}\n"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IPauserRegistry.sol';\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\n\ninterface IPausable {\n  /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\n  event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\n\n  /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\n  event Paused(address indexed account, uint256 newPausedStatus);\n\n  /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\n  event Unpaused(address indexed account, uint256 newPausedStatus);\n\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n  function pauserRegistry() external view returns (IPauserRegistry);\n\n  /**\n   * @notice This function is used to pause an Pell contract's functionality.\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n   */\n  function pause(uint256 newPausedStatus) external;\n\n  /**\n   * @notice Alias for `pause(type(uint256).max)`.\n   */\n  function pauseAll() external;\n\n  /**\n   * @notice This function is used to unpause an Pell contract's functionality.\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n   */\n  function unpause(uint256 newPausedStatus) external;\n\n  /// @notice Returns the current paused status as a uint256.\n  function paused() external view returns (uint256);\n\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n  function paused(uint8 index) external view returns (bool);\n\n  /// @notice Allows the unpauser to set a new pauser registry\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\n}\n"
    },
    "contracts/interfaces/IPauserRegistry.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title Interface for the `PauserRegistry` contract.\n */\ninterface IPauserRegistry {\n  event PauserStatusChanged(address pauser, bool canPause);\n\n  event UnpauserChanged(address previousUnpauser, address newUnpauser);\n\n  /// @notice Mapping of addresses to whether they hold the pauser role.\n  function isPauser(address pauser) external view returns (bool);\n\n  /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\n  function unpauser() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title IPool\n */\ninterface IPool {\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62: siloed borrowing enabled\n    //bit 63: flashloaning enabled\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n  /**\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to The address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   */\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n  /**\n   * @notice Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state and configuration data of the reserve\n   */\n  function getReserveData(address asset) external view returns (ReserveData memory);\n}\n"
    },
    "contracts/interfaces/ISignatureUtils.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\n/**\n * @title The interface for common signature utilities.\n */\ninterface ISignatureUtils {\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\n  struct SignatureWithExpiry {\n    // the signature itself, formatted as a single bytes object\n    bytes signature;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\n  struct SignatureWithSaltAndExpiry {\n    // the signature itself, formatted as a single bytes object\n    bytes signature;\n    // the salt used to generate the signature\n    bytes32 salt;\n    // the expiration timestamp (UTC) of the signature\n    uint256 expiry;\n  }\n}\n"
    },
    "contracts/interfaces/ISlasher.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IStrategyManager.sol';\nimport './IDelegationManager.sol';\n\n/**\n * @title Interface for the primary 'slashing' contract for Pell.\n * @notice See the `Slasher` contract itself for implementation details.\n */\ninterface ISlasher {\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\n  struct MiddlewareTimes {\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\n    uint32 stalestUpdateTimestamp;\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\n    uint32 latestServeUntilTimestamp;\n  }\n\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\n  struct MiddlewareDetails {\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\n    uint32 registrationMayBeginAtTimestamp;\n    // the timestamp before which the contract is allowed to slash the user\n    uint32 contractCanSlashOperatorUntilTimestamp;\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\n    uint32 latestUpdateTimestamp;\n  }\n\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\n\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\n\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\n\n  /**\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\n   */\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\n\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within Pell.\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\n\n  /**\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\n   * @dev Typically, this function must be called prior to registering for a middleware.\n   */\n  function optIntoSlashing(address contractAddress) external;\n\n  /**\n   * @notice Used for 'slashing' a certain operator.\n   * @param toBeFrozen The operator to be frozen.\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\n   */\n  function freezeOperator(address toBeFrozen) external;\n\n  /**\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\n   * @dev Callable only by the contract owner (i.e. governance).\n   */\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\n\n  /**\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\n   *         is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\n   * @dev adds the middleware's slashing contract to the operator's linked list\n   */\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\n\n  /**\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\n   *      but it is anticipated to be rare and not detrimental.\n   */\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\n\n  /**\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\n   *         is slashable until serveUntil\n   * @param operator the operator whose stake update is being recorded\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\n   * slash `operator` once `serveUntil` is reached\n   */\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\n\n  /// @notice The StrategyManager contract of Pell\n  function strategyManager() external view returns (IStrategyManager);\n\n  /// @notice The DelegationManager contract of Pell\n  function delegation() external view returns (IDelegationManager);\n\n  /**\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\n   * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\n   * and the staker's status is reset (to 'unfrozen').\n   * @param staker The staker of interest.\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\n   */\n  function isFrozen(address staker) external view returns (bool);\n\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\n\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\n\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\n\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\n\n  /**\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\n   */\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\n\n  /**\n   * operator =>\n   *  [\n   *      (\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\n   *          latest time that the stake bonded at that update needed to serve until\n   *      )\n   *  ]\n   */\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\n  function middlewareTimesLength(address operator) external view returns (uint256);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\n\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\n\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\n\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IStakedBBTC.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface IStakedBBTC {\n  function lockOfInLocker(address account, address locker) external view returns (uint256);\n\n  function lockOf(address account) external view returns (uint256);\n\n  function lock(address account, uint256 amount) external;\n\n  function unlock(address account, uint256 amount) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n  function getReward() external;\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * @title Minimal interface for an `Strategy` contract.\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\n */\ninterface IStrategy {\n  /**\n   * @notice Used to deposit tokens into this Strategy\n   * @param token is the ERC20 token being deposited\n   * @param amount is the amount of token being deposited\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n   * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n   * @return newShares is the number of new shares issued at the current exchange ratio.\n   */\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\n\n  /**\n   * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n   * @param recipient is the address to receive the withdrawn funds\n   * @param token is the ERC20 token being transferred out\n   * @param amountShares is the amount of shares being withdrawn\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n   * other functions, and individual share balances are recorded in the strategyManager as well.\n   */\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\n   */\n  function userUnderlying(address user) external returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current total shares of `user` in this strategy, by\n   * querying the `strategyManager` contract\n   */\n  function shares(address user) external view returns (uint256);\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\n   */\n  function userUnderlyingView(address user) external view returns (uint256);\n\n  /// @notice The underlying token for shares in this Strategy\n  function underlyingToken() external view returns (IERC20);\n\n  /// @notice The total number of extant shares in this Strategy\n  function totalShares() external view returns (uint256);\n\n  /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\n  function explanation() external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IStrategy.sol';\nimport './ISlasher.sol';\nimport './IDelegationManager.sol';\n\n/**\n * @title Interface for the primary entrypoint for funds into Pell.\n * @notice See the `StrategyManager` contract itself for implementation details.\n */\ninterface IStrategyManager {\n  /**\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\n   * @param staker Is the staker who is depositing funds into Pell.\n   * @param strategy Is the strategy that `staker` has deposited into.\n   * @param token Is the token that `staker` deposited.\n   * @param shares Is the number of new shares `staker` has been granted in `strategy`.\n   */\n  event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\n\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\n  event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\n\n  /// @notice Emitted when the `strategyWhitelister` is changed\n  event StrategyWhitelisterChanged(address previousAddress, address newAddress);\n\n  /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\n  event StrategyAddedToDepositWhitelist(IStrategy strategy);\n\n  /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\n  event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\n\n  /**\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n   */\n  function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\n\n  /**\n   * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\n   * who must sign off on the action.\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n   * purely to help one address deposit 'for' another.\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @param staker the staker that the deposited assets will be credited to\n   * @param expiry the timestamp at which the signature expires\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n   * following EIP-1271 if the `staker` is a contract\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n   * targeting stakers who may be attempting to undelegate.\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\n   *\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\n   */\n  function depositIntoStrategyWithSignature(\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount,\n    address staker,\n    uint256 expiry,\n    bytes memory signature\n  ) external returns (uint256 shares);\n\n  /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\n  function removeShares(address staker, IStrategy strategy, uint256 shares) external;\n\n  /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\n  function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\n\n  /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\n  function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\n\n  /// @notice Returns the current shares of `user` in `strategy`\n  function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\n\n  /**\n   * @notice Get all details on the staker's deposits and corresponding shares\n   * @return (staker's strategies, shares in these strategies)\n   */\n  function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\n\n  /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\n  function stakerStrategyListLength(address staker) external view returns (uint256);\n\n  /**\n   * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\n   */\n  function addStrategiesToDepositWhitelist(\n    IStrategy[] calldata strategiesToWhitelist,\n    bool[] calldata thirdPartyTransfersForbiddenValues\n  ) external;\n\n  /**\n   * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\n   * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\n   */\n  function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\n\n  /// @notice Returns the single, central Delegation contract of Pell\n  function delegation() external view returns (IDelegationManager);\n\n  /// @notice Returns the single, central Slasher contract of Pell\n  function slasher() external view returns (ISlasher);\n\n  /// @notice Returns the address of the `strategyWhitelister`\n  function strategyWhitelister() external view returns (address);\n\n  /**\n   * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\n   * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\n   */\n  function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IStrategyManagerV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './IStrategy.sol';\nimport './ISlasher.sol';\nimport './IDelegationManager.sol';\n\n/**\n * @title Interface for the primary entrypoint for funds into Pell.\n * @notice See the `StrategyManager` contract itself for implementation details.\n */\ninterface IStrategyManagerV2 {\n  /**\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\n   * @param staker Staker address\n   * @param strategy is the specified strategy where deposit is to be made,\n   * @param token is the denomination in which the deposit is to be made,\n   * @param amount is the amount of token to be deposited in the strategy by the staker\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\n   *\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n   */\n  function depositIntoStrategyWithStaker(\n    address staker,\n    IStrategy strategy,\n    IERC20 token,\n    uint256 amount\n  ) external returns (uint256 shares);\n}\n"
    },
    "contracts/interfaces/ITSSManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface ITSSManager {\n  function isTSSNode(address _nodeAddress) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IUniBTCGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface IUniBTCGateway {\n  function depositNativeToken() external payable;\n\n  function depositERC20Token(address token, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IUniBTCVault.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface IUniBTCVault {\n  function mint() external payable;\n\n  function mint(address _token, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IUniIOTXGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface IUniIOTXGateway {\n  function depositNativeToken(uint256 _deadline) external payable;\n}\n"
    },
    "contracts/interfaces/IWrappedStakedBBTCGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\n\ninterface IWrappedStakedBBTCGateway {\n  /// @notice Emitted when a reward is added.\n  /// @dev This event is emitted when a new reward is added to the contract.\n  /// It includes the amount of the reward that was added.\n  event RewardAdded(uint256 reward);\n  /// @notice Emitted when a reward is paid to a user.\n  /// @dev This event is emitted when a user's reward is paid out.\n  /// It includes the address of the user and the amount of the reward that was paid.\n  event RewardPaid(address indexed user, uint256 reward);\n  /// @notice Emitted when operator address updated.\n  event UpdateOperator(address previousOperator, address newOperator);\n  /// @notice Emitted when rewards duration updated.\n  event UpdateRewardsDuration(uint256 previousDuration, uint256 newDuration);\n  /// @notice Emitted when strategy config.\n  event SetStrategy(IStrategy previousStrategy, IStrategy newStrategy);\n\n  /// @notice Error thrown when the provided reward is too high.\n  /// @dev This error is thrown when the reward provided is too high and could cause an overflow.\n  /// It ensures that the reward rate stays within the right range.\n  error ProvidedRewardTooHigh();\n\n  function depositStakedBBTC(uint256 amount) external;\n\n  function withdrawStakedBBTC(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external;\n}\n"
    },
    "contracts/interfaces/IWrappedStakedBBTCGatewayV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {IWrappedStakedBBTCGateway} from './IWrappedStakedBBTCGateway.sol';\n\ninterface IWrappedStakedBBTCGatewayV2 is IWrappedStakedBBTCGateway {\n  /// @notice Emitted when LenB pool config.\n  event UpdateLenBPool(address previousPool, address currentPool);\n\n  function depositStakedBBTCToLenB(uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n  function withdrawStakedBBTCFromLenB(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IWrappedToken.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\ninterface IWrappedToken {\n  function balanceOf(address account) external view returns (uint256);\n\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IWrappedTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\n\ninterface IWrappedTokenGateway {\n  function depositNativeToken(address staker) external payable;\n\n  function withdrawNativeTokens(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external;\n}\n"
    },
    "contracts/libraries/EIP1271SignatureUtils.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '@openzeppelin/contracts/interfaces/IERC1271.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\n\n/**\n * @title Library of utilities for making EIP1271-compliant signature checks.\n */\nlibrary EIP1271SignatureUtils {\n  // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n  bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\n\n  /**\n   * @notice Checks @param signature is a valid signature of @param digestHash from @param signer.\n   * If the `signer` contains no code -- i.e. it is not (yet, at least) a contract address, then checks using standard ECDSA logic\n   * Otherwise, passes on the signature to the signer to verify the signature and checks that it returns the `EIP1271_MAGICVALUE`.\n   */\n  function checkSignature_EIP1271(address signer, bytes32 digestHash, bytes memory signature) internal view {\n    /**\n     * check validity of signature:\n     * 1) if `signer` is an EOA, then `signature` must be a valid ECDSA signature from `signer`,\n     * indicating their intention for this action\n     * 2) if `signer` is a contract, then `signature` must will be checked according to EIP-1271\n     */\n    if (Address.isContract(signer)) {\n      require(\n        IERC1271(signer).isValidSignature(digestHash, signature) == EIP1271_MAGICVALUE,\n        'EIP1271SignatureUtils.checkSignature_EIP1271: ERC1271 signature verification failed'\n      );\n    } else {\n      require(ECDSA.recover(digestHash, signature) == signer, 'EIP1271SignatureUtils.checkSignature_EIP1271: signature not from signer');\n    }\n  }\n}\n"
    },
    "contracts/libraries/StructuredLinkedList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.20;\n\n/**\n * @title StructuredLinkedList\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev An utility library for using sorted linked list data structures in your Solidity project.\n * @notice Adapted from https://github.com/vittominacori/solidity-linked-list/blob/master/contracts/StructuredLinkedList.sol\n */\nlibrary StructuredLinkedList {\n  uint256 private constant _NULL = 0;\n  uint256 private constant _HEAD = 0;\n\n  bool private constant _PREV = false;\n  bool private constant _NEXT = true;\n\n  struct List {\n    uint256 size;\n    mapping(uint256 => mapping(bool => uint256)) list;\n  }\n\n  /**\n   * @dev Checks if the list exists\n   * @param self stored linked list from contract\n   * @return bool true if list exists, false otherwise\n   */\n  function listExists(List storage self) internal view returns (bool) {\n    // if the head nodes previous or next pointers both point to itself, then there are no items in the list\n    if (self.list[_HEAD][_PREV] != _HEAD || self.list[_HEAD][_NEXT] != _HEAD) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Checks if the node exists\n   * @param self stored linked list from contract\n   * @param _node a node to search for\n   * @return bool true if node exists, false otherwise\n   */\n  function nodeExists(List storage self, uint256 _node) internal view returns (bool) {\n    if (self.list[_node][_PREV] == _HEAD && self.list[_node][_NEXT] == _HEAD) {\n      if (self.list[_HEAD][_NEXT] == _node) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Returns the number of elements in the list\n   * @param self stored linked list from contract\n   * @return uint256\n   */\n  function sizeOf(List storage self) internal view returns (uint256) {\n    return self.size;\n  }\n\n  /**\n   * @dev Gets the head of the list\n   * @param self stored linked list from contract\n   * @return uint256 the head of the list\n   */\n  function getHead(List storage self) internal view returns (uint256) {\n    return self.list[_HEAD][_NEXT];\n  }\n\n  /**\n   * @dev Returns the links of a node as a tuple\n   * @param self stored linked list from contract\n   * @param _node id of the node to get\n   * @return bool, uint256, uint256 true if node exists or false otherwise, previous node, next node\n   */\n  function getNode(List storage self, uint256 _node) internal view returns (bool, uint256, uint256) {\n    if (!nodeExists(self, _node)) {\n      return (false, 0, 0);\n    } else {\n      return (true, self.list[_node][_PREV], self.list[_node][_NEXT]);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @param _direction direction to step in\n   * @return bool, uint256 true if node exists or false otherwise, node in _direction\n   */\n  function getAdjacent(List storage self, uint256 _node, bool _direction) internal view returns (bool, uint256) {\n    if (!nodeExists(self, _node)) {\n      return (false, 0);\n    } else {\n      uint256 adjacent = self.list[_node][_direction];\n      return (adjacent != _HEAD, adjacent);\n    }\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_NEXT`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, next node\n   */\n  function getNextNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\n    return getAdjacent(self, _node, _NEXT);\n  }\n\n  /**\n   * @dev Returns the link of a node `_node` in direction `_PREV`.\n   * @param self stored linked list from contract\n   * @param _node id of the node to step from\n   * @return bool, uint256 true if node exists or false otherwise, previous node\n   */\n  function getPreviousNode(List storage self, uint256 _node) internal view returns (bool, uint256) {\n    return getAdjacent(self, _node, _PREV);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_NEXT`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertAfter(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\n    return _insert(self, _node, _new, _NEXT);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_PREV`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @return bool true if success, false otherwise\n   */\n  function insertBefore(List storage self, uint256 _node, uint256 _new) internal returns (bool) {\n    return _insert(self, _node, _new, _PREV);\n  }\n\n  /**\n   * @dev Removes an entry from the linked list\n   * @param self stored linked list from contract\n   * @param _node node to remove from the list\n   * @return uint256 the removed node\n   */\n  function remove(List storage self, uint256 _node) internal returns (uint256) {\n    if ((_node == _NULL) || (!nodeExists(self, _node))) {\n      return 0;\n    }\n    _createLink(self, self.list[_node][_PREV], self.list[_node][_NEXT], _NEXT);\n    delete self.list[_node][_PREV];\n    delete self.list[_node][_NEXT];\n\n    self.size -= 1; // NOT: SafeMath library should be used here to decrement.\n\n    return _node;\n  }\n\n  /**\n   * @dev Pushes an entry to the head of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the head\n   * @return bool true if success, false otherwise\n   */\n  function pushFront(List storage self, uint256 _node) internal returns (bool) {\n    return _push(self, _node, _NEXT);\n  }\n\n  /**\n   * @dev Pushes an entry to the tail of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the tail\n   * @return bool true if success, false otherwise\n   */\n  function pushBack(List storage self, uint256 _node) internal returns (bool) {\n    return _push(self, _node, _PREV);\n  }\n\n  /**\n   * @dev Pops the first entry from the head of the linked list\n   * @param self stored linked list from contract\n   * @return uint256 the removed node\n   */\n  function popFront(List storage self) internal returns (uint256) {\n    return _pop(self, _NEXT);\n  }\n\n  /**\n   * @dev Pops the first entry from the tail of the linked list\n   * @param self stored linked list from contract\n   * @return uint256 the removed node\n   */\n  function popBack(List storage self) internal returns (uint256) {\n    return _pop(self, _PREV);\n  }\n\n  /**\n   * @dev Pushes an entry to the head of the linked list\n   * @param self stored linked list from contract\n   * @param _node new entry to push to the head\n   * @param _direction push to the head (_NEXT) or tail (_PREV)\n   * @return bool true if success, false otherwise\n   */\n  function _push(List storage self, uint256 _node, bool _direction) private returns (bool) {\n    return _insert(self, _HEAD, _node, _direction);\n  }\n\n  /**\n   * @dev Pops the first entry from the linked list\n   * @param self stored linked list from contract\n   * @param _direction pop from the head (_NEXT) or the tail (_PREV)\n   * @return uint256 the removed node\n   */\n  function _pop(List storage self, bool _direction) private returns (uint256) {\n    uint256 adj;\n    (, adj) = getAdjacent(self, _HEAD, _direction);\n    return remove(self, adj);\n  }\n\n  /**\n   * @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _new  new node to insert\n   * @param _direction direction to insert node in\n   * @return bool true if success, false otherwise\n   */\n  function _insert(List storage self, uint256 _node, uint256 _new, bool _direction) private returns (bool) {\n    if (!nodeExists(self, _new) && nodeExists(self, _node)) {\n      uint256 c = self.list[_node][_direction];\n      _createLink(self, _node, _new, _direction);\n      _createLink(self, _new, c, _direction);\n\n      self.size += 1; // NOT: SafeMath library should be used here to increment.\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @dev Creates a bidirectional link between two nodes on direction `_direction`\n   * @param self stored linked list from contract\n   * @param _node existing node\n   * @param _link node to link to in the _direction\n   * @param _direction direction to insert node in\n   */\n  function _createLink(List storage self, uint256 _node, uint256 _link, bool _direction) private {\n    self.list[_link][!_direction] = _node;\n    self.list[_node][_direction] = _link;\n  }\n}\n"
    },
    "contracts/periphery/UniBTCGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IUniBTCVault} from '../interfaces/IUniBTCVault.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IUniBTCGateway} from '../interfaces/IUniBTCGateway.sol';\n\ncontract UniBTCGateway is IUniBTCGateway, Ownable {\n  using SafeERC20 for IERC20;\n\n  IERC20 internal immutable uniBTC;\n  IUniBTCVault internal immutable uniBTCVault;\n  IStrategy internal immutable strategy;\n  IStrategyManagerV2 internal immutable strategyManager;\n\n  constructor(address _uniBTC, address _uniBTCVault, address _owner, IStrategy _strategy, IStrategyManagerV2 _strategyManager) {\n    uniBTC = IERC20(_uniBTC);\n    uniBTCVault = IUniBTCVault(_uniBTCVault);\n    strategy = _strategy;\n    strategyManager = _strategyManager;\n    _transferOwnership(_owner);\n    IERC20(_uniBTC).approve(address(strategyManager), type(uint256).max);\n  }\n\n  function depositNativeToken() external payable override {\n    uint256 beforeBalance = uniBTC.balanceOf(address(this));\n    uniBTCVault.mint{value: msg.value}();\n    uint256 afterBalance = uniBTC.balanceOf(address(this));\n    uint256 amountToStake = afterBalance - beforeBalance;\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(uniBTC)), amountToStake);\n  }\n\n  function depositERC20Token(address token, uint256 amount) external override {\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n    IERC20(token).forceApprove(address(uniBTCVault), amount);\n    uint256 beforeBalance = uniBTC.balanceOf(address(this));\n    uniBTCVault.mint(token, amount);\n    uint256 afterBalance = uniBTC.balanceOf(address(this));\n    uint256 amountToStake = afterBalance - beforeBalance;\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(uniBTC)), amountToStake);\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\n    _safeTransferNative(to, amount);\n  }\n\n  /**\n   * @dev transfer Native to an address, revert if it fails.\n   * @param to recipient of the transfer\n   * @param value the amount to send\n   */\n  function _safeTransferNative(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'NATIVE_TRANSFER_FAILED');\n  }\n\n  /**\n   * @dev Get uniBTC address used by UniBTCGateway\n   */\n  function getUniBTCAddress() external view returns (address) {\n    return address(uniBTC);\n  }\n\n  /**\n   * @dev Get uniBTC Vault address used by UniBTCGateway\n   */\n  function getUniBTCVaultAddress() external view returns (address) {\n    return address(uniBTCVault);\n  }\n\n  /**\n   * @dev Get uniBTC strategy address used by UniBTCGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n\n  /**\n   * @dev Only uniBTC Vault contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\n   */\n  receive() external payable {\n    require(msg.sender == address(uniBTCVault), 'Receive not allowed');\n  }\n\n  /**\n   * @dev Revert fallback calls\n   */\n  fallback() external payable {\n    revert('Fallback not allowed');\n  }\n}\n"
    },
    "contracts/periphery/UniIOTXGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IIOTXStaking} from '../interfaces/IIOTXStaking.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IUniIOTXGateway} from '../interfaces/IUniIOTXGateway.sol';\n\ncontract UniIOTXGateway is IUniIOTXGateway, Ownable {\n  using SafeERC20 for IERC20;\n\n  IERC20 internal immutable uniIOTX;\n  IIOTXStaking internal immutable iotxStaking;\n  IStrategy internal immutable strategy;\n  IStrategyManagerV2 internal immutable strategyManager;\n\n  constructor(address _uniIOTX, address _iotxStaking, address _owner, IStrategy _strategy, IStrategyManagerV2 _strategyManager) {\n    uniIOTX = IERC20(_uniIOTX);\n    iotxStaking = IIOTXStaking(_iotxStaking);\n    strategy = _strategy;\n    strategyManager = _strategyManager;\n    _transferOwnership(_owner);\n    IERC20(_uniIOTX).approve(address(strategyManager), type(uint256).max);\n  }\n\n  function depositNativeToken(uint256 _deadline) external payable override {\n    uint256 beforeBalance = uniIOTX.balanceOf(address(this));\n    iotxStaking.deposit{value: msg.value}(_deadline);\n    uint256 afterBalance = uniIOTX.balanceOf(address(this));\n    uint256 amountToStake = afterBalance - beforeBalance;\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(uniIOTX)), amountToStake);\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\n    _safeTransferNative(to, amount);\n  }\n\n  /**\n   * @dev transfer Native to an address, revert if it fails.\n   * @param to recipient of the transfer\n   * @param value the amount to send\n   */\n  function _safeTransferNative(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'NATIVE_TRANSFER_FAILED');\n  }\n\n  /**\n   * @dev Get uniIOTX address used by UniIOTXGateway\n   */\n  function getUniIOTXAddress() external view returns (address) {\n    return address(uniIOTX);\n  }\n\n  /**\n   * @dev Get IOTXStaking address used by UniIOTXGateway\n   */\n  function getIOTXStakingAddress() external view returns (address) {\n    return address(iotxStaking);\n  }\n\n  /**\n   * @dev Get uniIOTX strategy address used by UniIOTXGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n\n  /**\n   * @dev Only IOTXStaking contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\n   */\n  receive() external payable {\n    require(msg.sender == address(iotxStaking), 'Receive not allowed');\n  }\n\n  /**\n   * @dev Revert fallback calls\n   */\n  fallback() external payable {\n    revert('Fallback not allowed');\n  }\n}\n"
    },
    "contracts/periphery/WrappedStakedBBTCGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport {ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IStakedBBTC} from '../interfaces/IStakedBBTC.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IWrappedStakedBBTCGateway} from '../interfaces/IWrappedStakedBBTCGateway.sol';\n\ncontract WrappedStakedBBTCGateway is\n  Initializable,\n  ERC20Upgradeable,\n  OwnableUpgradeable,\n  AccessControlUpgradeable,\n  ReentrancyGuardUpgradeable,\n  IWrappedStakedBBTCGateway\n{\n  using SafeERC20 for IERC20;\n\n  bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');\n\n  IStakedBBTC internal immutable stBBTC;\n  IStrategyManagerV2 internal immutable strategyManager;\n  IDelegationManager internal immutable delegationManager;\n  IStrategy internal strategy;\n  mapping(address => uint256) internal _balancesOfStBBTC;\n\n  /// @notice The time when the reward period finishes.\n  /// @dev This is the timestamp when the reward period will end.\n  /// Rewards are only applicable within the period specified by this variable.\n  uint256 public periodFinish;\n  /// @notice The rate of the reward.\n  /// @dev This is the rate at which rewards are distributed.\n  /// It is calculated based on the total reward and the duration of the reward period.\n  uint256 public rewardRate;\n  /// @notice The duration of the reward period.\n  /// @dev This is the duration for which the rewards are applicable.\n  /// The rewards are distributed over this period at the rate specified by rewardRate.\n  uint256 public rewardsDuration;\n  /// @notice The last time the rewards were updated.\n  /// @dev This is the timestamp of the last time the rewards were updated.\n  /// It is used to calculate the reward per token and the earned rewards.\n  uint256 public lastUpdateTime;\n  /// @notice The stored reward per token.\n  /// @dev This is the stored value of the reward per token.\n  /// It is used to calculate the reward per token and the earned rewards.\n  uint256 public rewardPerTokenStored;\n  /// @notice The reward per token paid to each user.\n  /// @dev This mapping stores the reward per token paid to each user.\n  /// It is used to calculate the earned rewards for each user.\n  mapping(address => uint256) public userRewardPerTokenPaid;\n  /// @notice The rewards for each user.\n  /// @dev This mapping stores the rewards for each user.\n  /// It is updated whenever a user stakes or withdraws tokens, or gets their reward.\n  mapping(address => uint256) public rewards;\n\n  /// @notice Modifier to update the reward for a given account.\n  /// @dev This modifier calls the _updateReward function with the provided account as argument.\n  /// It is used before functions that need to update the reward for a user.\n  modifier updateReward(address account) {\n    _updateReward(account);\n    _;\n  }\n\n  constructor(IStakedBBTC _stBBTC, IStrategyManagerV2 _strategyManager, IDelegationManager _delegationManager) {\n    stBBTC = _stBBTC;\n    strategyManager = _strategyManager;\n    delegationManager = _delegationManager;\n    _disableInitializers();\n  }\n\n  function initialize(address _owner, uint256 _rewardsDuration) external initializer {\n    rewardsDuration = _rewardsDuration;\n    __ERC20_init('Wrapped Staked BBTC', 'wstBBTC');\n    __ReentrancyGuard_init();\n    _transferOwnership(_owner);\n    _approve(address(this), address(strategyManager), type(uint256).max);\n  }\n\n  function depositStakedBBTC(uint256 amount) external virtual override nonReentrant updateReward(msg.sender) {\n    IERC20(address(stBBTC)).safeTransferFrom(msg.sender, address(this), amount);\n    _mint(address(this), amount);\n    _balancesOfStBBTC[msg.sender] += amount;\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(this)), amount);\n  }\n\n  function withdrawStakedBBTC(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external virtual override nonReentrant updateReward(msg.sender) {\n    for (uint256 i = 0; i < withdrawals.length; i++) {\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\n        require(withdrawals[i].strategies[j] == strategy, 'Only support stBBTC token strategy');\n      }\n    }\n    uint256 beforeBalance = balanceOf(address(this));\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\n    uint256 afterBalance = balanceOf(address(this));\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\n    _burn(address(this), amountToWithdraw);\n    _balancesOfStBBTC[msg.sender] -= amountToWithdraw;\n    IERC20(address(stBBTC)).safeTransfer(msg.sender, amountToWithdraw);\n  }\n\n  /// @notice Allows a user to get their reward.\n  /// @dev It updates the reward for the user before transferring.\n  function getReward() public nonReentrant updateReward(msg.sender) {\n    uint256 reward = rewards[msg.sender];\n    if (reward > 0) {\n      rewards[msg.sender] = 0;\n      Address.sendValue(payable(msg.sender), reward);\n      emit RewardPaid(msg.sender, reward);\n    }\n  }\n\n  /// @notice Notifies the contract about the reward amount.\n  /// @dev It updates the reward rate and the finish period of the reward.\n  function notifyRewardAmount() external payable onlyRole(OPERATOR_ROLE) updateReward(address(0)) {\n    uint256 beforeBalance = address(this).balance;\n    stBBTC.getReward();\n    uint256 afterBalance = address(this).balance;\n    uint256 reward = afterBalance - beforeBalance;\n    if (msg.value != 0) {\n      reward += msg.value;\n    }\n\n    if (block.timestamp >= periodFinish) {\n      rewardRate = reward / rewardsDuration;\n    } else {\n      uint256 remaining = periodFinish - block.timestamp;\n      uint256 leftover = remaining * rewardRate;\n      rewardRate = (reward + leftover) / rewardsDuration;\n    }\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    if (rewardRate > afterBalance / rewardsDuration) {\n      revert ProvidedRewardTooHigh();\n    }\n\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp + rewardsDuration;\n    emit RewardAdded(reward);\n  }\n\n  /// @notice Determines the last time the reward is applicable.\n  /// @dev This function checks if the current block timestamp is less than the period finish time.\n  /// If it is, it returns the block timestamp, otherwise it returns the period finish time.\n  /// This is used to ensure that rewards are only applicable within the specified period.\n  /// @return The last time the reward is applicable.\n  function lastTimeRewardApplicable() public view returns (uint256) {\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n  }\n\n  /// @notice Calculates the reward per token.\n  /// @dev This function calculates the reward per token based on the total supply of tokens.\n  /// This is used to distribute the rewards proportionally to the token holders.\n  /// @return The calculated reward per token.\n  function rewardPerToken() public view returns (uint256) {\n    if (totalSupply() == 0) {\n      return rewardPerTokenStored;\n    }\n    return rewardPerTokenStored + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate) * (1e18)) / (totalSupply()));\n  }\n\n  /// @notice Calculates the earned rewards for a given account.\n  /// @dev This function calculates the earned rewards by multiplying the balance of the account\n  /// with the difference between the reward per token and the reward per token paid to the account.\n  /// @param account The account to calculate the earned rewards for.\n  /// @return The calculated earned rewards for the account.\n  function earned(address account) public view returns (uint256) {\n    return (_balancesOfStBBTC[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\n  }\n\n  /// @notice Calculates the reward for the entire duration.\n  /// @dev This is used to get the total reward that will be distributed over the entire duration.\n  /// @return The total reward for the duration.\n  function getRewardForDuration() external view returns (uint256) {\n    return rewardRate * rewardsDuration;\n  }\n\n  function isOperator(address _operator) external view returns (bool) {\n    return hasRole(OPERATOR_ROLE, _operator);\n  }\n\n  function addOperator(address _operator) external onlyOwner {\n    require(_operator != address(0), 'Zero address not valid');\n    _grantRole(OPERATOR_ROLE, _operator);\n  }\n\n  function removeOperator(address _operator) external onlyOwner {\n    require(_operator != address(0), 'Zero address not valid');\n    _revokeRole(OPERATOR_ROLE, _operator);\n  }\n\n  function updateRewardsDuration(uint256 _duration) external onlyOwner {\n    require(block.timestamp > periodFinish, 'Previous rewards period must be complete before changing the duration for the new period');\n    emit UpdateRewardsDuration(rewardsDuration, _duration);\n    rewardsDuration = _duration;\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    require(token != address(stBBTC), 'The underlying asset cannot be rescued');\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  function setStrategy(IStrategy _strategy) external onlyOwner {\n    emit SetStrategy(strategy, _strategy);\n    strategy = _strategy;\n  }\n\n  /**\n   * @dev Get stBBTC address used by WrappedStakedBBTCGateway\n   */\n  function getStakedBBTCAddress() external view returns (address) {\n    return address(stBBTC);\n  }\n\n  /**\n   * @dev Get stBBTC strategy address used by WrappedStakedBBTCGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n\n  /// @notice Updates the reward for a given account.\n  /// @dev This function updates the stored reward per token and the last update time.\n  /// If the account is not the zero address, it also updates the rewards and the reward per token\n  /// paid for the account.\n  /// @param account The account to update the reward for.\n  function _updateReward(address account) internal {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (account != address(0)) {\n      rewards[account] = earned(account);\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\n    }\n  }\n\n  /**\n   * @dev Only WrappedStakedBBTC contract is allowed to transfer native token here.\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Revert fallback calls with data\n   */\n  fallback() external payable {\n    require(msg.data.length == 0, 'NON_EMPTY_DATA');\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/periphery/WrappedStakedBBTCGatewayV2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport {ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IStakedBBTC} from '../interfaces/IStakedBBTC.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IWrappedStakedBBTCGatewayV2} from '../interfaces/IWrappedStakedBBTCGatewayV2.sol';\nimport {IPool} from '../interfaces/IPool.sol';\n\ncontract WrappedStakedBBTCGatewayV2 is\n  Initializable,\n  ERC20Upgradeable,\n  OwnableUpgradeable,\n  AccessControlUpgradeable,\n  ReentrancyGuardUpgradeable,\n  IWrappedStakedBBTCGatewayV2\n{\n  using SafeERC20 for IERC20;\n\n  bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');\n\n  IStakedBBTC internal immutable stBBTC;\n  IStrategyManagerV2 internal immutable strategyManager;\n  IDelegationManager internal immutable delegationManager;\n  IStrategy internal strategy;\n  mapping(address => uint256) internal _balancesOfStBBTC;\n\n  /// @notice The time when the reward period finishes.\n  /// @dev This is the timestamp when the reward period will end.\n  /// Rewards are only applicable within the period specified by this variable.\n  uint256 public periodFinish;\n  /// @notice The rate of the reward.\n  /// @dev This is the rate at which rewards are distributed.\n  /// It is calculated based on the total reward and the duration of the reward period.\n  uint256 public rewardRate;\n  /// @notice The duration of the reward period.\n  /// @dev This is the duration for which the rewards are applicable.\n  /// The rewards are distributed over this period at the rate specified by rewardRate.\n  uint256 public rewardsDuration;\n  /// @notice The last time the rewards were updated.\n  /// @dev This is the timestamp of the last time the rewards were updated.\n  /// It is used to calculate the reward per token and the earned rewards.\n  uint256 public lastUpdateTime;\n  /// @notice The stored reward per token.\n  /// @dev This is the stored value of the reward per token.\n  /// It is used to calculate the reward per token and the earned rewards.\n  uint256 public rewardPerTokenStored;\n  /// @notice The reward per token paid to each user.\n  /// @dev This mapping stores the reward per token paid to each user.\n  /// It is used to calculate the earned rewards for each user.\n  mapping(address => uint256) public userRewardPerTokenPaid;\n  /// @notice The rewards for each user.\n  /// @dev This mapping stores the rewards for each user.\n  /// It is updated whenever a user stakes or withdraws tokens, or gets their reward.\n  mapping(address => uint256) public rewards;\n\n  IPool internal POOL;\n\n  /// @notice Modifier to update the reward for a given account.\n  /// @dev This modifier calls the _updateReward function with the provided account as argument.\n  /// It is used before functions that need to update the reward for a user.\n  modifier updateReward(address account) {\n    _updateReward(account);\n    _;\n  }\n\n  constructor(IStakedBBTC _stBBTC, IStrategyManagerV2 _strategyManager, IDelegationManager _delegationManager) {\n    stBBTC = _stBBTC;\n    strategyManager = _strategyManager;\n    delegationManager = _delegationManager;\n    _disableInitializers();\n  }\n\n  function initialize(address _owner, uint256 _rewardsDuration) external initializer {\n    rewardsDuration = _rewardsDuration;\n    __ERC20_init('Wrapped Staked BBTC', 'wstBBTC');\n    __ReentrancyGuard_init();\n    _transferOwnership(_owner);\n    _approve(address(this), address(strategyManager), type(uint256).max);\n  }\n\n  function depositStakedBBTC(uint256 amount) external virtual override nonReentrant updateReward(msg.sender) {\n    IERC20(address(stBBTC)).safeTransferFrom(msg.sender, address(this), amount);\n    _mint(address(this), amount);\n    _balancesOfStBBTC[msg.sender] += amount;\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(this)), amount);\n  }\n\n  function withdrawStakedBBTC(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external virtual override nonReentrant updateReward(msg.sender) {\n    for (uint256 i = 0; i < withdrawals.length; i++) {\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\n        require(withdrawals[i].strategies[j] == strategy, 'Only support stBBTC token strategy');\n      }\n    }\n    uint256 beforeBalance = balanceOf(address(this));\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\n    uint256 afterBalance = balanceOf(address(this));\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\n    _burn(address(this), amountToWithdraw);\n    _balancesOfStBBTC[msg.sender] -= amountToWithdraw;\n    IERC20(address(stBBTC)).safeTransfer(msg.sender, amountToWithdraw);\n  }\n\n  /**\n   * @dev deposits wstBBTC into the reserve, using stBBTC. A corresponding amount of the overlying asset (aTokens)\n   * is minted.\n   * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\n   **/\n  function depositStakedBBTCToLenB(\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external virtual override nonReentrant updateReward(msg.sender) {\n    IERC20(address(stBBTC)).safeTransferFrom(msg.sender, address(this), amount);\n    _mint(address(this), amount);\n    _balancesOfStBBTC[msg.sender] += amount;\n    POOL.supply(address(this), amount, onBehalfOf, referralCode);\n  }\n\n  /**\n   * @dev withdraws the wstBBTC _reserves of msg.sender.\n   * @param amount amount of aWstBBTC to withdraw and receive stBBTC\n   */\n  function withdrawStakedBBTCFromLenB(uint256 amount) external virtual override nonReentrant updateReward(msg.sender) {\n    IERC20 aWstBBTC = IERC20(POOL.getReserveData(address(this)).aTokenAddress);\n    uint256 userBalance = aWstBBTC.balanceOf(msg.sender);\n    uint256 amountToWithdraw = amount;\n\n    // if amount is equal to uint(-1), the user wants to redeem everything\n    if (amount == type(uint256).max) {\n      amountToWithdraw = userBalance;\n    }\n    aWstBBTC.transferFrom(msg.sender, address(this), amountToWithdraw);\n    POOL.withdraw(address(this), amountToWithdraw, address(this));\n    _burn(address(this), amountToWithdraw);\n    _balancesOfStBBTC[msg.sender] -= amountToWithdraw;\n    IERC20(address(stBBTC)).safeTransfer(msg.sender, amountToWithdraw);\n  }\n\n  /// @notice Allows a user to get their reward.\n  /// @dev It updates the reward for the user before transferring.\n  function getReward() public nonReentrant updateReward(msg.sender) {\n    uint256 reward = rewards[msg.sender];\n    if (reward > 0) {\n      rewards[msg.sender] = 0;\n      Address.sendValue(payable(msg.sender), reward);\n      emit RewardPaid(msg.sender, reward);\n    }\n  }\n\n  /// @notice Notifies the contract about the reward amount.\n  /// @dev It updates the reward rate and the finish period of the reward.\n  function notifyRewardAmount() external payable onlyRole(OPERATOR_ROLE) updateReward(address(0)) {\n    uint256 beforeBalance = address(this).balance;\n    stBBTC.getReward();\n    uint256 afterBalance = address(this).balance;\n    uint256 reward = afterBalance - beforeBalance;\n    if (msg.value != 0) {\n      reward += msg.value;\n    }\n\n    if (block.timestamp >= periodFinish) {\n      rewardRate = reward / rewardsDuration;\n    } else {\n      uint256 remaining = periodFinish - block.timestamp;\n      uint256 leftover = remaining * rewardRate;\n      rewardRate = (reward + leftover) / rewardsDuration;\n    }\n\n    // Ensure the provided reward amount is not more than the balance in the contract.\n    // This keeps the reward rate in the right range, preventing overflows due to\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n    if (rewardRate > afterBalance / rewardsDuration) {\n      revert ProvidedRewardTooHigh();\n    }\n\n    lastUpdateTime = block.timestamp;\n    periodFinish = block.timestamp + rewardsDuration;\n    emit RewardAdded(reward);\n  }\n\n  /// @notice Determines the last time the reward is applicable.\n  /// @dev This function checks if the current block timestamp is less than the period finish time.\n  /// If it is, it returns the block timestamp, otherwise it returns the period finish time.\n  /// This is used to ensure that rewards are only applicable within the specified period.\n  /// @return The last time the reward is applicable.\n  function lastTimeRewardApplicable() public view returns (uint256) {\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n  }\n\n  /// @notice Calculates the reward per token.\n  /// @dev This function calculates the reward per token based on the total supply of tokens.\n  /// This is used to distribute the rewards proportionally to the token holders.\n  /// @return The calculated reward per token.\n  function rewardPerToken() public view returns (uint256) {\n    if (totalSupply() == 0) {\n      return rewardPerTokenStored;\n    }\n    return rewardPerTokenStored + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate) * (1e18)) / (totalSupply()));\n  }\n\n  /// @notice Calculates the earned rewards for a given account.\n  /// @dev This function calculates the earned rewards by multiplying the balance of the account\n  /// with the difference between the reward per token and the reward per token paid to the account.\n  /// @param account The account to calculate the earned rewards for.\n  /// @return The calculated earned rewards for the account.\n  function earned(address account) public view returns (uint256) {\n    return (_balancesOfStBBTC[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\n  }\n\n  /// @notice Calculates the reward for the entire duration.\n  /// @dev This is used to get the total reward that will be distributed over the entire duration.\n  /// @return The total reward for the duration.\n  function getRewardForDuration() external view returns (uint256) {\n    return rewardRate * rewardsDuration;\n  }\n\n  function isOperator(address _operator) external view returns (bool) {\n    return hasRole(OPERATOR_ROLE, _operator);\n  }\n\n  function addOperator(address _operator) external onlyOwner {\n    require(_operator != address(0), 'Zero address not valid');\n    _grantRole(OPERATOR_ROLE, _operator);\n  }\n\n  function removeOperator(address _operator) external onlyOwner {\n    require(_operator != address(0), 'Zero address not valid');\n    _revokeRole(OPERATOR_ROLE, _operator);\n  }\n\n  function updateRewardsDuration(uint256 _duration) external onlyOwner {\n    require(block.timestamp > periodFinish, 'Previous rewards period must be complete before changing the duration for the new period');\n    emit UpdateRewardsDuration(rewardsDuration, _duration);\n    rewardsDuration = _duration;\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    require(token != address(stBBTC), 'The underlying asset cannot be rescued');\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  function setStrategy(IStrategy _strategy) external onlyOwner {\n    emit SetStrategy(strategy, _strategy);\n    strategy = _strategy;\n  }\n\n  /**\n   * @dev Get stBBTC address used by WrappedStakedBBTCGateway\n   */\n  function getStakedBBTCAddress() external view returns (address) {\n    return address(stBBTC);\n  }\n\n  /**\n   * @dev Get stBBTC strategy address used by WrappedStakedBBTCGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n\n  /// @notice Updates the reward for a given account.\n  /// @dev This function updates the stored reward per token and the last update time.\n  /// If the account is not the zero address, it also updates the rewards and the reward per token\n  /// paid for the account.\n  /// @param account The account to update the reward for.\n  function _updateReward(address account) internal {\n    rewardPerTokenStored = rewardPerToken();\n    lastUpdateTime = lastTimeRewardApplicable();\n    if (account != address(0)) {\n      rewards[account] = earned(account);\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\n    }\n  }\n\n  /**\n   * @notice Called by owner to update the LenB Pool\n   * @param _newPool New LenB poll address\n   */\n  function updateLenBPool(IPool _newPool) external onlyOwner {\n    emit UpdateLenBPool(address(POOL), address(_newPool));\n    POOL = _newPool;\n    _approve(address(this), address(POOL), type(uint256).max);\n  }\n\n  /**\n   * @dev Only WrappedStakedBBTC contract is allowed to transfer native token here.\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Revert fallback calls with data\n   */\n  fallback() external payable {\n    require(msg.data.length == 0, 'NON_EMPTY_DATA');\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[48] private __gap;\n}\n"
    },
    "contracts/periphery/WrappedTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IWrappedToken} from '../interfaces/IWrappedToken.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {IWrappedTokenGateway} from '../interfaces/IWrappedTokenGateway.sol';\n\ncontract WrappedTokenGateway is IWrappedTokenGateway, Ownable {\n  using SafeERC20 for IERC20;\n\n  IWrappedToken internal immutable wrappedToken;\n  IStrategy internal immutable strategy;\n  IStrategyManagerV2 internal immutable strategyManager;\n  IDelegationManager internal immutable delegationManager;\n\n  constructor(\n    address _wrappedToken,\n    address _owner,\n    IStrategy _strategy,\n    IStrategyManagerV2 _strategyManager,\n    IDelegationManager _delegationManager\n  ) {\n    wrappedToken = IWrappedToken(_wrappedToken);\n    strategy = _strategy;\n    strategyManager = _strategyManager;\n    delegationManager = _delegationManager;\n    transferOwnership(_owner);\n    IWrappedToken(_wrappedToken).approve(address(strategyManager), type(uint256).max);\n  }\n\n  function depositNativeToken(address staker) external payable {\n    wrappedToken.deposit{value: msg.value}();\n    strategyManager.depositIntoStrategyWithStaker(staker, strategy, IERC20(address(wrappedToken)), msg.value);\n  }\n\n  function withdrawNativeTokens(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens\n  ) external {\n    for (uint256 i = 0; i < withdrawals.length; i++) {\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\n        require(withdrawals[i].strategies[j] == strategy, 'Only support wrapped token strategy');\n      }\n    }\n    uint256 beforeBalance = wrappedToken.balanceOf(address(this));\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\n    uint256 afterBalance = wrappedToken.balanceOf(address(this));\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\n    wrappedToken.withdraw(amountToWithdraw);\n    _safeTransferNative(msg.sender, amountToWithdraw);\n  }\n\n  /**\n   * @dev transfer Native to an address, revert if it fails.\n   * @param to recipient of the transfer\n   * @param value the amount to send\n   */\n  function _safeTransferNative(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, 'NATIVE_TRANSFER_FAILED');\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev transfer native token from the utility contract, for native token recovery in case of stuck native\n   * due to selfdestructs or Native transfers to the pre-computed contract address before deployment.\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyNativeTransfer(address to, uint256 amount) external onlyOwner {\n    _safeTransferNative(to, amount);\n  }\n\n  /**\n   * @dev Get WrappedToken address used by WrappedTokenGateway\n   */\n  function getWrappedTokenAddress() external view returns (address) {\n    return address(wrappedToken);\n  }\n\n  /**\n   * @dev Get WrappedToken strategy address used by WrappedTokenGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n\n  /**\n   * @dev Only WrappedToken contract is allowed to transfer native token here. Prevent other addresses to send native token to this contract.\n   */\n  receive() external payable {\n    require(msg.sender == address(wrappedToken), 'Receive not allowed');\n  }\n\n  /**\n   * @dev Revert fallback calls\n   */\n  fallback() external payable {\n    revert('Fallback not allowed');\n  }\n}\n"
    },
    "contracts/periphery/zetachain/BytesHelperLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nlibrary BytesHelperLib {\n  error OffsetOutOfBounds();\n\n  function bytesToAddress(bytes calldata data, uint256 offset) internal pure returns (address output) {\n    bytes memory b = data[offset:offset + 20];\n    assembly {\n      output := mload(add(b, 20))\n    }\n  }\n\n  function bytesMemoryToAddress(bytes memory data, uint256 offset) internal pure returns (address output) {\n    assembly {\n      output := mload(add(add(data, offset), 32))\n    }\n  }\n\n  function bytesToUint32(bytes calldata data, uint256 offset) internal pure returns (uint32 output) {\n    bytes memory b = data[offset:offset + 4];\n    assembly {\n      output := mload(add(b, 4))\n    }\n  }\n\n  function addressToBytes(address someAddress) internal pure returns (bytes32) {\n    return bytes32(uint256(uint160(someAddress)));\n  }\n\n  function bytesToBech32Bytes(bytes calldata data, uint256 offset) internal pure returns (bytes memory) {\n    bytes memory bech32Bytes = new bytes(42);\n    for (uint i = 0; i < 42; i++) {\n      bech32Bytes[i] = data[i + offset];\n    }\n\n    return bech32Bytes;\n  }\n\n  function bytesToBool(bytes calldata data, uint256 offset) internal pure returns (bool) {\n    if (offset >= data.length) {\n      revert OffsetOutOfBounds();\n    }\n    return uint8(data[offset]) != 0;\n  }\n}\n"
    },
    "contracts/periphery/zetachain/IZRC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IZRC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function decreaseAllowance(address spender, uint256 amount) external returns (bool);\n\n  function increaseAllowance(address spender, uint256 amount) external returns (bool);\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  function deposit(address to, uint256 amount) external returns (bool);\n\n  function burn(address account, uint256 amount) external returns (bool);\n\n  function withdraw(bytes memory to, uint256 amount) external returns (bool);\n\n  function withdrawGasFee() external view returns (address, uint256);\n\n  function PROTOCOL_FEE() external view returns (uint256);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Deposit(bytes from, address indexed to, uint256 value);\n  event Withdrawal(address indexed from, bytes to, uint256 value, uint256 gasFee, uint256 protocolFlatFee);\n  event UpdatedSystemContract(address systemContract);\n  event UpdatedGasLimit(uint256 gasLimit);\n  event UpdatedProtocolFlatFee(uint256 protocolFlatFee);\n}\n"
    },
    "contracts/periphery/zetachain/OnlySystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport './SystemContract.sol';\n\ncontract OnlySystem {\n  error OnlySystemContract(string);\n\n  modifier onlySystem(SystemContract systemContract) {\n    if (msg.sender != address(systemContract)) {\n      revert OnlySystemContract('Only system contract can call this function');\n    }\n    _;\n  }\n}\n"
    },
    "contracts/periphery/zetachain/SystemContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport './zContract.sol';\nimport './IZRC20.sol';\n\n/**\n * @dev Custom errors for SystemContract\n */\ninterface SystemContractErrors {\n  error CallerIsNotFungibleModule();\n  error InvalidTarget();\n  error CantBeIdenticalAddresses();\n  error CantBeZeroAddress();\n  error ZeroAddress();\n}\n\n/**\n * @dev The system contract it's called by the protocol to interact with the blockchain.\n * Also includes a lot of tools to make easier to interact with ZetaChain.\n */\ncontract SystemContract is SystemContractErrors {\n  /// @notice Map to know the gas price of each chain given a chain id.\n  mapping(uint256 => uint256) public gasPriceByChainId;\n  /// @notice Map to know the ZRC20 address of a token given a chain id, ex zETH, zBNB etc.\n  mapping(uint256 => address) public gasCoinZRC20ByChainId;\n  // @dev: Map to know uniswap V2 pool of ZETA/ZRC20 given a chain id. This refer to the build in uniswap deployed at genesis.\n  mapping(uint256 => address) public gasZetaPoolByChainId;\n\n  /// @notice Fungible address is always the same, it's on protocol level.\n  address public constant FUNGIBLE_MODULE_ADDRESS = 0x735b14BB79463307AAcBED86DAf3322B1e6226aB;\n  /// @notice Uniswap V2 addresses.\n  address public immutable uniswapv2FactoryAddress;\n  address public immutable uniswapv2Router02Address;\n  /// @notice Address of the wrapped ZETA to interact with Uniswap V2.\n  address public wZetaContractAddress;\n  /// @notice Address of ZEVM Zeta Connector.\n  address public zetaConnectorZEVMAddress;\n\n  /// @notice Custom SystemContract errors.\n  event SystemContractDeployed();\n  event SetGasPrice(uint256, uint256);\n  event SetGasCoin(uint256, address);\n  event SetGasZetaPool(uint256, address);\n  event SetWZeta(address);\n  event SetConnectorZEVM(address);\n\n  /**\n   * @dev Only fungible module can deploy a system contract.\n   */\n  constructor(address wzeta_, address uniswapv2Factory_, address uniswapv2Router02_) {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    wZetaContractAddress = wzeta_;\n    uniswapv2FactoryAddress = uniswapv2Factory_;\n    uniswapv2Router02Address = uniswapv2Router02_;\n    emit SystemContractDeployed();\n  }\n\n  /**\n   * @dev Deposit foreign coins into ZRC20 and call user specified contract on zEVM.\n   * @param context, context data for deposit.\n   * @param zrc20, zrc20 address for deposit.\n   * @param amount, amount to deposit.\n   * @param target, contract address to make a call after deposit.\n   * @param message, calldata for a call.\n   */\n  function depositAndCall(zContext calldata context, address zrc20, uint256 amount, address target, bytes calldata message) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    if (target == FUNGIBLE_MODULE_ADDRESS || target == address(this)) revert InvalidTarget();\n\n    IZRC20(zrc20).deposit(target, amount);\n    zContract(target).onCrossChainCall(context, zrc20, amount, message);\n  }\n\n  /**\n   * @dev Sort token addresses lexicographically. Used to handle return values from pairs sorted in the order.\n   * @param tokenA, tokenA address.\n   * @param tokenB, tokenB address.\n   * @return token0 token1, returns sorted token addresses,.\n   */\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n    if (tokenA == tokenB) revert CantBeIdenticalAddresses();\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    if (token0 == address(0)) revert CantBeZeroAddress();\n  }\n\n  /**\n   * @dev Calculates the CREATE2 address for a pair without making any external calls.\n   * @param factory, factory address.\n   * @param tokenA, tokenA address.\n   * @param tokenB, tokenB address.\n   * @return pair tokens pair address.\n   */\n  function uniswapv2PairFor(address factory, address tokenA, address tokenB) public pure returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(\n      uint160(\n        uint256(\n          keccak256(\n            abi.encodePacked(\n              hex'ff',\n              factory,\n              keccak256(abi.encodePacked(token0, token1)),\n              hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * @dev Fungible module updates the gas price oracle periodically.\n   * @param chainID, chain id.\n   * @param price, new gas price.\n   */\n  function setGasPrice(uint256 chainID, uint256 price) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    gasPriceByChainId[chainID] = price;\n    emit SetGasPrice(chainID, price);\n  }\n\n  /**\n   * @dev Setter for gasCoinZRC20ByChainId map.\n   * @param chainID, chain id.\n   * @param zrc20, ZRC20 address.\n   */\n  function setGasCoinZRC20(uint256 chainID, address zrc20) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    gasCoinZRC20ByChainId[chainID] = zrc20;\n    emit SetGasCoin(chainID, zrc20);\n  }\n\n  /**\n   * @dev Set the pool wzeta/erc20 address.\n   * @param chainID, chain id.\n   * @param erc20, pair for uniswap wzeta/erc20.\n   */\n  function setGasZetaPool(uint256 chainID, address erc20) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    address pool = uniswapv2PairFor(uniswapv2FactoryAddress, wZetaContractAddress, erc20);\n    gasZetaPoolByChainId[chainID] = pool;\n    emit SetGasZetaPool(chainID, pool);\n  }\n\n  /**\n   * @dev Setter for wrapped ZETA address.\n   * @param addr, wzeta new address.\n   */\n  function setWZETAContractAddress(address addr) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    if (addr == address(0)) revert ZeroAddress();\n    wZetaContractAddress = addr;\n    emit SetWZeta(wZetaContractAddress);\n  }\n\n  /**\n   * @dev Setter for zetaConnector ZEVM Address\n   * @param addr, zeta connector new address.\n   */\n  function setConnectorZEVMAddress(address addr) external {\n    if (msg.sender != FUNGIBLE_MODULE_ADDRESS) revert CallerIsNotFungibleModule();\n    if (addr == address(0)) revert ZeroAddress();\n    zetaConnectorZEVMAddress = addr;\n    emit SetConnectorZEVM(zetaConnectorZEVMAddress);\n  }\n}\n"
    },
    "contracts/periphery/zetachain/zContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nstruct zContext {\n  bytes origin;\n  address sender;\n  uint256 chainID;\n}\n\ninterface zContract {\n  function onCrossChainCall(zContext calldata context, address zrc20, uint256 amount, bytes calldata message) external;\n}\n"
    },
    "contracts/periphery/ZetaChainGateway.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IStrategy} from '../interfaces/IStrategy.sol';\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\nimport {SystemContract, IZRC20} from './zetachain/SystemContract.sol';\nimport {zContract, zContext} from './zetachain/zContract.sol';\nimport {OnlySystem} from './zetachain/OnlySystem.sol';\nimport {BytesHelperLib} from './zetachain/BytesHelperLib.sol';\n\ncontract ZetaChainGateway is Ownable, zContract, OnlySystem {\n  using SafeERC20 for IERC20;\n\n  SystemContract public immutable zetachainSystemContract;\n  IZRC20 internal immutable bitcoinZRC20;\n  IStrategy internal immutable strategy;\n  IStrategyManagerV2 internal immutable strategyManager;\n  IDelegationManager internal immutable delegationManager;\n\n  constructor(\n    address _zetachainSystemContract,\n    address _zrc20,\n    address _owner,\n    IStrategy _strategy,\n    IStrategyManagerV2 _strategyManager,\n    IDelegationManager _delegationManager\n  ) {\n    zetachainSystemContract = SystemContract(_zetachainSystemContract);\n    bitcoinZRC20 = IZRC20(_zrc20);\n    strategy = _strategy;\n    strategyManager = _strategyManager;\n    delegationManager = _delegationManager;\n    _transferOwnership(_owner);\n    IZRC20(_zrc20).approve(address(strategyManager), type(uint256).max);\n  }\n\n  function onCrossChainCall(\n    zContext calldata context,\n    address zrc20,\n    uint256 amount,\n    bytes calldata message\n  ) external virtual override onlySystem(zetachainSystemContract) {\n    require(zrc20 == address(bitcoinZRC20), 'Only support bitcoin zrc20');\n    address staker = BytesHelperLib.bytesToAddress(message, 0);\n    require(staker != address(0), 'Invalid staker address');\n    strategyManager.depositIntoStrategyWithStaker(staker, strategy, IERC20(address(bitcoinZRC20)), amount);\n  }\n\n  function withdrawNativeTokens(\n    IDelegationManager.Withdrawal[] calldata withdrawals,\n    IERC20[][] calldata tokens,\n    uint256[] calldata middlewareTimesIndexs,\n    bool[] calldata receiveAsTokens,\n    bytes calldata bitcoinRecipient\n  ) external {\n    for (uint256 i = 0; i < withdrawals.length; i++) {\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\n        require(withdrawals[i].strategies[j] == strategy, 'Only support wrapped token strategy');\n      }\n    }\n    uint256 beforeBalance = bitcoinZRC20.balanceOf(address(this));\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\n    uint256 afterBalance = bitcoinZRC20.balanceOf(address(this));\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\n\n    (, uint256 gasFee) = IZRC20(bitcoinZRC20).withdrawGasFee();\n\n    require(gasFee >= amountToWithdraw, 'Insufficient withdraw gas fee');\n\n    IZRC20(bitcoinZRC20).approve(address(bitcoinZRC20), gasFee);\n    IZRC20(bitcoinZRC20).withdraw(bitcoinRecipient, amountToWithdraw - gasFee);\n  }\n\n  /**\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\n   * direct transfers to the contract address.\n   * @param token token to transfer\n   * @param to recipient of the transfer\n   * @param amount amount to send\n   */\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @dev Get BitcoinZRC20Token address used by ZetaChainGateway\n   */\n  function getBitcoinZRC20Address() external view returns (address) {\n    return address(bitcoinZRC20);\n  }\n\n  /**\n   * @dev Get Bitcoin ZRC20 Token strategy address used by ZetaChainGateway\n   */\n  function getStrategyAddress() external view returns (address) {\n    return address(strategy);\n  }\n}\n"
    },
    "contracts/permissions/Pausable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\n\npragma solidity 0.8.20;\n\nimport '../interfaces/IPausable.sol';\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\ncontract Pausable is IPausable {\n  /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n  IPauserRegistry public pauserRegistry;\n\n  /// @dev whether or not the contract is currently paused\n  uint256 private _paused;\n\n  uint256 internal constant UNPAUSE_ALL = 0;\n  uint256 internal constant PAUSE_ALL = type(uint256).max;\n\n  /// @notice\n  modifier onlyPauser() {\n    require(pauserRegistry.isPauser(msg.sender), 'msg.sender is not permissioned as pauser');\n    _;\n  }\n\n  modifier onlyUnpauser() {\n    require(msg.sender == pauserRegistry.unpauser(), 'msg.sender is not permissioned as unpauser');\n    _;\n  }\n\n  /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\n  modifier whenNotPaused() {\n    require(_paused == 0, 'Pausable: contract is paused');\n    _;\n  }\n\n  /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\n  modifier onlyWhenNotPaused(uint8 index) {\n    require(!paused(index), 'Pausable: index is paused');\n    _;\n  }\n\n  /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\n  function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\n    require(\n      address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0),\n      'Pausable._initializePauser: _initializePauser() can only be called once'\n    );\n    _paused = initPausedStatus;\n    emit Paused(msg.sender, initPausedStatus);\n    _setPauserRegistry(_pauserRegistry);\n  }\n\n  /**\n   * @notice This function is used to pause an Pell contract's functionality.\n   * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n   */\n  function pause(uint256 newPausedStatus) external onlyPauser {\n    // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\n    require((_paused & newPausedStatus) == _paused, 'Pausable.pause: invalid attempt to unpause functionality');\n    _paused = newPausedStatus;\n    emit Paused(msg.sender, newPausedStatus);\n  }\n\n  /**\n   * @notice Alias for `pause(type(uint256).max)`.\n   */\n  function pauseAll() external onlyPauser {\n    _paused = type(uint256).max;\n    emit Paused(msg.sender, type(uint256).max);\n  }\n\n  /**\n   * @notice This function is used to unpause an Pell contract's functionality.\n   * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n   * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n   * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n   */\n  function unpause(uint256 newPausedStatus) external onlyUnpauser {\n    // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\n    require(((~_paused) & (~newPausedStatus)) == (~_paused), 'Pausable.unpause: invalid attempt to pause functionality');\n    _paused = newPausedStatus;\n    emit Unpaused(msg.sender, newPausedStatus);\n  }\n\n  /// @notice Returns the current paused status as a uint256.\n  function paused() public view virtual returns (uint256) {\n    return _paused;\n  }\n\n  /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n  function paused(uint8 index) public view virtual returns (bool) {\n    uint256 mask = 1 << index;\n    return ((_paused & mask) == mask);\n  }\n\n  /// @notice Allows the unpauser to set a new pauser registry\n  function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\n    _setPauserRegistry(newPauserRegistry);\n  }\n\n  /// internal function for setting pauser registry\n  function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\n    require(address(newPauserRegistry) != address(0), 'Pausable._setPauserRegistry: newPauserRegistry cannot be the zero address');\n    emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\n    pauserRegistry = newPauserRegistry;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/strategies/StrategyBase.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport '../interfaces/IStrategyManager.sol';\nimport '../permissions/Pausable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/**\n * @title Base implementation of `IStrategy` interface, designed to be inherited from by more complex strategies.\n * @notice Simple, basic, \"do-nothing\" Strategy that holds a single underlying token and returns it on withdrawals.\n * Implements minimal versions of the IStrategy functions, this contract is designed to be inherited by\n * more complex strategies, which can then override its functions as necessary.\n * @dev Note that some functions have their mutability restricted; developers inheriting from this contract cannot broaden\n * the mutability without modifying this contract itself.\n * @dev This contract is expressly *not* intended for use with 'fee-on-transfer'-type tokens.\n * Setting the `underlyingToken` to be a fee-on-transfer token may result in improper accounting.\n * @notice This contract functions similarly to an ERC4626 vault, only without issuing a token.\n * To mitigate against the common \"inflation attack\" vector, we have chosen to use the 'virtual shares' mitigation route,\n * similar to [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol).\n * We acknowledge that this mitigation has the known downside of the virtual shares causing some losses to users, which are pronounced\n * particularly in the case of the share exchange rate changing signficantly, either positively or negatively.\n * For a fairly thorough discussion of this issue and our chosen mitigation strategy, we recommend reading through\n * [this thread](https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706) on the OpenZeppelin repo.\n * We specifically use a share offset of `SHARES_OFFSET` and a balance offset of `BALANCE_OFFSET`.\n */\ncontract StrategyBase is Initializable, Pausable, IStrategy {\n  using SafeERC20 for IERC20;\n\n  uint8 internal constant PAUSED_DEPOSITS = 0;\n  uint8 internal constant PAUSED_WITHDRAWALS = 1;\n\n  /**\n   * @notice virtual shares used as part of the mitigation of the common 'share inflation' attack vector.\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\n   * incurring reasonably small losses to depositors\n   */\n  uint256 internal constant SHARES_OFFSET = 1e3;\n  /**\n   * @notice virtual balance used as part of the mitigation of the common 'share inflation' attack vector\n   * Constant value chosen to reasonably reduce attempted share inflation by the first depositor, while still\n   * incurring reasonably small losses to depositors\n   */\n  uint256 internal constant BALANCE_OFFSET = 1e3;\n\n  /// @notice Pell's StrategyManager contract\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n  IStrategyManager public immutable strategyManager;\n\n  /// @notice The underlying token for shares in this Strategy\n  IERC20 public underlyingToken;\n\n  /// @notice The total number of extant shares in this Strategy\n  uint256 public totalShares;\n\n  /// @notice Simply checks that the `msg.sender` is the `strategyManager`, which is an address stored immutably at construction.\n  modifier onlyStrategyManager() {\n    require(msg.sender == address(strategyManager), 'StrategyBase.onlyStrategyManager');\n    _;\n  }\n\n  /// @notice Since this contract is designed to be initializable, the constructor simply sets `strategyManager`, the only immutable variable.\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(IStrategyManager _strategyManager) {\n    strategyManager = _strategyManager;\n    _disableInitializers();\n  }\n\n  function initializeBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) public virtual initializer {\n    _initializeStrategyBase(_underlyingToken, _pauserRegistry);\n  }\n\n  /// @notice Sets the `underlyingToken` and `pauserRegistry` for the strategy.\n  function _initializeStrategyBase(IERC20 _underlyingToken, IPauserRegistry _pauserRegistry) internal onlyInitializing {\n    underlyingToken = _underlyingToken;\n    _initializePauser(_pauserRegistry, UNPAUSE_ALL);\n  }\n\n  /**\n   * @notice Used to deposit tokens into this Strategy\n   * @param token is the ERC20 token being deposited\n   * @param amount is the amount of token being deposited\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n   * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n   * @dev Note that the assumption is made that `amount` of `token` has already been transferred directly to this contract\n   * (as performed in the StrategyManager's deposit functions). In particular, setting the `underlyingToken` of this contract\n   * to be a fee-on-transfer token will break the assumption that the amount this contract *received* of the token is equal to\n   * the amount that was input when the transfer was performed (i.e. the amount transferred 'out' of the depositor's balance).\n   * @dev Note that any validation of `token` is done inside `_beforeDeposit`. This can be overridden if needed.\n   * @return newShares is the number of new shares issued at the current exchange ratio.\n   */\n  function deposit(\n    IERC20 token,\n    uint256 amount\n  ) external virtual override onlyWhenNotPaused(PAUSED_DEPOSITS) onlyStrategyManager returns (uint256 newShares) {\n    // call hook to allow for any pre-deposit logic\n    _beforeDeposit(token, amount);\n\n    // copy `totalShares` value to memory, prior to any change\n    uint256 priorTotalShares = totalShares;\n\n    /**\n     * @notice calculation of newShares *mirrors* `underlyingToShares(amount)`, but is different since the balance of `underlyingToken`\n     * has already been increased due to the `strategyManager` transferring tokens to this strategy prior to calling this function\n     */\n    // account for virtual shares and balance\n    uint256 virtualShareAmount = priorTotalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate the prior virtual balance to account for the tokens that were already transferred to this contract\n    uint256 virtualPriorTokenBalance = virtualTokenBalance - amount;\n    newShares = (amount * virtualShareAmount) / virtualPriorTokenBalance;\n\n    // extra check for correctness / against edge case where share rate can be massively inflated as a 'griefing' sort of attack\n    require(newShares != 0, 'StrategyBase.deposit: newShares cannot be zero');\n\n    // update total share amount to account for deposit\n    totalShares = (priorTotalShares + newShares);\n    return newShares;\n  }\n\n  /**\n   * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n   * @param recipient is the address to receive the withdrawn funds\n   * @param token is the ERC20 token being transferred out\n   * @param amountShares is the amount of shares being withdrawn\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n   * other functions, and individual share balances are recorded in the strategyManager as well.\n   * @dev Note that any validation of `token` is done inside `_beforeWithdrawal`. This can be overridden if needed.\n   */\n  function withdraw(\n    address recipient,\n    IERC20 token,\n    uint256 amountShares\n  ) external virtual override onlyWhenNotPaused(PAUSED_WITHDRAWALS) onlyStrategyManager {\n    // call hook to allow for any pre-withdrawal logic\n    _beforeWithdrawal(recipient, token, amountShares);\n\n    // copy `totalShares` value to memory, prior to any change\n    uint256 priorTotalShares = totalShares;\n\n    require(amountShares <= priorTotalShares, 'StrategyBase.withdraw: amountShares must be less than or equal to totalShares');\n\n    // account for virtual shares and balance\n    uint256 virtualPriorTotalShares = priorTotalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    uint256 amountToSend = (virtualTokenBalance * amountShares) / virtualPriorTotalShares;\n\n    // Decrease the `totalShares` value to reflect the withdrawal\n    totalShares = priorTotalShares - amountShares;\n\n    _afterWithdrawal(recipient, token, amountToSend);\n  }\n\n  /**\n   * @notice Called in the external `deposit` function, before any logic is executed. Expected to be overridden if strategies want such logic.\n   * @param token The token being deposited\n   * @param amount The amount of `token` being deposited\n   */\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual {\n    require(token == underlyingToken, 'StrategyBase.deposit: Can only deposit underlyingToken');\n  }\n\n  /**\n   * @notice Called in the external `withdraw` function, before any logic is executed.  Expected to be overridden if strategies want such logic.\n   * @param recipient The address that will receive the withdrawn tokens\n   * @param token The token being withdrawn\n   * @param amountShares The amount of shares being withdrawn\n   */\n  function _beforeWithdrawal(address recipient, IERC20 token, uint256 amountShares) internal virtual {\n    require(token == underlyingToken, 'StrategyBase.withdraw: Can only withdraw the strategy token');\n  }\n\n  /**\n   * @notice Transfers tokens to the recipient after a withdrawal is processed\n   * @dev Called in the external `withdraw` function after all logic is executed\n   * @param recipient The destination of the tokens\n   * @param token The ERC20 being transferred\n   * @param amountToSend The amount of `token` to transfer\n   */\n  function _afterWithdrawal(address recipient, IERC20 token, uint256 amountToSend) internal virtual {\n    token.safeTransfer(recipient, amountToSend);\n  }\n\n  /**\n   * @notice Currently returns a brief string explaining the strategy's goal & purpose, but for more complex\n   * strategies, may be a link to metadata that explains in more detail.\n   */\n  function explanation() external pure virtual override returns (string memory) {\n    return 'Base Strategy implementation to inherit from for more complex implementations';\n  }\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlyingView(uint256 amountShares) public view virtual override returns (uint256) {\n    // account for virtual shares and balance\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    return (virtualTokenBalance * amountShares) / virtualTotalShares;\n  }\n\n  /**\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function sharesToUnderlying(uint256 amountShares) public view virtual override returns (uint256) {\n    return sharesToUnderlyingView(amountShares);\n  }\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToSharesView(uint256 amountUnderlying) public view virtual returns (uint256) {\n    // account for virtual shares and balance\n    uint256 virtualTotalShares = totalShares + SHARES_OFFSET;\n    uint256 virtualTokenBalance = _tokenBalance() + BALANCE_OFFSET;\n    // calculate ratio based on virtual shares and balance, being careful to multiply before dividing\n    return (amountUnderlying * virtualTotalShares) / virtualTokenBalance;\n  }\n\n  /**\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n   * @return The amount of shares corresponding to the input `amountUnderlying`\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\n   */\n  function underlyingToShares(uint256 amountUnderlying) external view virtual returns (uint256) {\n    return underlyingToSharesView(amountUnderlying);\n  }\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\n   */\n  function userUnderlyingView(address user) external view virtual returns (uint256) {\n    return sharesToUnderlyingView(shares(user));\n  }\n\n  /**\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n   * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\n   */\n  function userUnderlying(address user) external virtual returns (uint256) {\n    return sharesToUnderlying(shares(user));\n  }\n\n  /**\n   * @notice convenience function for fetching the current total shares of `user` in this strategy, by\n   * querying the `strategyManager` contract\n   */\n  function shares(address user) public view virtual returns (uint256) {\n    return strategyManager.stakerStrategyShares(user, IStrategy(address(this)));\n  }\n\n  /// @notice Internal function used to fetch this contract's current balance of `underlyingToken`.\n  // slither-disable-next-line dead-code\n  function _tokenBalance() internal view virtual returns (uint256) {\n    return underlyingToken.balanceOf(address(this));\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    },
    "contracts/strategies/StrategyBaseTVLLimits.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.20;\n\nimport './StrategyBase.sol';\n\n/**\n * @title A Strategy implementation inheriting from `StrategyBase` that limits the total amount of deposits it will accept.\n * @dev Note that this implementation still converts between any amount of shares or underlying tokens in its view functions;\n * these functions purposefully do not take the TVL limit into account.\n */\ncontract StrategyBaseTVLLimits is StrategyBase {\n  /// The maximum deposit (in underlyingToken) that this strategy will accept per deposit\n  uint256 public maxPerDeposit;\n\n  /// The maximum deposits (in underlyingToken) that this strategy will hold\n  uint256 public maxTotalDeposits;\n\n  /// @notice Emitted when `maxPerDeposit` value is updated from `previousValue` to `newValue`\n  event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue);\n\n  /// @notice Emitted when `maxTotalDeposits` value is updated from `previousValue` to `newValue`\n  event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue);\n\n  /// solhint-disable-next-line no-empty-blocks\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(IStrategyManager _strategyManager) StrategyBase(_strategyManager) {}\n\n  function initialize(\n    uint256 _maxPerDeposit,\n    uint256 _maxTotalDeposits,\n    IERC20 _underlyingToken,\n    IPauserRegistry _pauserRegistry\n  ) public virtual initializer {\n    _setTVLLimits(_maxPerDeposit, _maxTotalDeposits);\n    _initializeStrategyBase(_underlyingToken, _pauserRegistry);\n  }\n\n  /**\n   * @notice Sets the maximum deposits (in underlyingToken) that this strategy will hold and accept per deposit\n   * @param newMaxTotalDeposits The new maximum deposits\n   * @dev Callable only by the unpauser of this contract\n   * @dev We note that there is a potential race condition between a call to this function that lowers either or both of these limits and call(s)\n   * to `deposit`, that may result in some calls to `deposit` reverting.\n   */\n  function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) external onlyUnpauser {\n    _setTVLLimits(newMaxPerDeposit, newMaxTotalDeposits);\n  }\n\n  /// @notice Simple getter function that returns the current values of `maxPerDeposit` and `maxTotalDeposits`.\n  function getTVLLimits() external view returns (uint256, uint256) {\n    return (maxPerDeposit, maxTotalDeposits);\n  }\n\n  /// @notice Internal setter for TVL limits\n  function _setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits) internal {\n    emit MaxPerDepositUpdated(maxPerDeposit, newMaxPerDeposit);\n    emit MaxTotalDepositsUpdated(maxTotalDeposits, newMaxTotalDeposits);\n    require(newMaxPerDeposit <= newMaxTotalDeposits, 'StrategyBaseTVLLimits._setTVLLimits: maxPerDeposit exceeds maxTotalDeposits');\n    maxPerDeposit = newMaxPerDeposit;\n    maxTotalDeposits = newMaxTotalDeposits;\n  }\n\n  /**\n   * @notice Called in the external `deposit` function, before any logic is executed. Makes sure that deposits don't exceed configured maximum.\n   * @dev Unused token param is the token being deposited. This is already checked in the `deposit` function.\n   * @dev Note that the `maxTotalDeposits` is purely checked against the current `_tokenBalance()`, since by this point in the deposit flow, the\n   * tokens should have already been transferred to this Strategy by the StrategyManager\n   * @dev We note as well that this makes it possible for various race conditions to occur:\n   * a) multiple simultaneous calls to `deposit` may result in some of these calls reverting due to `maxTotalDeposits` being reached.\n   * b) transferring funds directly to this Strategy (although not generally in someone's economic self interest) in order to reach `maxTotalDeposits`\n   * is a route by which someone can cause calls to `deposit` to revert.\n   * c) increases in the token balance of this contract through other effects – including token rebasing – may cause similar issues to (a) and (b).\n   * @param amount The amount of `token` being deposited\n   */\n  function _beforeDeposit(IERC20 token, uint256 amount) internal virtual override {\n    require(amount <= maxPerDeposit, 'StrategyBaseTVLLimits: max per deposit exceeded');\n    require(_tokenBalance() <= maxTotalDeposits, 'StrategyBaseTVLLimits: max deposits exceeded');\n\n    super._beforeDeposit(token, amount);\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}