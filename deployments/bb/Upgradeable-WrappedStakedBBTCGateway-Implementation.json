{
  "address": "0x2F3560fD19D2693Cb340C07f4f8aF6B036210816",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStakedBBTC",
          "name": "_stBBTC",
          "type": "address"
        },
        {
          "internalType": "contract IStrategyManagerV2",
          "name": "_strategyManager",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationManager",
          "name": "_delegationManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProvidedRewardTooHigh",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "previousStrategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "SetStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentPool",
          "type": "address"
        }
      ],
      "name": "UpdateLenBPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "UpdateOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "UpdateRewardsDuration",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositStakedBBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "depositStakedBBTCToLenB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedBBTCAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "_newPool",
          "type": "address"
        }
      ],
      "name": "updateLenBPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "updateRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "staker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegatedTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "contract IStrategy[]",
              "name": "strategies",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IDelegationManager.Withdrawal[]",
          "name": "withdrawals",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[][]",
          "name": "tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "middlewareTimesIndexs",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "receiveAsTokens",
          "type": "bool[]"
        }
      ],
      "name": "withdrawStakedBBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStakedBBTCFromLenB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x35ed6609f46274769191de1ff7d83d7db0f9afafb857c42cb5d2fac7ca0b2794",
  "receipt": {
    "to": null,
    "from": "0xB2d72888E96ED3027A4bed955f4dD144FcC4C2e3",
    "contractAddress": "0x2F3560fD19D2693Cb340C07f4f8aF6B036210816",
    "transactionIndex": 0,
    "gasUsed": "3431295",
    "logsBloom": "0x
    "blockHash": "0x113b5afa534910629fa56b051a3feda4c17c5654d857ae8d7d3dcfa3df5f4b98",
    "transactionHash": "0x35ed6609f46274769191de1ff7d83d7db0f9afafb857c42cb5d2fac7ca0b2794",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1830765,
        "transactionHash": "0x35ed6609f46274769191de1ff7d83d7db0f9afafb857c42cb5d2fac7ca0b2794",
        "address": "0x2F3560fD19D2693Cb340C07f4f8aF6B036210816",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x113b5afa534910629fa56b051a3feda4c17c5654d857ae8d7d3dcfa3df5f4b98"
      }
    ],
    "blockNumber": 1830765,
    "cumulativeGasUsed": "3431295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7F150c293c97172C75983BD8ac084c187107eA19",
    "0x00B67E4805138325ce871D5E27DC15f994681bC1",
    "0x230B442c0802fE83DAf3d2656aaDFD16ca1E1F66"
  ],
  "numDeployments": 1,
  "solcInputHash": "c2db32cc2e204bc84fcdc6e2021388a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStakedBBTC\",\"name\":\"_stBBTC\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManagerV2\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProvidedRewardTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"previousStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentPool\",\"type\":\"address\"}],\"name\":\"UpdateLenBPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardsDuration\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStakedBBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositStakedBBTCToLenB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedBBTCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"updateLenBPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"middlewareTimesIndexs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"receiveAsTokens\",\"type\":\"bool[]\"}],\"name\":\"withdrawStakedBBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakedBBTCFromLenB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ProvidedRewardTooHigh()\":[{\"details\":\"This error is thrown when the reward provided is too high and could cause an overflow. It ensures that the reward rate stays within the right range.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RewardAdded(uint256)\":{\"details\":\"This event is emitted when a new reward is added to the contract. It includes the amount of the reward that was added.\"},\"RewardPaid(address,uint256)\":{\"details\":\"This event is emitted when a user's reward is paid out. It includes the address of the user and the amount of the reward that was paid.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"depositStakedBBTCToLenB(uint256,address,uint16)\":{\"details\":\"deposits wstBBTC into the reserve, using stBBTC. A corresponding amount of the overlying asset (aTokens) is minted.\",\"params\":{\"onBehalfOf\":\"address of the user who will receive the aTokens representing the deposit\",\"referralCode\":\"integrators are assigned a referral code and can potentially receive rewards.*\"}},\"earned(address)\":{\"details\":\"This function calculates the earned rewards by multiplying the balance of the account with the difference between the reward per token and the reward per token paid to the account.\",\"params\":{\"account\":\"The account to calculate the earned rewards for.\"},\"returns\":{\"_0\":\"The calculated earned rewards for the account.\"}},\"emergencyTokenTransfer(address,address,uint256)\":{\"details\":\"transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\",\"params\":{\"amount\":\"amount to send\",\"to\":\"recipient of the transfer\",\"token\":\"token to transfer\"}},\"getReward()\":{\"details\":\"It updates the reward for the user before transferring.\"},\"getRewardForDuration()\":{\"details\":\"This is used to get the total reward that will be distributed over the entire duration.\",\"returns\":{\"_0\":\"The total reward for the duration.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStakedBBTCAddress()\":{\"details\":\"Get stBBTC address used by WrappedStakedBBTCGateway\"},\"getStrategyAddress()\":{\"details\":\"Get stBBTC strategy address used by WrappedStakedBBTCGateway\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lastTimeRewardApplicable()\":{\"details\":\"This function checks if the current block timestamp is less than the period finish time. If it is, it returns the block timestamp, otherwise it returns the period finish time. This is used to ensure that rewards are only applicable within the specified period.\",\"returns\":{\"_0\":\"The last time the reward is applicable.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"notifyRewardAmount()\":{\"details\":\"It updates the reward rate and the finish period of the reward.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rewardPerToken()\":{\"details\":\"This function calculates the reward per token based on the total supply of tokens. This is used to distribute the rewards proportionally to the token holders.\",\"returns\":{\"_0\":\"The calculated reward per token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateLenBPool(address)\":{\"params\":{\"_newPool\":\"New LenB poll address\"}},\"withdrawStakedBBTCFromLenB(uint256)\":{\"details\":\"withdraws the wstBBTC _reserves of msg.sender.\",\"params\":{\"amount\":\"amount of aWstBBTC to withdraw and receive stBBTC\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"lastUpdateTime\":{\"details\":\"This is the timestamp of the last time the rewards were updated. It is used to calculate the reward per token and the earned rewards.\"},\"periodFinish\":{\"details\":\"This is the timestamp when the reward period will end. Rewards are only applicable within the period specified by this variable.\"},\"rewardPerTokenStored\":{\"details\":\"This is the stored value of the reward per token. It is used to calculate the reward per token and the earned rewards.\"},\"rewardRate\":{\"details\":\"This is the rate at which rewards are distributed. It is calculated based on the total reward and the duration of the reward period.\"},\"rewards\":{\"details\":\"This mapping stores the rewards for each user. It is updated whenever a user stakes or withdraws tokens, or gets their reward.\"},\"rewardsDuration\":{\"details\":\"This is the duration for which the rewards are applicable. The rewards are distributed over this period at the rate specified by rewardRate.\"},\"userRewardPerTokenPaid\":{\"details\":\"This mapping stores the reward per token paid to each user. It is used to calculate the earned rewards for each user.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ProvidedRewardTooHigh()\":[{\"notice\":\"Error thrown when the provided reward is too high.\"}]},\"events\":{\"RewardAdded(uint256)\":{\"notice\":\"Emitted when a reward is added.\"},\"RewardPaid(address,uint256)\":{\"notice\":\"Emitted when a reward is paid to a user.\"},\"SetStrategy(address,address)\":{\"notice\":\"Emitted when strategy config.\"},\"UpdateLenBPool(address,address)\":{\"notice\":\"Emitted when LenB pool config.\"},\"UpdateOperator(address,address)\":{\"notice\":\"Emitted when operator address updated.\"},\"UpdateRewardsDuration(uint256,uint256)\":{\"notice\":\"Emitted when rewards duration updated.\"}},\"kind\":\"user\",\"methods\":{\"earned(address)\":{\"notice\":\"Calculates the earned rewards for a given account.\"},\"getReward()\":{\"notice\":\"Allows a user to get their reward.\"},\"getRewardForDuration()\":{\"notice\":\"Calculates the reward for the entire duration.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Determines the last time the reward is applicable.\"},\"lastUpdateTime()\":{\"notice\":\"The last time the rewards were updated.\"},\"notifyRewardAmount()\":{\"notice\":\"Notifies the contract about the reward amount.\"},\"periodFinish()\":{\"notice\":\"The time when the reward period finishes.\"},\"rewardPerToken()\":{\"notice\":\"Calculates the reward per token.\"},\"rewardPerTokenStored()\":{\"notice\":\"The stored reward per token.\"},\"rewardRate()\":{\"notice\":\"The rate of the reward.\"},\"rewards(address)\":{\"notice\":\"The rewards for each user.\"},\"rewardsDuration()\":{\"notice\":\"The duration of the reward period.\"},\"updateLenBPool(address)\":{\"notice\":\"Called by owner to update the LenB Pool\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"The reward per token paid to each user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/WrappedStakedBBTCGatewayV2.sol\":\"WrappedStakedBBTCGatewayV2\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategy.sol';\\nimport './ISignatureUtils.sol';\\nimport './IStrategyManager.sol';\\n\\n/**\\n * @title DelegationManager\\n * @notice  This is the contract for delegation in Pell. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in Pell\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n  // @notice Struct used for storing information about a single operator who has registered with Pell\\n  struct OperatorDetails {\\n    // @notice address to receive the rewards that the operator earns via serving applications built on Pell.\\n    address earningsReceiver;\\n    /**\\n     * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n     * @dev Signature verification follows these rules:\\n     * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n     * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n     * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n     */\\n    address delegationApprover;\\n    /**\\n     * @notice A minimum delay -- enforced between:\\n     * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n     * and\\n     * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n     * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n     * then they are only allowed to either increase this value or keep it the same.\\n     */\\n    uint32 stakerOptOutWindow;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n   * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n   */\\n  struct StakerDelegation {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the staker's nonce\\n    uint256 nonce;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n   * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n   */\\n  struct DelegationApproval {\\n    // the staker who is delegating\\n    address staker;\\n    // the operator being delegated to\\n    address operator;\\n    // the operator's provided salt\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  /**\\n   * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n   * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n   * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n   */\\n  struct Withdrawal {\\n    // The address that originated the Withdrawal\\n    address staker;\\n    // The address that the staker was delegated to at the time that the Withdrawal was created\\n    address delegatedTo;\\n    // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n    address withdrawer;\\n    // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n    uint256 nonce;\\n    // Block timestamp when the Withdrawal was created\\n    uint32 startTimestamp;\\n    // Array of strategies that the Withdrawal contains\\n    IStrategy[] strategies;\\n    // Array containing the amount of shares in each Strategy in the `strategies` array\\n    uint256[] shares;\\n  }\\n\\n  struct QueuedWithdrawalParams {\\n    // Array of strategies that the QueuedWithdrawal contains\\n    IStrategy[] strategies;\\n    // Array containing the amount of shares in each Strategy in the `strategies` array\\n    uint256[] shares;\\n    // The address of the withdrawer\\n    address withdrawer;\\n  }\\n\\n  // @notice Emitted when a new operator registers in Pell and provides their OperatorDetails.\\n  event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n  /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n  event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n  /**\\n   * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n   * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n   */\\n  event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n  /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n  event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted when @param staker delegates to @param operator.\\n  event StakerDelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker undelegates from @param operator.\\n  event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n  /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n  event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n  /**\\n   * @notice Emitted when a new withdrawal is queued.\\n   * @param withdrawalRoot Is the hash of the `withdrawal`.\\n   * @param withdrawal Is the withdrawal itself.\\n   */\\n  event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n  /// @notice Emitted when a queued withdrawal is completed\\n  event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n  /// @notice Emitted when the `minWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event MinWithdrawalDelaySet(uint256 previousValue, uint256 newValue);\\n\\n  /// @notice Emitted when the `strategyWithdrawalDelay` variable is modified from `previousValue` to `newValue`.\\n  event StrategyWithdrawalDelaySet(IStrategy strategy, uint256 previousValue, uint256 newValue);\\n\\n  event UpdateWrappedTokenGateway(address previousGateway, address currentGateway);\\n\\n  /**\\n   * @notice Registers the caller as an operator in Pell.\\n   * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n   * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n   *\\n   * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function registerAsOperator(OperatorDetails calldata registeringOperatorDetails, string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Updates an operator's stored `OperatorDetails`.\\n   * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n   *\\n   * @dev The caller must have previously registered as an operator in Pell.\\n   * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n   */\\n  function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n  /**\\n   * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n   * @param metadataURI The URI for metadata associated with an operator\\n   * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n   */\\n  function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n  /**\\n   * @notice Caller delegates their stake to an operator.\\n   * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on Pell.\\n   * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n   * @param approverSalt A unique single use value tied to an individual signature.\\n   * @dev The approverSignatureAndExpiry is used in the event that:\\n   *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n   *                  AND\\n   *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n   *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n   * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateTo(address operator, SignatureWithExpiry memory approverSignatureAndExpiry, bytes32 approverSalt) external;\\n\\n  /**\\n   * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n   * @param staker The account delegating stake to an `operator` account\\n   * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on Pell.\\n   * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n   * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n   * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n   *\\n   * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n   * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n   * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n   * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n   * is the `msg.sender`, then approval is assumed.\\n   * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n   * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n   * in this case to save on complexity + gas costs\\n   */\\n  function delegateToBySignature(\\n    address staker,\\n    address operator,\\n    SignatureWithExpiry memory stakerSignatureAndExpiry,\\n    SignatureWithExpiry memory approverSignatureAndExpiry,\\n    bytes32 approverSalt\\n  ) external;\\n\\n  /**\\n   * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n   * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n   * @param staker The account to be undelegated.\\n   * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n   *\\n   * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n   * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n   * @dev Reverts if the `staker` is already undelegated.\\n   */\\n  function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n  /**\\n   * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n   * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n   * their operator.\\n   *\\n   * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n   */\\n  function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams) external returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n   * @param withdrawal The Withdrawal to complete.\\n   * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n   * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n   * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n   * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n   * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n   * will simply be transferred to the caller directly.\\n   * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n   * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n   * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n   * any other strategies, which will be transferred to the withdrawer.\\n   */\\n  function completeQueuedWithdrawal(\\n    Withdrawal calldata withdrawal,\\n    IERC20[] calldata tokens,\\n    uint256 middlewareTimesIndex,\\n    bool receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Array-ified version of `completeQueuedWithdrawal`.\\n   * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n   * @param withdrawals The Withdrawals to complete.\\n   * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n   * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n   * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n   * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n   */\\n  function completeQueuedWithdrawals(\\n    Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexes,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n\\n  /**\\n   * @notice Increases a staker's delegated share balance in a strategy.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param strategy The strategy in which to increase the delegated shares.\\n   * @param shares The number of shares to increase.\\n   *\\n   * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the StrategyManager or EigenPodManager.\\n   */\\n  function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /**\\n   * @notice Decreases a staker's delegated share balance in a strategy.\\n   * @param staker The address to increase the delegated shares for their operator.\\n   * @param strategy The strategy in which to decrease the delegated shares.\\n   * @param shares The number of shares to decrease.\\n   *\\n   * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n   * @dev Callable only by the StrategyManager or EigenPodManager.\\n   */\\n  function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /**\\n   * @notice returns the address of the operator that `staker` is delegated to.\\n   * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n   * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n   */\\n  function delegatedTo(address staker) external view returns (address);\\n\\n  /**\\n   * @notice Returns the OperatorDetails struct associated with an `operator`.\\n   */\\n  function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n  /*\\n   * @notice Returns the earnings receiver address for an operator\\n   */\\n  function earningsReceiver(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the delegationApprover account for an operator\\n   */\\n  function delegationApprover(address operator) external view returns (address);\\n\\n  /**\\n   * @notice Returns the stakerOptOutWindow for an operator\\n   */\\n  function stakerOptOutWindow(address operator) external view returns (uint256);\\n\\n  /**\\n   * @notice Given array of strategies, returns array of shares for the operator\\n   */\\n  function getOperatorShares(address operator, IStrategy[] memory strategies) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Given a list of strategies, return the minimum cooldown that must pass to withdraw\\n   * from all the inputted strategies. Return value is >= minWithdrawalDelay as this is the global min withdrawal delay.\\n   * @param strategies The strategies to check withdrawal delays for\\n   */\\n  function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n   * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n   * @dev By design, the following invariant should hold for each Strategy:\\n   * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n   * = sum (delegateable shares of all stakers delegated to the operator)\\n   */\\n  function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n   */\\n  function isDelegated(address staker) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true is an operator has previously registered for delegation.\\n   */\\n  function isOperator(address operator) external view returns (bool);\\n\\n  /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n  function stakerNonce(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n   * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n   * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n   */\\n  function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum cooldown that must pass\\n   * to withdraw a strategy is MAX(minWithdrawalDelay, strategyWithdrawalDelay[strategy])\\n   */\\n  function minWithdrawalDelay() external view returns (uint256);\\n\\n  /**\\n   * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Cooldown, and adjustable by this contract's owner,\\n   * up to a maximum of `MAX_WITHDRAWAL_DELAY`. Minimum value is 0 (i.e. no delay enforced).\\n   */\\n  function strategyWithdrawalDelay(IStrategy strategy) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n   * @param staker The signing staker\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateCurrentStakerDelegationDigestHash(address staker, address operator, uint256 expiry) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n   * @param staker The signing staker\\n   * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n   * @param operator The operator who is being delegated to\\n   * @param expiry The desired expiry time of the staker's signature\\n   */\\n  function calculateStakerDelegationDigestHash(\\n    address staker,\\n    uint256 _stakerNonce,\\n    address operator,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n   * @param staker The account delegating their stake\\n   * @param operator The account receiving delegated stake\\n   * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n   * @param approverSalt A unique and single use value associated with the approver signature.\\n   * @param expiry Time after which the approver's signature becomes invalid\\n   */\\n  function calculateDelegationApprovalDigestHash(\\n    address staker,\\n    address operator,\\n    address _delegationApprover,\\n    bytes32 approverSalt,\\n    uint256 expiry\\n  ) external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n  function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n  /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n  function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice Getter function for the current EIP-712 domain separator for this contract.\\n   *\\n   * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n   * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n   * for more detailed information please read EIP-712.\\n   */\\n  function domainSeparator() external view returns (bytes32);\\n\\n  /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n  /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n  function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n  /// @notice Returns the keccak256 hash of `withdrawal`.\\n  function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xeed707fd0cb7f87ac44db8719f98a42e094f2f97af99e61ed9ba1b7fd6b0455c\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IPool\\n */\\ninterface IPool {\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0x015f3990255628eeecce6b564b8da3b1da82382345a6dad3371c2f916c602537\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\n/**\\n * @title The interface for common signature utilities.\\n */\\ninterface ISignatureUtils {\\n  // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n\\n  // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n  struct SignatureWithSaltAndExpiry {\\n    // the signature itself, formatted as a single bytes object\\n    bytes signature;\\n    // the salt used to generate the signature\\n    bytes32 salt;\\n    // the expiration timestamp (UTC) of the signature\\n    uint256 expiry;\\n  }\\n}\\n\",\"keccak256\":\"0xd2f901c14d08037588427527905fafbe1610b68a38d62c93925ea0f258f226a4\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategyManager.sol';\\nimport './IDelegationManager.sol';\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for Pell.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n  // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n  struct MiddlewareTimes {\\n    // The update timestamp for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n    uint32 stalestUpdateTimestamp;\\n    // The latest 'serveUntilTimestamp' from all of the middleware that the operator is serving\\n    uint32 latestServeUntilTimestamp;\\n  }\\n\\n  // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n  struct MiddlewareDetails {\\n    // the timestamp at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n    uint32 registrationMayBeginAtTimestamp;\\n    // the timestamp before which the contract is allowed to slash the user\\n    uint32 contractCanSlashOperatorUntilTimestamp;\\n    // the timestamp at which the middleware's view of the operator's stake was most recently updated\\n    uint32 latestUpdateTimestamp;\\n  }\\n\\n  /// @notice Emitted when a middleware times is added to `operator`'s array.\\n  event MiddlewareTimesAdded(address operator, uint256 index, uint32 stalestUpdateTimestamp, uint32 latestServeUntilTimestamp);\\n\\n  /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n  event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n  /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilTimestamp`.\\n  event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilTimestamp);\\n\\n  /**\\n   * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n   * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n   */\\n  event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n  /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within Pell.\\n  event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n  /**\\n   * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n   * @dev Typically, this function must be called prior to registering for a middleware.\\n   */\\n  function optIntoSlashing(address contractAddress) external;\\n\\n  /**\\n   * @notice Used for 'slashing' a certain operator.\\n   * @param toBeFrozen The operator to be frozen.\\n   * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n   * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n   */\\n  function freezeOperator(address toBeFrozen) external;\\n\\n  /**\\n   * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n   * @dev Callable only by the contract owner (i.e. governance).\\n   */\\n  function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev adds the middleware's slashing contract to the operator's linked list\\n   */\\n  function recordFirstStakeUpdate(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n   *         to make sure the operator's stake at updateTimestamp is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param updateTimestamp the timestamp for which the stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at updateTimestamp is slashable\\n   * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n   * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n   *      but it is anticipated to be rare and not detrimental.\\n   */\\n  function recordStakeUpdate(address operator, uint32 updateTimestamp, uint32 serveUntilTimestamp, uint256 insertAfter) external;\\n\\n  /**\\n   * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n   *         is slashable until serveUntil\\n   * @param operator the operator whose stake update is being recorded\\n   * @param serveUntilTimestamp the timestamp until which the operator's stake at the current timestamp is slashable\\n   * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n   * slash `operator` once `serveUntil` is reached\\n   */\\n  function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilTimestamp) external;\\n\\n  /// @notice The StrategyManager contract of Pell\\n  function strategyManager() external view returns (IStrategyManager);\\n\\n  /// @notice The DelegationManager contract of Pell\\n  function delegation() external view returns (IDelegationManager);\\n\\n  /**\\n   * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n   * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n   * and the staker's status is reset (to 'unfrozen').\\n   * @param staker The staker of interest.\\n   * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n   * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n   */\\n  function isFrozen(address staker) external view returns (bool);\\n\\n  /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n  function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n  /// @notice Returns the timestamp until which `serviceContract` is allowed to slash the `operator`.\\n  function contractCanSlashOperatorUntilTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice Returns the timestamp at which the `serviceContract` last updated its view of the `operator`'s stake\\n  function latestUpdateTimestamp(address operator, address serviceContract) external view returns (uint32);\\n\\n  /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n  function getCorrectValueForInsertAfter(address operator, uint32 updateTimestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartTimestamp`, with `middlewareTimesIndex` used\\n   * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n   * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n   * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartTimestamp`, *or* in the event\\n   * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n   * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n   * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartTimestamp`.\\n   * @param withdrawalStartTimestamp The timestamp at which the withdrawal was initiated.\\n   * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n   * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n   */\\n  function canWithdraw(address operator, uint32 withdrawalStartTimestamp, uint256 middlewareTimesIndex) external returns (bool);\\n\\n  /**\\n   * operator =>\\n   *  [\\n   *      (\\n   *          the least recent update timestamp of all of the middlewares it's serving/served,\\n   *          latest time that the stake bonded at that update needed to serve until\\n   *      )\\n   *  ]\\n   */\\n  function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n  function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateTimestamp`.\\n  function getMiddlewareTimesIndexStalestUpdateTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n  function getMiddlewareTimesIndexServeUntilTimestamp(address operator, uint32 index) external view returns (uint32);\\n\\n  /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n  function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n  /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n  function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x4181ddb2142bcf6075a7d69fcf56bcab8420a8ac4d75631cc5b4550a041b9379\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IStakedBBTC.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\ninterface IStakedBBTC {\\n  function lockOfInLocker(address account, address locker) external view returns (uint256);\\n\\n  function lockOf(address account) external view returns (uint256);\\n\\n  function lock(address account, uint256 amount) external;\\n\\n  function unlock(address account, uint256 amount) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function getReward() external;\\n}\\n\",\"keccak256\":\"0xcbdec3d71541216fc306ab384bb471a88ca1ae392e4a657f83e28c29b3a82b9b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n  /**\\n   * @notice Used to deposit tokens into this Strategy\\n   * @param token is the ERC20 token being deposited\\n   * @param amount is the amount of token being deposited\\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n   * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n   * @return newShares is the number of new shares issued at the current exchange ratio.\\n   */\\n  function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n   * @param recipient is the address to receive the withdrawn funds\\n   * @param token is the ERC20 token being transferred out\\n   * @param amountShares is the amount of shares being withdrawn\\n   * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n   * other functions, and individual share balances are recorded in the strategyManager as well.\\n   */\\n  function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n   * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n   * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n   * @return The amount of underlying tokens corresponding to the input `amountShares`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n   */\\n  function userUnderlying(address user) external returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n   * querying the `strategyManager` contract\\n   */\\n  function shares(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n   * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n   * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n  /**\\n   * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n   * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n   * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n   * @return The amount of shares corresponding to the input `amountUnderlying`\\n   * @dev Implementation for these functions in particular may vary significantly for different strategies\\n   */\\n  function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n  /**\\n   * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n   * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n   */\\n  function userUnderlyingView(address user) external view returns (uint256);\\n\\n  /// @notice The underlying token for shares in this Strategy\\n  function underlyingToken() external view returns (IERC20);\\n\\n  /// @notice The total number of extant shares in this Strategy\\n  function totalShares() external view returns (uint256);\\n\\n  /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n  function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3435d819a62bf13c8f41498f27fb2117adb2095890b75b86005af1ed238a78bb\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategy.sol';\\nimport './ISlasher.sol';\\nimport './IDelegationManager.sol';\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into Pell.\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n  /**\\n   * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n   * @param staker Is the staker who is depositing funds into Pell.\\n   * @param strategy Is the strategy that `staker` has deposited into.\\n   * @param token Is the token that `staker` deposited.\\n   * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n   */\\n  event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\\n\\n  /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\\n  event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\\n\\n  /// @notice Emitted when the `strategyWhitelister` is changed\\n  event StrategyWhitelisterChanged(address previousAddress, address newAddress);\\n\\n  /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n  event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n  /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n  event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n   * who must sign off on the action.\\n   * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n   * purely to help one address deposit 'for' another.\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @param staker the staker that the deposited assets will be credited to\\n   * @param expiry the timestamp at which the signature expires\\n   * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n   * following EIP-1271 if the `staker` is a contract\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n   * targeting stakers who may be attempting to undelegate.\\n   * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\\n   *\\n   *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n   */\\n  function depositIntoStrategyWithSignature(\\n    IStrategy strategy,\\n    IERC20 token,\\n    uint256 amount,\\n    address staker,\\n    uint256 expiry,\\n    bytes memory signature\\n  ) external returns (uint256 shares);\\n\\n  /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n  function removeShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n  function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\\n\\n  /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n  function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\\n\\n  /// @notice Returns the current shares of `user` in `strategy`\\n  function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Get all details on the staker's deposits and corresponding shares\\n   * @return (staker's strategies, shares in these strategies)\\n   */\\n  function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n  /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n  function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n  /**\\n   * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n   * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n   * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\\n   */\\n  function addStrategiesToDepositWhitelist(\\n    IStrategy[] calldata strategiesToWhitelist,\\n    bool[] calldata thirdPartyTransfersForbiddenValues\\n  ) external;\\n\\n  /**\\n   * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n   * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n   */\\n  function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\\n\\n  /// @notice Returns the single, central Delegation contract of Pell\\n  function delegation() external view returns (IDelegationManager);\\n\\n  /// @notice Returns the single, central Slasher contract of Pell\\n  function slasher() external view returns (ISlasher);\\n\\n  /// @notice Returns the address of the `strategyWhitelister`\\n  function strategyWhitelister() external view returns (address);\\n\\n  /**\\n   * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\\n   * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\\n   */\\n  function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fcb477f8dd489fe7acacaca7b170f4e56b3ef86f6b632fe953f28777610a4b0\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IStrategyManagerV2.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport './IStrategy.sol';\\nimport './ISlasher.sol';\\nimport './IDelegationManager.sol';\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into Pell.\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManagerV2 {\\n  /**\\n   * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n   * @param staker Staker address\\n   * @param strategy is the specified strategy where deposit is to be made,\\n   * @param token is the denomination in which the deposit is to be made,\\n   * @param amount is the amount of token to be deposited in the strategy by the staker\\n   * @return shares The amount of new shares in the `strategy` created as part of the action.\\n   * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n   * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n   *\\n   * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n   *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n   */\\n  function depositIntoStrategyWithStaker(\\n    address staker,\\n    IStrategy strategy,\\n    IERC20 token,\\n    uint256 amount\\n  ) external returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0xc266ef12959be73b9c9542179f1842cd39e42360bf140217e1d57a8dd9be793c\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IWrappedStakedBBTCGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\n\\ninterface IWrappedStakedBBTCGateway {\\n  /// @notice Emitted when a reward is added.\\n  /// @dev This event is emitted when a new reward is added to the contract.\\n  /// It includes the amount of the reward that was added.\\n  event RewardAdded(uint256 reward);\\n  /// @notice Emitted when a reward is paid to a user.\\n  /// @dev This event is emitted when a user's reward is paid out.\\n  /// It includes the address of the user and the amount of the reward that was paid.\\n  event RewardPaid(address indexed user, uint256 reward);\\n  /// @notice Emitted when operator address updated.\\n  event UpdateOperator(address previousOperator, address newOperator);\\n  /// @notice Emitted when rewards duration updated.\\n  event UpdateRewardsDuration(uint256 previousDuration, uint256 newDuration);\\n  /// @notice Emitted when strategy config.\\n  event SetStrategy(IStrategy previousStrategy, IStrategy newStrategy);\\n\\n  /// @notice Error thrown when the provided reward is too high.\\n  /// @dev This error is thrown when the reward provided is too high and could cause an overflow.\\n  /// It ensures that the reward rate stays within the right range.\\n  error ProvidedRewardTooHigh();\\n\\n  function depositStakedBBTC(uint256 amount) external;\\n\\n  function withdrawStakedBBTC(\\n    IDelegationManager.Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexs,\\n    bool[] calldata receiveAsTokens\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc18ef2f9f5339c67ffa16b942a61bb3c7139d06c70a9a9387cbea559cb8964d0\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IWrappedStakedBBTCGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {IWrappedStakedBBTCGateway} from './IWrappedStakedBBTCGateway.sol';\\n\\ninterface IWrappedStakedBBTCGatewayV2 is IWrappedStakedBBTCGateway {\\n  /// @notice Emitted when LenB pool config.\\n  event UpdateLenBPool(address previousPool, address currentPool);\\n\\n  function depositStakedBBTCToLenB(uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  function withdrawStakedBBTCFromLenB(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb3e8eb7895d45199c3c14b6a23776b9d7b99f959f41c758f010ab081e380f32a\",\"license\":\"AGPL-3.0\"},\"contracts/periphery/WrappedStakedBBTCGatewayV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport {ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {IStakedBBTC} from '../interfaces/IStakedBBTC.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IStrategyManagerV2} from '../interfaces/IStrategyManagerV2.sol';\\nimport {IDelegationManager} from '../interfaces/IDelegationManager.sol';\\nimport {IWrappedStakedBBTCGatewayV2} from '../interfaces/IWrappedStakedBBTCGatewayV2.sol';\\nimport {IPool} from '../interfaces/IPool.sol';\\n\\ncontract WrappedStakedBBTCGatewayV2 is\\n  Initializable,\\n  ERC20Upgradeable,\\n  OwnableUpgradeable,\\n  AccessControlUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  IWrappedStakedBBTCGatewayV2\\n{\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');\\n\\n  IStakedBBTC internal immutable stBBTC;\\n  IStrategyManagerV2 internal immutable strategyManager;\\n  IDelegationManager internal immutable delegationManager;\\n  IStrategy internal strategy;\\n  mapping(address => uint256) internal _balancesOfStBBTC;\\n\\n  /// @notice The time when the reward period finishes.\\n  /// @dev This is the timestamp when the reward period will end.\\n  /// Rewards are only applicable within the period specified by this variable.\\n  uint256 public periodFinish;\\n  /// @notice The rate of the reward.\\n  /// @dev This is the rate at which rewards are distributed.\\n  /// It is calculated based on the total reward and the duration of the reward period.\\n  uint256 public rewardRate;\\n  /// @notice The duration of the reward period.\\n  /// @dev This is the duration for which the rewards are applicable.\\n  /// The rewards are distributed over this period at the rate specified by rewardRate.\\n  uint256 public rewardsDuration;\\n  /// @notice The last time the rewards were updated.\\n  /// @dev This is the timestamp of the last time the rewards were updated.\\n  /// It is used to calculate the reward per token and the earned rewards.\\n  uint256 public lastUpdateTime;\\n  /// @notice The stored reward per token.\\n  /// @dev This is the stored value of the reward per token.\\n  /// It is used to calculate the reward per token and the earned rewards.\\n  uint256 public rewardPerTokenStored;\\n  /// @notice The reward per token paid to each user.\\n  /// @dev This mapping stores the reward per token paid to each user.\\n  /// It is used to calculate the earned rewards for each user.\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  /// @notice The rewards for each user.\\n  /// @dev This mapping stores the rewards for each user.\\n  /// It is updated whenever a user stakes or withdraws tokens, or gets their reward.\\n  mapping(address => uint256) public rewards;\\n\\n  IPool internal POOL;\\n\\n  /// @notice Modifier to update the reward for a given account.\\n  /// @dev This modifier calls the _updateReward function with the provided account as argument.\\n  /// It is used before functions that need to update the reward for a user.\\n  modifier updateReward(address account) {\\n    _updateReward(account);\\n    _;\\n  }\\n\\n  constructor(IStakedBBTC _stBBTC, IStrategyManagerV2 _strategyManager, IDelegationManager _delegationManager) {\\n    stBBTC = _stBBTC;\\n    strategyManager = _strategyManager;\\n    delegationManager = _delegationManager;\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _owner, uint256 _rewardsDuration) external initializer {\\n    rewardsDuration = _rewardsDuration;\\n    __ERC20_init('Wrapped Staked BBTC', 'wstBBTC');\\n    __ReentrancyGuard_init();\\n    _transferOwnership(_owner);\\n    _approve(address(this), address(strategyManager), type(uint256).max);\\n  }\\n\\n  function depositStakedBBTC(uint256 amount) external virtual override nonReentrant updateReward(msg.sender) {\\n    IERC20(address(stBBTC)).safeTransferFrom(msg.sender, address(this), amount);\\n    _mint(address(this), amount);\\n    _balancesOfStBBTC[msg.sender] += amount;\\n    strategyManager.depositIntoStrategyWithStaker(msg.sender, strategy, IERC20(address(this)), amount);\\n  }\\n\\n  function withdrawStakedBBTC(\\n    IDelegationManager.Withdrawal[] calldata withdrawals,\\n    IERC20[][] calldata tokens,\\n    uint256[] calldata middlewareTimesIndexs,\\n    bool[] calldata receiveAsTokens\\n  ) external virtual override nonReentrant updateReward(msg.sender) {\\n    for (uint256 i = 0; i < withdrawals.length; i++) {\\n      require(withdrawals[i].staker == msg.sender, 'Withdrawer must be staker');\\n      for (uint256 j = 0; j < withdrawals[i].strategies.length; j++) {\\n        require(withdrawals[i].strategies[j] == strategy, 'Only support stBBTC token strategy');\\n      }\\n    }\\n    uint256 beforeBalance = balanceOf(address(this));\\n    delegationManager.completeQueuedWithdrawals(withdrawals, tokens, middlewareTimesIndexs, receiveAsTokens);\\n    uint256 afterBalance = balanceOf(address(this));\\n    uint256 amountToWithdraw = afterBalance - beforeBalance;\\n    _burn(address(this), amountToWithdraw);\\n    _balancesOfStBBTC[msg.sender] -= amountToWithdraw;\\n    IERC20(address(stBBTC)).safeTransfer(msg.sender, amountToWithdraw);\\n  }\\n\\n  /**\\n   * @dev deposits wstBBTC into the reserve, using stBBTC. A corresponding amount of the overlying asset (aTokens)\\n   * is minted.\\n   * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\\n   **/\\n  function depositStakedBBTCToLenB(\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external virtual override nonReentrant updateReward(msg.sender) {\\n    IERC20(address(stBBTC)).safeTransferFrom(msg.sender, address(this), amount);\\n    _mint(address(this), amount);\\n    _balancesOfStBBTC[msg.sender] += amount;\\n    POOL.supply(address(this), amount, onBehalfOf, referralCode);\\n  }\\n\\n  /**\\n   * @dev withdraws the wstBBTC _reserves of msg.sender.\\n   * @param amount amount of aWstBBTC to withdraw and receive stBBTC\\n   */\\n  function withdrawStakedBBTCFromLenB(uint256 amount) external virtual override nonReentrant updateReward(msg.sender) {\\n    IERC20 aWstBBTC = IERC20(POOL.getReserveData(address(this)).aTokenAddress);\\n    uint256 userBalance = aWstBBTC.balanceOf(msg.sender);\\n    uint256 amountToWithdraw = amount;\\n\\n    // if amount is equal to uint(-1), the user wants to redeem everything\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = userBalance;\\n    }\\n    aWstBBTC.transferFrom(msg.sender, address(this), amountToWithdraw);\\n    POOL.withdraw(address(this), amountToWithdraw, address(this));\\n    _burn(address(this), amountToWithdraw);\\n    _balancesOfStBBTC[msg.sender] -= amountToWithdraw;\\n    IERC20(address(stBBTC)).safeTransfer(msg.sender, amountToWithdraw);\\n  }\\n\\n  /// @notice Allows a user to get their reward.\\n  /// @dev It updates the reward for the user before transferring.\\n  function getReward() public nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      Address.sendValue(payable(msg.sender), reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  /// @notice Notifies the contract about the reward amount.\\n  /// @dev It updates the reward rate and the finish period of the reward.\\n  function notifyRewardAmount() external payable onlyRole(OPERATOR_ROLE) updateReward(address(0)) {\\n    uint256 beforeBalance = address(this).balance;\\n    stBBTC.getReward();\\n    uint256 afterBalance = address(this).balance;\\n    uint256 reward = afterBalance - beforeBalance;\\n    if (msg.value != 0) {\\n      reward += msg.value;\\n    }\\n\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward / rewardsDuration;\\n    } else {\\n      uint256 remaining = periodFinish - block.timestamp;\\n      uint256 leftover = remaining * rewardRate;\\n      rewardRate = (reward + leftover) / rewardsDuration;\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    if (rewardRate > afterBalance / rewardsDuration) {\\n      revert ProvidedRewardTooHigh();\\n    }\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp + rewardsDuration;\\n    emit RewardAdded(reward);\\n  }\\n\\n  /// @notice Determines the last time the reward is applicable.\\n  /// @dev This function checks if the current block timestamp is less than the period finish time.\\n  /// If it is, it returns the block timestamp, otherwise it returns the period finish time.\\n  /// This is used to ensure that rewards are only applicable within the specified period.\\n  /// @return The last time the reward is applicable.\\n  function lastTimeRewardApplicable() public view returns (uint256) {\\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n  }\\n\\n  /// @notice Calculates the reward per token.\\n  /// @dev This function calculates the reward per token based on the total supply of tokens.\\n  /// This is used to distribute the rewards proportionally to the token holders.\\n  /// @return The calculated reward per token.\\n  function rewardPerToken() public view returns (uint256) {\\n    if (totalSupply() == 0) {\\n      return rewardPerTokenStored;\\n    }\\n    return rewardPerTokenStored + (((lastTimeRewardApplicable() - lastUpdateTime) * (rewardRate) * (1e18)) / (totalSupply()));\\n  }\\n\\n  /// @notice Calculates the earned rewards for a given account.\\n  /// @dev This function calculates the earned rewards by multiplying the balance of the account\\n  /// with the difference between the reward per token and the reward per token paid to the account.\\n  /// @param account The account to calculate the earned rewards for.\\n  /// @return The calculated earned rewards for the account.\\n  function earned(address account) public view returns (uint256) {\\n    return (_balancesOfStBBTC[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\\n  }\\n\\n  /// @notice Calculates the reward for the entire duration.\\n  /// @dev This is used to get the total reward that will be distributed over the entire duration.\\n  /// @return The total reward for the duration.\\n  function getRewardForDuration() external view returns (uint256) {\\n    return rewardRate * rewardsDuration;\\n  }\\n\\n  function isOperator(address _operator) external view returns (bool) {\\n    return hasRole(OPERATOR_ROLE, _operator);\\n  }\\n\\n  function addOperator(address _operator) external onlyOwner {\\n    require(_operator != address(0), 'Zero address not valid');\\n    _grantRole(OPERATOR_ROLE, _operator);\\n  }\\n\\n  function removeOperator(address _operator) external onlyOwner {\\n    require(_operator != address(0), 'Zero address not valid');\\n    _revokeRole(OPERATOR_ROLE, _operator);\\n  }\\n\\n  function updateRewardsDuration(uint256 _duration) external onlyOwner {\\n    require(block.timestamp > periodFinish, 'Previous rewards period must be complete before changing the duration for the new period');\\n    emit UpdateRewardsDuration(rewardsDuration, _duration);\\n    rewardsDuration = _duration;\\n  }\\n\\n  /**\\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param token token to transfer\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyTokenTransfer(address token, address to, uint256 amount) external onlyOwner {\\n    require(token != address(stBBTC), 'The underlying asset cannot be rescued');\\n    IERC20(token).safeTransfer(to, amount);\\n  }\\n\\n  function setStrategy(IStrategy _strategy) external onlyOwner {\\n    emit SetStrategy(strategy, _strategy);\\n    strategy = _strategy;\\n  }\\n\\n  /**\\n   * @dev Get stBBTC address used by WrappedStakedBBTCGateway\\n   */\\n  function getStakedBBTCAddress() external view returns (address) {\\n    return address(stBBTC);\\n  }\\n\\n  /**\\n   * @dev Get stBBTC strategy address used by WrappedStakedBBTCGateway\\n   */\\n  function getStrategyAddress() external view returns (address) {\\n    return address(strategy);\\n  }\\n\\n  /// @notice Updates the reward for a given account.\\n  /// @dev This function updates the stored reward per token and the last update time.\\n  /// If the account is not the zero address, it also updates the rewards and the reward per token\\n  /// paid for the account.\\n  /// @param account The account to update the reward for.\\n  function _updateReward(address account) internal {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n  }\\n\\n  /**\\n   * @notice Called by owner to update the LenB Pool\\n   * @param _newPool New LenB poll address\\n   */\\n  function updateLenBPool(IPool _newPool) external onlyOwner {\\n    emit UpdateLenBPool(address(POOL), address(_newPool));\\n    POOL = _newPool;\\n    _approve(address(this), address(POOL), type(uint256).max);\\n  }\\n\\n  /**\\n   * @dev Only WrappedStakedBBTC contract is allowed to transfer native token here.\\n   */\\n  receive() external payable {}\\n\\n  /**\\n   * @dev Revert fallback calls with data\\n   */\\n  fallback() external payable {\\n    require(msg.data.length == 0, 'NON_EMPTY_DATA');\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xb222ccc14da0b97e4fceb5afc192a9579ee95dcf066c3eba8d20b95b56b0d979\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003eb938038062003eb983398101604081905262000034916200013a565b6001600160a01b0380841660805282811660a052811660c0526200005762000060565b5050506200018e565b600054610100900460ff1615620000cd5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146200011f576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200013757600080fd5b50565b6000806000606084860312156200015057600080fd5b83516200015d8162000121565b6020850151909350620001708162000121565b6040850151909250620001838162000121565b809150509250925092565b60805160a05160c051613cca620001ef60003960006113f901526000818161115b0152611c450152600081816106ce01528181610be4015281816110b5015281816114d1015281816117a90152818161187f0152611de30152613cca6000f3fe6080604052600436106103215760003560e01c806380faa57d116101a5578063ac8a584a116100ec578063d94ef29d11610095578063e1cecfe11161006f578063e1cecfe11461095c578063ebe2b12b1461097c578063f2fde38b14610993578063f5b541a6146109b357610328565b8063d94ef29d146108df578063dd62ed3e146108ff578063df136d651461094557610328565b8063cd3daf9d116100c6578063cd3daf9d1461088a578063cd6dc6871461089f578063d547741f146108bf57610328565b8063ac8a584a14610834578063c14f54d714610854578063c8f33c911461087357610328565b806395d89b411161014e578063a3d5b25511610128578063a3d5b255146107d4578063a457c2d7146107f4578063a9059cbb1461081457610328565b806395d89b411461078a5780639870d7fe1461079f578063a217fddf146107bf57610328565b80638da5cb5b1161017f5780638da5cb5b1461070657806391d148541461072457806392c607be1461076a57610328565b806380faa57d1461067c5780638b876347146106915780638cdc5b00146106bf57610328565b806333a100ca116102695780636d70f7ae1161021257806372627cd9116101ec57806372627cd914610625578063746928cd146106455780637b0a47ee1461066557610328565b80636d70f7ae146105ba57806370a08231146105da578063715018a61461061057610328565b8063395093511161024357806339509351146105655780633d18b91214610585578063588cf0831461059a57610328565b806333a100ca1461050e57806336568abe1461052e578063386a95251461054e57610328565b806318160ddd116102cb578063248a9ca3116102a5578063248a9ca3146104a25780632f2ff15d146104d2578063313ce567146104f257610328565b806318160ddd146104585780631c1f78eb1461046d57806323b872dd1461048257610328565b80630700037d116102fc5780630700037d14610402578063095ea7b3146104305780630c51dde41461045057610328565b80628cc2621461037d57806301ffc9a7146103b057806306fdde03146103e057610328565b3661032857005b361561037b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f4e5f454d5054595f4441544100000000000000000000000000000000000060448201526064015b60405180910390fd5b005b34801561038957600080fd5b5061039d610398366004613151565b6109e7565b6040519081526020015b60405180910390f35b3480156103bc57600080fd5b506103d06103cb36600461316e565b610a67565b60405190151581526020016103a7565b3480156103ec57600080fd5b506103f5610afe565b6040516103a791906131d4565b34801561040e57600080fd5b5061039d61041d366004613151565b6101356020526000908152604090205481565b34801561043c57600080fd5b506103d061044b366004613207565b610b90565b61037b610ba8565b34801561046457600080fd5b5060355461039d565b34801561047957600080fd5b5061039d610d7d565b34801561048e57600080fd5b506103d061049d366004613233565b610d96565b3480156104ae57600080fd5b5061039d6104bd366004613274565b600090815260c9602052604090206001015490565b3480156104de57600080fd5b5061037b6104ed36600461328d565b610dba565b3480156104fe57600080fd5b50604051601281526020016103a7565b34801561051a57600080fd5b5061037b610529366004613151565b610de4565b34801561053a57600080fd5b5061037b61054936600461328d565b610e64565b34801561055a57600080fd5b5061039d6101315481565b34801561057157600080fd5b506103d0610580366004613207565b610ef0565b34801561059157600080fd5b5061037b610f2f565b3480156105a657600080fd5b5061037b6105b5366004613151565b610fb7565b3480156105c657600080fd5b506103d06105d5366004613151565b611044565b3480156105e657600080fd5b5061039d6105f5366004613151565b6001600160a01b031660009081526033602052604090205490565b34801561061c57600080fd5b5061037b611084565b34801561063157600080fd5b5061037b610640366004613274565b611096565b34801561065157600080fd5b5061037b610660366004613309565b6111d6565b34801561067157600080fd5b5061039d6101305481565b34801561068857600080fd5b5061039d611510565b34801561069d57600080fd5b5061039d6106ac366004613151565b6101346020526000908152604090205481565b3480156106cb57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016103a7565b34801561071257600080fd5b506065546001600160a01b03166106ee565b34801561073057600080fd5b506103d061073f36600461328d565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561077657600080fd5b5061037b610785366004613274565b611529565b34801561079657600080fd5b506103f56117de565b3480156107ab57600080fd5b5061037b6107ba366004613151565b6117ed565b3480156107cb57600080fd5b5061039d600081565b3480156107e057600080fd5b5061037b6107ef366004613233565b611875565b34801561080057600080fd5b506103d061080f366004613207565b611938565b34801561082057600080fd5b506103d061082f366004613207565b6119e2565b34801561084057600080fd5b5061037b61084f366004613151565b6119f0565b34801561086057600080fd5b5061012d546001600160a01b03166106ee565b34801561087f57600080fd5b5061039d6101325481565b34801561089657600080fd5b5061039d611a78565b3480156108ab57600080fd5b5061037b6108ba366004613207565b611ae3565b3480156108cb57600080fd5b5061037b6108da36600461328d565b611cb6565b3480156108eb57600080fd5b5061037b6108fa366004613274565b611cdb565b34801561090b57600080fd5b5061039d61091a3660046133cd565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b34801561095157600080fd5b5061039d6101335481565b34801561096857600080fd5b5061037b61097736600461340b565b611dc4565b34801561098857600080fd5b5061039d61012f5481565b34801561099f57600080fd5b5061037b6109ae366004613151565b611ed5565b3480156109bf57600080fd5b5061039d7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6001600160a01b03811660009081526101356020908152604080832054610134909252822054670de0b6b3a764000090610a1f611a78565b610a299190613463565b6001600160a01b038516600090815261012e6020526040902054610a4d9190613476565b610a57919061348d565b610a6191906134af565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610a6157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610a61565b606060368054610b0d906134c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b39906134c2565b8015610b865780601f10610b5b57610100808354040283529160200191610b86565b820191906000526020600020905b815481529060010190602001808311610b6957829003601f168201915b5050505050905090565b600033610b9e818585611f62565b5060019392505050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610bd2816120ba565b6000610bdd816120c4565b60004790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b5047925060009150610c6590508383613463565b90503415610c7a57610c7734826134af565b90505b61012f544210610c9b5761013154610c92908261348d565b61013055610ce1565b60004261012f54610cac9190613463565b905060006101305482610cbf9190613476565b61013154909150610cd082856134af565b610cda919061348d565b6101305550505b61013154610cef908361348d565b610130541115610d2b576040517f08774b7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4261013281905561013154610d3f916134af565b61012f556040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050505050565b60006101315461013054610d919190613476565b905090565b600033610da4858285612125565b610daf8585856121b7565b506001949350505050565b600082815260c96020526040902060010154610dd5816120ba565b610ddf83836123ab565b505050565b610dec61244d565b61012d54604080516001600160a01b03928316815291831660208301527f439ae0d36946bc1b7917756b5772ae0c0292339ebc08be0f7bd1daa4a1055372910160405180910390a161012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163314610ee25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610372565b610eec82826124a7565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190610b9e9082908690610f2a9087906134af565b611f62565b610f3761252a565b33610f41816120c4565b33600090815261013560205260409020548015610fa9573360008181526101356020526040812055610f739082612583565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b5050610fb5600160fb55565b565b610fbf61244d565b61013654604080516001600160a01b03928316815291831660208301527f8f807d1fabea2b2d01c6047675febe84228c625915bf3d899a420cd48644a706910160405180910390a1610136805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155611041903090600019611f62565b50565b6001600160a01b03811660009081527fc99cfc74cbb51adc7ca8731c432a51a31a086a1789003f0b773be6e802362bf4602052604081205460ff16610a61565b61108c61244d565b610fb560006126a3565b61109e61252a565b336110a8816120c4565b6110dd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612702565b6110e7308361279a565b33600090815261012e6020526040812080548492906111079084906134af565b909155505061012d546040517fe46842b70000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039182166024820152306044820152606481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063e46842b7906084016020604051808303816000875af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca91906134fc565b5050611041600160fb55565b6111de61252a565b336111e8816120c4565b60005b888110156113bf57338a8a8381811061120657611206613515565b9050602002810190611218919061352b565b611226906020810190613151565b6001600160a01b03161461127c5760405162461bcd60e51b815260206004820152601960248201527f57697468647261776572206d757374206265207374616b6572000000000000006044820152606401610372565b60005b8a8a8381811061129157611291613515565b90506020028101906112a3919061352b565b6112b19060a081019061354b565b90508110156113ac5761012d546001600160a01b03168b8b848181106112d9576112d9613515565b90506020028101906112eb919061352b565b6112f99060a081019061354b565b8381811061130957611309613515565b905060200201602081019061131e9190613151565b6001600160a01b03161461139a5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920737570706f72742073744242544320746f6b656e2073747261746560448201527f67790000000000000000000000000000000000000000000000000000000000006064820152608401610372565b806113a481613595565b91505061127f565b50806113b781613595565b9150506111eb565b5030600090815260336020526040908190205490517f334043960000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633340439690611444908d908d908d908d908d908d908d908d9060040161376f565b600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b505030600090815260336020526040812054925090506114928383613463565b905061149e308261285b565b33600090815261012e6020526040812080548392906114be908490613463565b909155506114f890506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836129c6565b50505050611506600160fb55565b5050505050505050565b600061012f544210611524575061012f5490565b504290565b61153161252a565b3361153b816120c4565b610136546040517f35ea6a750000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906335ea6a75906024016101e060405180830381865afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061399c565b61010001516040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f91906134fc565b9050836001810161165d5750805b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613abf565b50610136546040517f69328dec00000000000000000000000000000000000000000000000000000000815230600482018190526024820184905260448201526001600160a01b03909116906369328dec906064016020604051808303816000875af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b91906134fc565b50611776308261285b565b33600090815261012e602052604081208054839290611796908490613463565b909155506117d090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836129c6565b50505050611041600160fb55565b606060378054610b0d906134c2565b6117f561244d565b6001600160a01b03811661184b5760405162461bcd60e51b815260206004820152601660248201527f5a65726f2061646472657373206e6f742076616c6964000000000000000000006044820152606401610372565b6110417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826123ab565b61187d61244d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036119245760405162461bcd60e51b815260206004820152602660248201527f54686520756e6465726c79696e672061737365742063616e6e6f74206265207260448201527f65736375656400000000000000000000000000000000000000000000000000006064820152608401610372565b610ddf6001600160a01b03841683836129c6565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156119d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610372565b610daf8286868403611f62565b600033610b9e8185856121b7565b6119f861244d565b6001600160a01b038116611a4e5760405162461bcd60e51b815260206004820152601660248201527f5a65726f2061646472657373206e6f742076616c6964000000000000000000006044820152606401610372565b6110417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826124a7565b6000611a8360355490565b600003611a9257506101335490565b6035546101305461013254611aa5611510565b611aaf9190613463565b611ab99190613476565b611acb90670de0b6b3a7640000613476565b611ad5919061348d565b61013354610d9191906134af565b600054610100900460ff1615808015611b035750600054600160ff909116105b80611b1d5750303b158015611b1d575060005460ff166001145b611b8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610372565b6000805460ff191660011790558015611bb2576000805461ff0019166101001790555b8161013181905550611c2e6040518060400160405280601381526020017f57726170706564205374616b65642042425443000000000000000000000000008152506040518060400160405280600781526020017f7773744242544300000000000000000000000000000000000000000000000000815250612a0f565b611c36612a84565b611c3f836126a3565b611c6c307f0000000000000000000000000000000000000000000000000000000000000000600019611f62565b8015610ddf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600082815260c96020526040902060010154611cd1816120ba565b610ddf83836124a7565b611ce361244d565b61012f544211611d815760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610372565b6101315460408051918252602082018390527fa6607d903dfdb9edeafb3fb80d166352afe31ac8ffa9a50f974e8d406a4d7e4e910160405180910390a161013155565b611dcc61252a565b33611dd6816120c4565b611e0b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333087612702565b611e15308561279a565b33600090815261012e602052604081208054869290611e359084906134af565b9091555050610136546040517f617ba037000000000000000000000000000000000000000000000000000000008152306004820152602481018690526001600160a01b03858116604483015261ffff851660648301529091169063617ba03790608401600060405180830381600087803b158015611eb257600080fd5b505af1158015611ec6573d6000803e3d6000fd5b5050505050610ddf600160fb55565b611edd61244d565b6001600160a01b038116611f595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610372565b611041816126a3565b6001600160a01b038316611fdd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0382166120595760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6110418133612af7565b6120cc611a78565b610133556120d8611510565b610132556001600160a01b03811615611041576120f4816109e7565b6001600160a01b03821660009081526101356020908152604080832093909355610133546101349091529190205550565b6001600160a01b0383811660009081526034602090815260408083209386168352929052205460001981146121b157818110156121a45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610372565b6121b18484848403611f62565b50505050565b6001600160a01b0383166122335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0382166122af5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0383166000908152603360205260409020548181101561233e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061239e9086815260200190565b60405180910390a36121b1565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610eec57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124093390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6065546001600160a01b03163314610fb55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610372565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff1615610eec57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600260fb540361257c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610372565b600260fb55565b804710156125d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610372565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612620576040519150601f19603f3d011682016040523d82523d6000602084013e612625565b606091505b5050905080610ddf5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610372565b600160fb55565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526121b19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612b6c565b6001600160a01b0382166127f05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610372565b806035600082825461280291906134af565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166128d75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b038216600090815260336020526040902054818110156129665760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610ddf9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612736565b600054610100900460ff16612a7a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b610eec8282612c54565b600054610100900460ff16612aef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b610fb5612cd8565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610eec57612b2a81612d43565b612b35836020612d55565b604051602001612b46929190613adc565b60408051601f198184030181529082905262461bcd60e51b8252610372916004016131d4565b6000612bc1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f859092919063ffffffff16565b9050805160001480612be2575080806020019051810190612be29190613abf565b610ddf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610372565b600054610100900460ff16612cbf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b6036612ccb8382613bab565b506037610ddf8282613bab565b600054610100900460ff1661269c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b6060610a616001600160a01b03831660145b60606000612d64836002613476565b612d6f9060026134af565b67ffffffffffffffff811115612d8757612d876138cf565b6040519080825280601f01601f191660200182016040528015612db1576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612de857612de8613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612e4b57612e4b613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612e87846002613476565b612e929060016134af565b90505b6001811115612f2f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612ed357612ed3613515565b1a60f81b828281518110612ee957612ee9613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612f2881613c6b565b9050612e95565b508315612f7e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610372565b9392505050565b6060612f948484600085612f9c565b949350505050565b6060824710156130145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610372565b600080866001600160a01b031685876040516130309190613c82565b60006040518083038185875af1925050503d806000811461306d576040519150601f19603f3d011682016040523d82523d6000602084013e613072565b606091505b50915091506130838783838761308e565b979650505050505050565b606083156130fd5782516000036130f6576001600160a01b0385163b6130f65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610372565b5081612f94565b612f9483838151156131125781518083602001fd5b8060405162461bcd60e51b815260040161037291906131d4565b6001600160a01b038116811461104157600080fd5b803561314c8161312c565b919050565b60006020828403121561316357600080fd5b8135612f7e8161312c565b60006020828403121561318057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612f7e57600080fd5b60005b838110156131cb5781810151838201526020016131b3565b50506000910152565b60208152600082518060208401526131f38160408501602087016131b0565b601f01601f19169190910160400192915050565b6000806040838503121561321a57600080fd5b82356132258161312c565b946020939093013593505050565b60008060006060848603121561324857600080fd5b83356132538161312c565b925060208401356132638161312c565b929592945050506040919091013590565b60006020828403121561328657600080fd5b5035919050565b600080604083850312156132a057600080fd5b8235915060208301356132b28161312c565b809150509250929050565b60008083601f8401126132cf57600080fd5b50813567ffffffffffffffff8111156132e757600080fd5b6020830191508360208260051b850101111561330257600080fd5b9250929050565b6000806000806000806000806080898b03121561332557600080fd5b883567ffffffffffffffff8082111561333d57600080fd5b6133498c838d016132bd565b909a50985060208b013591508082111561336257600080fd5b61336e8c838d016132bd565b909850965060408b013591508082111561338757600080fd5b6133938c838d016132bd565b909650945060608b01359150808211156133ac57600080fd5b506133b98b828c016132bd565b999c989b5096995094979396929594505050565b600080604083850312156133e057600080fd5b82356133eb8161312c565b915060208301356132b28161312c565b61ffff8116811461104157600080fd5b60008060006060848603121561342057600080fd5b8335925060208401356134328161312c565b91506040840135613442816133fb565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a6157610a6161344d565b8082028115828204841417610a6157610a6161344d565b6000826134aa57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a6157610a6161344d565b600181811c908216806134d657607f821691505b6020821081036134f657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561350e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000823560de1983360301811261354157600080fd5b9190910192915050565b6000808335601e1984360301811261356257600080fd5b83018035915067ffffffffffffffff82111561357d57600080fd5b6020019150600581901b360382131561330257600080fd5b6000600182016135a7576135a761344d565b5060010190565b803563ffffffff8116811461314c57600080fd5b6000808335601e198436030181126135d957600080fd5b830160208101925035905067ffffffffffffffff8111156135f957600080fd5b8060051b360382131561330257600080fd5b8183526000602080850194508260005b8581101561364957813561362e8161312c565b6001600160a01b03168752958201959082019060010161361b565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561368657600080fd5b8260051b80836020870137939093016020019392505050565b81835260006020808501808196508560051b81019150846000805b8881101561371c578385038a526136d183896135c2565b808752878701845b828110156137075783356136ec8161312c565b6001600160a01b0316825292890192908901906001016136d9565b509b88019b96505050918501916001016136ba565b509298975050505050505050565b801515811461104157600080fd5b8183526000602080850194508260005b8581101561364957813561375b8161372a565b151587529582019590820190600101613748565b60808082528101889052600060a060058a901b830181019083018b835b8c81101561388057858403609f190183528135368f900360de190181126137b257600080fd5b8e0160e081356137c18161312c565b6001600160a01b031686526020828101356137db8161312c565b6001600160a01b03168188015260406137f5848201613141565b6001600160a01b03169088015260608381013590880152613818608084016135ae565b63ffffffff16608088015261383060a08401846135c2565b8360a08a0152613843848a01828461360b565b9350505060c0613855818501856135c2565b9450888403828a0152613869848683613654565b98505050948501949390930192505060010161378c565b505050828103602084015261389681898b61369f565b905082810360408401526138ab818789613654565b905082810360608401526138c0818587613738565b9b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715613909576139096138cf565b60405290565b60006020828403121561392157600080fd5b6040516020810181811067ffffffffffffffff82111715613944576139446138cf565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461314c57600080fd5b805164ffffffffff8116811461314c57600080fd5b805161314c816133fb565b805161314c8161312c565b60006101e082840312156139af57600080fd5b6139b76138e5565b6139c1848461390f565b81526139cf60208401613951565b60208201526139e060408401613951565b60408201526139f160608401613951565b6060820152613a0260808401613951565b6080820152613a1360a08401613951565b60a0820152613a2460c08401613971565b60c0820152613a3560e08401613986565b60e0820152610100613a48818501613991565b90820152610120613a5a848201613991565b90820152610140613a6c848201613991565b90820152610160613a7e848201613991565b90820152610180613a90848201613951565b908201526101a0613aa2848201613951565b908201526101c0613ab4848201613951565b908201529392505050565b600060208284031215613ad157600080fd5b8151612f7e8161372a565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b148160178501602088016131b0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613b518160288401602088016131b0565b01602801949350505050565b601f821115610ddf57600081815260208120601f850160051c81016020861015613b845750805b601f850160051c820191505b81811015613ba357828155600101613b90565b505050505050565b815167ffffffffffffffff811115613bc557613bc56138cf565b613bd981613bd384546134c2565b84613b5d565b602080601f831160018114613c0e5760008415613bf65750858301515b600019600386901b1c1916600185901b178555613ba3565b600085815260208120601f198616915b82811015613c3d57888601518255948401946001909101908401613c1e565b5085821015613c5b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081613c7a57613c7a61344d565b506000190190565b600082516135418184602087016131b056fea264697066735822122071422cb7d2c7abc8a5815f4ae6afde2e152b9d29531fa49bd00ca2c144bc1b5e64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106103215760003560e01c806380faa57d116101a5578063ac8a584a116100ec578063d94ef29d11610095578063e1cecfe11161006f578063e1cecfe11461095c578063ebe2b12b1461097c578063f2fde38b14610993578063f5b541a6146109b357610328565b8063d94ef29d146108df578063dd62ed3e146108ff578063df136d651461094557610328565b8063cd3daf9d116100c6578063cd3daf9d1461088a578063cd6dc6871461089f578063d547741f146108bf57610328565b8063ac8a584a14610834578063c14f54d714610854578063c8f33c911461087357610328565b806395d89b411161014e578063a3d5b25511610128578063a3d5b255146107d4578063a457c2d7146107f4578063a9059cbb1461081457610328565b806395d89b411461078a5780639870d7fe1461079f578063a217fddf146107bf57610328565b80638da5cb5b1161017f5780638da5cb5b1461070657806391d148541461072457806392c607be1461076a57610328565b806380faa57d1461067c5780638b876347146106915780638cdc5b00146106bf57610328565b806333a100ca116102695780636d70f7ae1161021257806372627cd9116101ec57806372627cd914610625578063746928cd146106455780637b0a47ee1461066557610328565b80636d70f7ae146105ba57806370a08231146105da578063715018a61461061057610328565b8063395093511161024357806339509351146105655780633d18b91214610585578063588cf0831461059a57610328565b806333a100ca1461050e57806336568abe1461052e578063386a95251461054e57610328565b806318160ddd116102cb578063248a9ca3116102a5578063248a9ca3146104a25780632f2ff15d146104d2578063313ce567146104f257610328565b806318160ddd146104585780631c1f78eb1461046d57806323b872dd1461048257610328565b80630700037d116102fc5780630700037d14610402578063095ea7b3146104305780630c51dde41461045057610328565b80628cc2621461037d57806301ffc9a7146103b057806306fdde03146103e057610328565b3661032857005b361561037b5760405162461bcd60e51b815260206004820152600e60248201527f4e4f4e5f454d5054595f4441544100000000000000000000000000000000000060448201526064015b60405180910390fd5b005b34801561038957600080fd5b5061039d610398366004613151565b6109e7565b6040519081526020015b60405180910390f35b3480156103bc57600080fd5b506103d06103cb36600461316e565b610a67565b60405190151581526020016103a7565b3480156103ec57600080fd5b506103f5610afe565b6040516103a791906131d4565b34801561040e57600080fd5b5061039d61041d366004613151565b6101356020526000908152604090205481565b34801561043c57600080fd5b506103d061044b366004613207565b610b90565b61037b610ba8565b34801561046457600080fd5b5060355461039d565b34801561047957600080fd5b5061039d610d7d565b34801561048e57600080fd5b506103d061049d366004613233565b610d96565b3480156104ae57600080fd5b5061039d6104bd366004613274565b600090815260c9602052604090206001015490565b3480156104de57600080fd5b5061037b6104ed36600461328d565b610dba565b3480156104fe57600080fd5b50604051601281526020016103a7565b34801561051a57600080fd5b5061037b610529366004613151565b610de4565b34801561053a57600080fd5b5061037b61054936600461328d565b610e64565b34801561055a57600080fd5b5061039d6101315481565b34801561057157600080fd5b506103d0610580366004613207565b610ef0565b34801561059157600080fd5b5061037b610f2f565b3480156105a657600080fd5b5061037b6105b5366004613151565b610fb7565b3480156105c657600080fd5b506103d06105d5366004613151565b611044565b3480156105e657600080fd5b5061039d6105f5366004613151565b6001600160a01b031660009081526033602052604090205490565b34801561061c57600080fd5b5061037b611084565b34801561063157600080fd5b5061037b610640366004613274565b611096565b34801561065157600080fd5b5061037b610660366004613309565b6111d6565b34801561067157600080fd5b5061039d6101305481565b34801561068857600080fd5b5061039d611510565b34801561069d57600080fd5b5061039d6106ac366004613151565b6101346020526000908152604090205481565b3480156106cb57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016103a7565b34801561071257600080fd5b506065546001600160a01b03166106ee565b34801561073057600080fd5b506103d061073f36600461328d565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561077657600080fd5b5061037b610785366004613274565b611529565b34801561079657600080fd5b506103f56117de565b3480156107ab57600080fd5b5061037b6107ba366004613151565b6117ed565b3480156107cb57600080fd5b5061039d600081565b3480156107e057600080fd5b5061037b6107ef366004613233565b611875565b34801561080057600080fd5b506103d061080f366004613207565b611938565b34801561082057600080fd5b506103d061082f366004613207565b6119e2565b34801561084057600080fd5b5061037b61084f366004613151565b6119f0565b34801561086057600080fd5b5061012d546001600160a01b03166106ee565b34801561087f57600080fd5b5061039d6101325481565b34801561089657600080fd5b5061039d611a78565b3480156108ab57600080fd5b5061037b6108ba366004613207565b611ae3565b3480156108cb57600080fd5b5061037b6108da36600461328d565b611cb6565b3480156108eb57600080fd5b5061037b6108fa366004613274565b611cdb565b34801561090b57600080fd5b5061039d61091a3660046133cd565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b34801561095157600080fd5b5061039d6101335481565b34801561096857600080fd5b5061037b61097736600461340b565b611dc4565b34801561098857600080fd5b5061039d61012f5481565b34801561099f57600080fd5b5061037b6109ae366004613151565b611ed5565b3480156109bf57600080fd5b5061039d7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6001600160a01b03811660009081526101356020908152604080832054610134909252822054670de0b6b3a764000090610a1f611a78565b610a299190613463565b6001600160a01b038516600090815261012e6020526040902054610a4d9190613476565b610a57919061348d565b610a6191906134af565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610a6157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610a61565b606060368054610b0d906134c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b39906134c2565b8015610b865780601f10610b5b57610100808354040283529160200191610b86565b820191906000526020600020905b815481529060010190602001808311610b6957829003601f168201915b5050505050905090565b600033610b9e818585611f62565b5060019392505050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610bd2816120ba565b6000610bdd816120c4565b60004790507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b5047925060009150610c6590508383613463565b90503415610c7a57610c7734826134af565b90505b61012f544210610c9b5761013154610c92908261348d565b61013055610ce1565b60004261012f54610cac9190613463565b905060006101305482610cbf9190613476565b61013154909150610cd082856134af565b610cda919061348d565b6101305550505b61013154610cef908361348d565b610130541115610d2b576040517f08774b7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4261013281905561013154610d3f916134af565b61012f556040518181527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050505050565b60006101315461013054610d919190613476565b905090565b600033610da4858285612125565b610daf8585856121b7565b506001949350505050565b600082815260c96020526040902060010154610dd5816120ba565b610ddf83836123ab565b505050565b610dec61244d565b61012d54604080516001600160a01b03928316815291831660208301527f439ae0d36946bc1b7917756b5772ae0c0292339ebc08be0f7bd1daa4a1055372910160405180910390a161012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163314610ee25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610372565b610eec82826124a7565b5050565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190610b9e9082908690610f2a9087906134af565b611f62565b610f3761252a565b33610f41816120c4565b33600090815261013560205260409020548015610fa9573360008181526101356020526040812055610f739082612583565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b5050610fb5600160fb55565b565b610fbf61244d565b61013654604080516001600160a01b03928316815291831660208301527f8f807d1fabea2b2d01c6047675febe84228c625915bf3d899a420cd48644a706910160405180910390a1610136805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155611041903090600019611f62565b50565b6001600160a01b03811660009081527fc99cfc74cbb51adc7ca8731c432a51a31a086a1789003f0b773be6e802362bf4602052604081205460ff16610a61565b61108c61244d565b610fb560006126a3565b61109e61252a565b336110a8816120c4565b6110dd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612702565b6110e7308361279a565b33600090815261012e6020526040812080548492906111079084906134af565b909155505061012d546040517fe46842b70000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039182166024820152306044820152606481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063e46842b7906084016020604051808303816000875af11580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca91906134fc565b5050611041600160fb55565b6111de61252a565b336111e8816120c4565b60005b888110156113bf57338a8a8381811061120657611206613515565b9050602002810190611218919061352b565b611226906020810190613151565b6001600160a01b03161461127c5760405162461bcd60e51b815260206004820152601960248201527f57697468647261776572206d757374206265207374616b6572000000000000006044820152606401610372565b60005b8a8a8381811061129157611291613515565b90506020028101906112a3919061352b565b6112b19060a081019061354b565b90508110156113ac5761012d546001600160a01b03168b8b848181106112d9576112d9613515565b90506020028101906112eb919061352b565b6112f99060a081019061354b565b8381811061130957611309613515565b905060200201602081019061131e9190613151565b6001600160a01b03161461139a5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920737570706f72742073744242544320746f6b656e2073747261746560448201527f67790000000000000000000000000000000000000000000000000000000000006064820152608401610372565b806113a481613595565b91505061127f565b50806113b781613595565b9150506111eb565b5030600090815260336020526040908190205490517f334043960000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633340439690611444908d908d908d908d908d908d908d908d9060040161376f565b600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b505030600090815260336020526040812054925090506114928383613463565b905061149e308261285b565b33600090815261012e6020526040812080548392906114be908490613463565b909155506114f890506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836129c6565b50505050611506600160fb55565b5050505050505050565b600061012f544210611524575061012f5490565b504290565b61153161252a565b3361153b816120c4565b610136546040517f35ea6a750000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906335ea6a75906024016101e060405180830381865afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061399c565b61010001516040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f91906134fc565b9050836001810161165d5750805b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190613abf565b50610136546040517f69328dec00000000000000000000000000000000000000000000000000000000815230600482018190526024820184905260448201526001600160a01b03909116906369328dec906064016020604051808303816000875af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b91906134fc565b50611776308261285b565b33600090815261012e602052604081208054839290611796908490613463565b909155506117d090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836129c6565b50505050611041600160fb55565b606060378054610b0d906134c2565b6117f561244d565b6001600160a01b03811661184b5760405162461bcd60e51b815260206004820152601660248201527f5a65726f2061646472657373206e6f742076616c6964000000000000000000006044820152606401610372565b6110417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826123ab565b61187d61244d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036119245760405162461bcd60e51b815260206004820152602660248201527f54686520756e6465726c79696e672061737365742063616e6e6f74206265207260448201527f65736375656400000000000000000000000000000000000000000000000000006064820152608401610372565b610ddf6001600160a01b03841683836129c6565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156119d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610372565b610daf8286868403611f62565b600033610b9e8185856121b7565b6119f861244d565b6001600160a01b038116611a4e5760405162461bcd60e51b815260206004820152601660248201527f5a65726f2061646472657373206e6f742076616c6964000000000000000000006044820152606401610372565b6110417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826124a7565b6000611a8360355490565b600003611a9257506101335490565b6035546101305461013254611aa5611510565b611aaf9190613463565b611ab99190613476565b611acb90670de0b6b3a7640000613476565b611ad5919061348d565b61013354610d9191906134af565b600054610100900460ff1615808015611b035750600054600160ff909116105b80611b1d5750303b158015611b1d575060005460ff166001145b611b8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610372565b6000805460ff191660011790558015611bb2576000805461ff0019166101001790555b8161013181905550611c2e6040518060400160405280601381526020017f57726170706564205374616b65642042425443000000000000000000000000008152506040518060400160405280600781526020017f7773744242544300000000000000000000000000000000000000000000000000815250612a0f565b611c36612a84565b611c3f836126a3565b611c6c307f0000000000000000000000000000000000000000000000000000000000000000600019611f62565b8015610ddf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600082815260c96020526040902060010154611cd1816120ba565b610ddf83836124a7565b611ce361244d565b61012f544211611d815760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610372565b6101315460408051918252602082018390527fa6607d903dfdb9edeafb3fb80d166352afe31ac8ffa9a50f974e8d406a4d7e4e910160405180910390a161013155565b611dcc61252a565b33611dd6816120c4565b611e0b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333087612702565b611e15308561279a565b33600090815261012e602052604081208054869290611e359084906134af565b9091555050610136546040517f617ba037000000000000000000000000000000000000000000000000000000008152306004820152602481018690526001600160a01b03858116604483015261ffff851660648301529091169063617ba03790608401600060405180830381600087803b158015611eb257600080fd5b505af1158015611ec6573d6000803e3d6000fd5b5050505050610ddf600160fb55565b611edd61244d565b6001600160a01b038116611f595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610372565b611041816126a3565b6001600160a01b038316611fdd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0382166120595760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6110418133612af7565b6120cc611a78565b610133556120d8611510565b610132556001600160a01b03811615611041576120f4816109e7565b6001600160a01b03821660009081526101356020908152604080832093909355610133546101349091529190205550565b6001600160a01b0383811660009081526034602090815260408083209386168352929052205460001981146121b157818110156121a45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610372565b6121b18484848403611f62565b50505050565b6001600160a01b0383166122335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0382166122af5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0383166000908152603360205260409020548181101561233e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061239e9086815260200190565b60405180910390a36121b1565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610eec57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556124093390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6065546001600160a01b03163314610fb55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610372565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff1615610eec57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600260fb540361257c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610372565b600260fb55565b804710156125d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610372565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612620576040519150601f19603f3d011682016040523d82523d6000602084013e612625565b606091505b5050905080610ddf5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610372565b600160fb55565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526121b19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612b6c565b6001600160a01b0382166127f05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610372565b806035600082825461280291906134af565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166128d75760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b038216600090815260336020526040902054818110156129665760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610372565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610ddf9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612736565b600054610100900460ff16612a7a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b610eec8282612c54565b600054610100900460ff16612aef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b610fb5612cd8565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff16610eec57612b2a81612d43565b612b35836020612d55565b604051602001612b46929190613adc565b60408051601f198184030181529082905262461bcd60e51b8252610372916004016131d4565b6000612bc1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f859092919063ffffffff16565b9050805160001480612be2575080806020019051810190612be29190613abf565b610ddf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610372565b600054610100900460ff16612cbf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b6036612ccb8382613bab565b506037610ddf8282613bab565b600054610100900460ff1661269c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610372565b6060610a616001600160a01b03831660145b60606000612d64836002613476565b612d6f9060026134af565b67ffffffffffffffff811115612d8757612d876138cf565b6040519080825280601f01601f191660200182016040528015612db1576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612de857612de8613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612e4b57612e4b613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612e87846002613476565b612e929060016134af565b90505b6001811115612f2f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612ed357612ed3613515565b1a60f81b828281518110612ee957612ee9613515565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612f2881613c6b565b9050612e95565b508315612f7e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610372565b9392505050565b6060612f948484600085612f9c565b949350505050565b6060824710156130145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610372565b600080866001600160a01b031685876040516130309190613c82565b60006040518083038185875af1925050503d806000811461306d576040519150601f19603f3d011682016040523d82523d6000602084013e613072565b606091505b50915091506130838783838761308e565b979650505050505050565b606083156130fd5782516000036130f6576001600160a01b0385163b6130f65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610372565b5081612f94565b612f9483838151156131125781518083602001fd5b8060405162461bcd60e51b815260040161037291906131d4565b6001600160a01b038116811461104157600080fd5b803561314c8161312c565b919050565b60006020828403121561316357600080fd5b8135612f7e8161312c565b60006020828403121561318057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612f7e57600080fd5b60005b838110156131cb5781810151838201526020016131b3565b50506000910152565b60208152600082518060208401526131f38160408501602087016131b0565b601f01601f19169190910160400192915050565b6000806040838503121561321a57600080fd5b82356132258161312c565b946020939093013593505050565b60008060006060848603121561324857600080fd5b83356132538161312c565b925060208401356132638161312c565b929592945050506040919091013590565b60006020828403121561328657600080fd5b5035919050565b600080604083850312156132a057600080fd5b8235915060208301356132b28161312c565b809150509250929050565b60008083601f8401126132cf57600080fd5b50813567ffffffffffffffff8111156132e757600080fd5b6020830191508360208260051b850101111561330257600080fd5b9250929050565b6000806000806000806000806080898b03121561332557600080fd5b883567ffffffffffffffff8082111561333d57600080fd5b6133498c838d016132bd565b909a50985060208b013591508082111561336257600080fd5b61336e8c838d016132bd565b909850965060408b013591508082111561338757600080fd5b6133938c838d016132bd565b909650945060608b01359150808211156133ac57600080fd5b506133b98b828c016132bd565b999c989b5096995094979396929594505050565b600080604083850312156133e057600080fd5b82356133eb8161312c565b915060208301356132b28161312c565b61ffff8116811461104157600080fd5b60008060006060848603121561342057600080fd5b8335925060208401356134328161312c565b91506040840135613442816133fb565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a6157610a6161344d565b8082028115828204841417610a6157610a6161344d565b6000826134aa57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a6157610a6161344d565b600181811c908216806134d657607f821691505b6020821081036134f657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561350e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000823560de1983360301811261354157600080fd5b9190910192915050565b6000808335601e1984360301811261356257600080fd5b83018035915067ffffffffffffffff82111561357d57600080fd5b6020019150600581901b360382131561330257600080fd5b6000600182016135a7576135a761344d565b5060010190565b803563ffffffff8116811461314c57600080fd5b6000808335601e198436030181126135d957600080fd5b830160208101925035905067ffffffffffffffff8111156135f957600080fd5b8060051b360382131561330257600080fd5b8183526000602080850194508260005b8581101561364957813561362e8161312c565b6001600160a01b03168752958201959082019060010161361b565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561368657600080fd5b8260051b80836020870137939093016020019392505050565b81835260006020808501808196508560051b81019150846000805b8881101561371c578385038a526136d183896135c2565b808752878701845b828110156137075783356136ec8161312c565b6001600160a01b0316825292890192908901906001016136d9565b509b88019b96505050918501916001016136ba565b509298975050505050505050565b801515811461104157600080fd5b8183526000602080850194508260005b8581101561364957813561375b8161372a565b151587529582019590820190600101613748565b60808082528101889052600060a060058a901b830181019083018b835b8c81101561388057858403609f190183528135368f900360de190181126137b257600080fd5b8e0160e081356137c18161312c565b6001600160a01b031686526020828101356137db8161312c565b6001600160a01b03168188015260406137f5848201613141565b6001600160a01b03169088015260608381013590880152613818608084016135ae565b63ffffffff16608088015261383060a08401846135c2565b8360a08a0152613843848a01828461360b565b9350505060c0613855818501856135c2565b9450888403828a0152613869848683613654565b98505050948501949390930192505060010161378c565b505050828103602084015261389681898b61369f565b905082810360408401526138ab818789613654565b905082810360608401526138c0818587613738565b9b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715613909576139096138cf565b60405290565b60006020828403121561392157600080fd5b6040516020810181811067ffffffffffffffff82111715613944576139446138cf565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461314c57600080fd5b805164ffffffffff8116811461314c57600080fd5b805161314c816133fb565b805161314c8161312c565b60006101e082840312156139af57600080fd5b6139b76138e5565b6139c1848461390f565b81526139cf60208401613951565b60208201526139e060408401613951565b60408201526139f160608401613951565b6060820152613a0260808401613951565b6080820152613a1360a08401613951565b60a0820152613a2460c08401613971565b60c0820152613a3560e08401613986565b60e0820152610100613a48818501613991565b90820152610120613a5a848201613991565b90820152610140613a6c848201613991565b90820152610160613a7e848201613991565b90820152610180613a90848201613951565b908201526101a0613aa2848201613951565b908201526101c0613ab4848201613951565b908201529392505050565b600060208284031215613ad157600080fd5b8151612f7e8161372a565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b148160178501602088016131b0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613b518160288401602088016131b0565b01602801949350505050565b601f821115610ddf57600081815260208120601f850160051c81016020861015613b845750805b601f850160051c820191505b81811015613ba357828155600101613b90565b505050505050565b815167ffffffffffffffff811115613bc557613bc56138cf565b613bd981613bd384546134c2565b84613b5d565b602080601f831160018114613c0e5760008415613bf65750858301515b600019600386901b1c1916600185901b178555613ba3565b600085815260208120601f198616915b82811015613c3d57888601518255948401946001909101908401613c1e565b5085821015613c5b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081613c7a57613c7a61344d565b506000190190565b600082516135418184602087016131b056fea264697066735822122071422cb7d2c7abc8a5815f4ae6afde2e152b9d29531fa49bd00ca2c144bc1b5e64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ProvidedRewardTooHigh()": [
        {
          "details": "This error is thrown when the reward provided is too high and could cause an overflow. It ensures that the reward rate stays within the right range."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RewardAdded(uint256)": {
        "details": "This event is emitted when a new reward is added to the contract. It includes the amount of the reward that was added."
      },
      "RewardPaid(address,uint256)": {
        "details": "This event is emitted when a user's reward is paid out. It includes the address of the user and the amount of the reward that was paid."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "depositStakedBBTCToLenB(uint256,address,uint16)": {
        "details": "deposits wstBBTC into the reserve, using stBBTC. A corresponding amount of the overlying asset (aTokens) is minted.",
        "params": {
          "onBehalfOf": "address of the user who will receive the aTokens representing the deposit",
          "referralCode": "integrators are assigned a referral code and can potentially receive rewards.*"
        }
      },
      "earned(address)": {
        "details": "This function calculates the earned rewards by multiplying the balance of the account with the difference between the reward per token and the reward per token paid to the account.",
        "params": {
          "account": "The account to calculate the earned rewards for."
        },
        "returns": {
          "_0": "The calculated earned rewards for the account."
        }
      },
      "emergencyTokenTransfer(address,address,uint256)": {
        "details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
        "params": {
          "amount": "amount to send",
          "to": "recipient of the transfer",
          "token": "token to transfer"
        }
      },
      "getReward()": {
        "details": "It updates the reward for the user before transferring."
      },
      "getRewardForDuration()": {
        "details": "This is used to get the total reward that will be distributed over the entire duration.",
        "returns": {
          "_0": "The total reward for the duration."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStakedBBTCAddress()": {
        "details": "Get stBBTC address used by WrappedStakedBBTCGateway"
      },
      "getStrategyAddress()": {
        "details": "Get stBBTC strategy address used by WrappedStakedBBTCGateway"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lastTimeRewardApplicable()": {
        "details": "This function checks if the current block timestamp is less than the period finish time. If it is, it returns the block timestamp, otherwise it returns the period finish time. This is used to ensure that rewards are only applicable within the specified period.",
        "returns": {
          "_0": "The last time the reward is applicable."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "notifyRewardAmount()": {
        "details": "It updates the reward rate and the finish period of the reward."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rewardPerToken()": {
        "details": "This function calculates the reward per token based on the total supply of tokens. This is used to distribute the rewards proportionally to the token holders.",
        "returns": {
          "_0": "The calculated reward per token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateLenBPool(address)": {
        "params": {
          "_newPool": "New LenB poll address"
        }
      },
      "withdrawStakedBBTCFromLenB(uint256)": {
        "details": "withdraws the wstBBTC _reserves of msg.sender.",
        "params": {
          "amount": "amount of aWstBBTC to withdraw and receive stBBTC"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "lastUpdateTime": {
        "details": "This is the timestamp of the last time the rewards were updated. It is used to calculate the reward per token and the earned rewards."
      },
      "periodFinish": {
        "details": "This is the timestamp when the reward period will end. Rewards are only applicable within the period specified by this variable."
      },
      "rewardPerTokenStored": {
        "details": "This is the stored value of the reward per token. It is used to calculate the reward per token and the earned rewards."
      },
      "rewardRate": {
        "details": "This is the rate at which rewards are distributed. It is calculated based on the total reward and the duration of the reward period."
      },
      "rewards": {
        "details": "This mapping stores the rewards for each user. It is updated whenever a user stakes or withdraws tokens, or gets their reward."
      },
      "rewardsDuration": {
        "details": "This is the duration for which the rewards are applicable. The rewards are distributed over this period at the rate specified by rewardRate."
      },
      "userRewardPerTokenPaid": {
        "details": "This mapping stores the reward per token paid to each user. It is used to calculate the earned rewards for each user."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ProvidedRewardTooHigh()": [
        {
          "notice": "Error thrown when the provided reward is too high."
        }
      ]
    },
    "events": {
      "RewardAdded(uint256)": {
        "notice": "Emitted when a reward is added."
      },
      "RewardPaid(address,uint256)": {
        "notice": "Emitted when a reward is paid to a user."
      },
      "SetStrategy(address,address)": {
        "notice": "Emitted when strategy config."
      },
      "UpdateLenBPool(address,address)": {
        "notice": "Emitted when LenB pool config."
      },
      "UpdateOperator(address,address)": {
        "notice": "Emitted when operator address updated."
      },
      "UpdateRewardsDuration(uint256,uint256)": {
        "notice": "Emitted when rewards duration updated."
      }
    },
    "kind": "user",
    "methods": {
      "earned(address)": {
        "notice": "Calculates the earned rewards for a given account."
      },
      "getReward()": {
        "notice": "Allows a user to get their reward."
      },
      "getRewardForDuration()": {
        "notice": "Calculates the reward for the entire duration."
      },
      "lastTimeRewardApplicable()": {
        "notice": "Determines the last time the reward is applicable."
      },
      "lastUpdateTime()": {
        "notice": "The last time the rewards were updated."
      },
      "notifyRewardAmount()": {
        "notice": "Notifies the contract about the reward amount."
      },
      "periodFinish()": {
        "notice": "The time when the reward period finishes."
      },
      "rewardPerToken()": {
        "notice": "Calculates the reward per token."
      },
      "rewardPerTokenStored()": {
        "notice": "The stored reward per token."
      },
      "rewardRate()": {
        "notice": "The rate of the reward."
      },
      "rewards(address)": {
        "notice": "The rewards for each user."
      },
      "rewardsDuration()": {
        "notice": "The duration of the reward period."
      },
      "updateLenBPool(address)": {
        "notice": "Called by owner to update the LenB Pool"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "The reward per token paid to each user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 549,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 552,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1892,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 816,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 822,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 824,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 826,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 828,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1408,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 421,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 541,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2166,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 726,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 795,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5991,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "strategy",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IStrategy)5607"
      },
      {
        "astId": 5995,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "_balancesOfStBBTC",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5998,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "periodFinish",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 6001,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "rewardRate",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 6004,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 6007,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 6010,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 6015,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6020,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "rewards",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6023,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "POOL",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IPool)5185"
      },
      {
        "astId": 6979,
        "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
        "label": "__gap",
        "offset": 0,
        "slot": "311",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPool)5185": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)5607": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)23_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)23_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 22,
            "contract": "contracts/periphery/WrappedStakedBBTCGatewayV2.sol:WrappedStakedBBTCGatewayV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}